"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var vitest_1 = require("vitest");
var constants_js_1 = require("../helpers/constants.js");
var mocks_js_1 = require("../mocks/mocks.js");
var getAndroidStatusAddressToolBarOffsets_js_1 = __importDefault(require("./getAndroidStatusAddressToolBarOffsets.js"));
(0, vitest_1.describe)('getAndroidStatusAddressToolBarOffsets', function () {
    (0, vitest_1.it)('should get the android status, address and toolbar height with only a major version in the navigator', function () {
        setEnvironment('ANDROID', 9, 'NEXUS_5X');
        (0, vitest_1.expect)((0, getAndroidStatusAddressToolBarOffsets_js_1.default)(constants_js_1.ANDROID_OFFSETS, { isHybridApp: false, isLandscape: false })).toMatchSnapshot();
    });
    (0, vitest_1.it)('should get the android status, address and toolbar height with major and minor version in the navigator', function () {
        setEnvironment('ANDROID', 8, 'NEXUS_5X');
        (0, vitest_1.expect)((0, getAndroidStatusAddressToolBarOffsets_js_1.default)(constants_js_1.ANDROID_OFFSETS, { isHybridApp: false, isLandscape: false })).toMatchSnapshot();
    });
    (0, vitest_1.it)('should get the android status, address and toolbar height with major, minor and patch version in the navigator', function () {
        setEnvironment('ANDROID', 7, 'NEXUS_5X');
        (0, vitest_1.expect)((0, getAndroidStatusAddressToolBarOffsets_js_1.default)(constants_js_1.ANDROID_OFFSETS, { isHybridApp: false, isLandscape: false })).toMatchSnapshot();
    });
    (0, vitest_1.it)('should set the default toolbar height when the toolbar height will become negative', function () {
        setEnvironment('ANDROID', 7, 'NEXUS_5X_INNER_HEIGHT');
        (0, vitest_1.expect)((0, getAndroidStatusAddressToolBarOffsets_js_1.default)(constants_js_1.ANDROID_OFFSETS, { isHybridApp: true, isLandscape: false })).toMatchSnapshot();
    });
    (0, vitest_1.it)('should set the dimensions properly for a device in landscape mode', function () {
        setEnvironment('ANDROID', 7, 'NEXUS_5X');
        (0, vitest_1.expect)((0, getAndroidStatusAddressToolBarOffsets_js_1.default)(constants_js_1.ANDROID_OFFSETS, { isHybridApp: true, isLandscape: true })).toMatchSnapshot();
    });
    (0, vitest_1.it)('should set the dimensions properly for a table in landscape mode', function () {
        setEnvironment('ANDROID', 7, 'TABLET_WIDTH');
        (0, vitest_1.expect)((0, getAndroidStatusAddressToolBarOffsets_js_1.default)(constants_js_1.ANDROID_OFFSETS, { isHybridApp: true, isLandscape: true })).toMatchSnapshot();
    });
});
function setEnvironment(os, version, deviceType) {
    Object.defineProperty(navigator, 'appVersion', __assign({ value: mocks_js_1.NAVIGATOR_APP_VERSIONS[os][version] }, mocks_js_1.CONFIGURABLE));
    Object.defineProperty(window.screen, 'width', __assign({ value: mocks_js_1.ANDROID_DEVICES[deviceType].width }, mocks_js_1.CONFIGURABLE));
    Object.defineProperty(window.screen, 'height', __assign({ value: mocks_js_1.ANDROID_DEVICES[deviceType].height }, mocks_js_1.CONFIGURABLE));
    Object.defineProperty(window, 'innerWidth', __assign({ value: mocks_js_1.ANDROID_DEVICES[deviceType].innerWidth }, mocks_js_1.CONFIGURABLE));
    Object.defineProperty(window, 'innerHeight', __assign({ value: mocks_js_1.ANDROID_DEVICES[deviceType].innerHeight }, mocks_js_1.CONFIGURABLE));
}
//# sourceMappingURL=getAndroidStatusAddressToolBarHeight.test.js.map