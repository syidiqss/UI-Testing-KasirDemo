{"version":3,"file":"getDocumentScrollHeight.js","sourceRoot":"","sources":["../../src/clientSideScripts/getDocumentScrollHeight.ts"],"names":[],"mappings":";;AAGA,SAAwB,uBAAuB;IAC3C,IAAM,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,eAAe,CAAC,YAAY,EAAE,MAAM,CAAC,WAAW,IAAI,CAAC,CAAC,CAAA;IAC/F,IAAM,YAAY,GAAG,QAAQ,CAAC,eAAe,CAAC,YAAY,CAAA;IAC1D,IAAM,gBAAgB,GAAG,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAA;IAInD,IAAI,cAAc,KAAK,YAAY,IAAI,gBAAgB,GAAG,YAAY,EAAE,CAAC;QACrE,OAAO,gBAAgB,CAAA;IAC3B,CAAC;IAMD,IAAI,UAAU,GAAG,CAAC,CAAA;IAClB,IAAI,kBAAkB,GAAG,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAA;IAEvD,IAAI,gBAAgB,KAAK,YAAY,IAAI,gBAAgB,KAAK,cAAc,EAAE,CAAC;QAC3E,eAAe,CAAC,QAAQ,CAAC,eAAe,CAAC,UAAU,CAAC,CAAA;QAKpD,OAAO,UAAU,GAAG,kBAAmB,CAAC,qBAAqB,EAAE,CAAC,GAAG,CAAA;IACvE,CAAC;IAGD,OAAO,YAAY,CAAA;IAMnB,SAAS,eAAe,CAAC,SAAc;QACnC,KAAK,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YAC7C,IAAM,WAAW,GAAG,SAAS,CAAC,CAAC,CAAC,CAAA;YAGhC,IAAI,WAAW,CAAC,YAAY,IAAI,WAAW,CAAC,YAAY,EAAE,CAAC;gBACvD,IAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,YAAY,EAAE,WAAW,CAAC,YAAY,CAAC,CAAA;gBAC7E,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAA;gBAC3C,IAAI,QAAQ,KAAK,UAAU,EAAE,CAAC;oBAC1B,kBAAkB,GAAG,WAAW,CAAA;gBACpC,CAAC;YACL,CAAC;YAED,IAAI,WAAW,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC;gBAChC,eAAe,CAAC,WAAW,CAAC,UAAU,CAAC,CAAA;YAC3C,CAAC;QACL,CAAC;IACL,CAAC;AACL,CAAC;AApDD,0CAoDC","sourcesContent":["/**\n * Get the document scroll height, this means the actual height of the page from the top to the bottom of the DOM\n */\nexport default function getDocumentScrollHeight(): number {\n    const viewPortHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0)\n    const scrollHeight = document.documentElement.scrollHeight\n    const bodyScrollHeight = document.body.scrollHeight\n\n    // In some situations the default scrollheight can be equal to the viewport height\n    // but the body scroll height can be different, then return that one\n    if (viewPortHeight === scrollHeight && bodyScrollHeight > scrollHeight) {\n        return bodyScrollHeight\n    }\n\n    // In some cases we can have a challenge determining the height of the page\n    // due to for example a `vh` property on the body element.\n    // If that is the case we need to walk over all the elements and determine the highest element\n    // this is a very time consuming thing, so our last hope :(\n    let pageHeight = 0\n    let largestNodeElement = document.querySelector('body')\n\n    if (bodyScrollHeight === scrollHeight && bodyScrollHeight === viewPortHeight) {\n        findHighestNode(document.documentElement.childNodes)\n\n        // There could be some elements above this largest element,\n        // add that on top\n        /* istanbul ignore next */\n        return pageHeight + largestNodeElement!.getBoundingClientRect().top\n    }\n\n    // The scrollHeight is good enough\n    return scrollHeight\n\n    /**\n   * Find the largest html element on the page\n   * @param nodesList\n   */\n    function findHighestNode(nodesList: any) {\n        for (let i = nodesList.length - 1; i >= 0; i--) {\n            const currentNode = nodesList[i]\n\n            /* istanbul ignore next */\n            if (currentNode.scrollHeight && currentNode.clientHeight) {\n                const elHeight = Math.max(currentNode.scrollHeight, currentNode.clientHeight)\n                pageHeight = Math.max(elHeight, pageHeight)\n                if (elHeight === pageHeight) {\n                    largestNodeElement = currentNode\n                }\n            }\n\n            if (currentNode.childNodes.length) {\n                findHighestNode(currentNode.childNodes)\n            }\n        }\n    }\n}\n"]}