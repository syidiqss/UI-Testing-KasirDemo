"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var vitest_1 = require("vitest");
var getDocumentScrollHeight_js_1 = __importDefault(require("./getDocumentScrollHeight.js"));
var mocks_js_1 = require("../mocks/mocks.js");
(0, vitest_1.describe)('getDocumentScrollHeight', function () {
    (0, vitest_1.it)('should return the bodyScrollHeight', function () {
        Object.defineProperty(document.documentElement, 'clientHeight', __assign({ value: 500 }, mocks_js_1.CONFIGURABLE));
        Object.defineProperty(window, 'innerHeight', __assign({ value: 500 }, mocks_js_1.CONFIGURABLE));
        Object.defineProperty(document.documentElement, 'scrollHeight', __assign({ value: 500 }, mocks_js_1.CONFIGURABLE));
        Object.defineProperty(document.body, 'scrollHeight', __assign({ value: 1500 }, mocks_js_1.CONFIGURABLE));
        (0, vitest_1.expect)((0, getDocumentScrollHeight_js_1.default)()).toEqual(1500);
    });
    (0, vitest_1.it)('should return the scrollHeight', function () {
        Object.defineProperty(document.documentElement, 'clientHeight', __assign({ value: 500 }, mocks_js_1.CONFIGURABLE));
        Object.defineProperty(window, 'innerHeight', __assign({ value: 500 }, mocks_js_1.CONFIGURABLE));
        Object.defineProperty(document.documentElement, 'scrollHeight', __assign({ value: 2250 }, mocks_js_1.CONFIGURABLE));
        Object.defineProperty(document.body, 'scrollHeight', __assign({ value: 1500 }, mocks_js_1.CONFIGURABLE));
        (0, vitest_1.expect)((0, getDocumentScrollHeight_js_1.default)()).toEqual(2250);
    });
    (0, vitest_1.it)('should return the height of the largest node', function () {
        Object.defineProperty(document.documentElement, 'clientHeight', __assign({ value: 1500 }, mocks_js_1.CONFIGURABLE));
        Object.defineProperty(window, 'innerHeight', __assign({ value: 1500 }, mocks_js_1.CONFIGURABLE));
        Object.defineProperty(document.documentElement, 'scrollHeight', __assign({ value: 1500 }, mocks_js_1.CONFIGURABLE));
        Object.defineProperty(document.body, 'scrollHeight', __assign({ value: 1500 }, mocks_js_1.CONFIGURABLE));
        document.body.innerHTML =
            '<div>' + '  <span style="height: 200px;width: 50px"/>' + '  <div style="height: 500px;width: 50px" />' + '</div>';
        (0, getDocumentScrollHeight_js_1.default)();
    });
});
//# sourceMappingURL=getDocumentScrollHeight.test.js.map