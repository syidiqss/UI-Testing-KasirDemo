"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var vitest_1 = require("vitest");
var mocks_js_1 = require("../mocks/mocks.js");
var getElementPositionTopScreenNativeMobile_js_1 = require("./getElementPositionTopScreenNativeMobile.js");
(0, vitest_1.describe)('getElementPositionTopScreenNativeMobile', function () {
    (0, vitest_1.beforeEach)(function () {
        Element.prototype.getBoundingClientRect = vitest_1.vi.fn(function () {
            return {
                width: 120,
                height: 120,
                top: 10,
                left: 100,
                bottom: 5,
                right: 12,
            };
        });
        document.body.innerHTML = '<div>' + '  <span id="username">Hello</span>' + '</div>';
    });
    (0, vitest_1.it)('should get the element position to the top of the screen for a mobile browser', function () {
        Object.defineProperty(window, 'innerHeight', __assign({ value: mocks_js_1.IOS_DEVICES.IPHONE.innerHeight }, mocks_js_1.CONFIGURABLE));
        (0, vitest_1.expect)((0, getElementPositionTopScreenNativeMobile_js_1.getElementPositionTopScreenNativeMobile)(document.querySelector('#username'), {
            isLandscape: false,
            safeArea: 0,
            screenHeight: mocks_js_1.IOS_DEVICES.IPHONE.height,
            screenWidth: mocks_js_1.IOS_DEVICES.IPHONE.width,
            sideBarWidth: mocks_js_1.IOS_DEVICES.IPHONE.sideBar,
            statusBarAddressBarHeight: 94,
        })).toMatchSnapshot();
    });
    (0, vitest_1.it)('should get the element position to the top of the screen for an app in portrait mode', function () {
        Object.defineProperty(window, 'innerHeight', __assign({ value: mocks_js_1.IOS_DEVICES.IPHONE.height }, mocks_js_1.CONFIGURABLE));
        (0, vitest_1.expect)((0, getElementPositionTopScreenNativeMobile_js_1.getElementPositionTopScreenNativeMobile)(document.querySelector('#username'), {
            isLandscape: false,
            safeArea: 0,
            screenHeight: mocks_js_1.IOS_DEVICES.IPHONE.height,
            screenWidth: mocks_js_1.IOS_DEVICES.IPHONE.width,
            sideBarWidth: mocks_js_1.IOS_DEVICES.IPHONE.sideBar,
            statusBarAddressBarHeight: 94,
        })).toMatchSnapshot();
    });
    (0, vitest_1.it)('should get the element position to the top of the screen for an app in landscape mode', function () {
        Object.defineProperty(window, 'innerHeight', __assign({ value: mocks_js_1.IOS_DEVICES.IPHONE.width }, mocks_js_1.CONFIGURABLE));
        (0, vitest_1.expect)((0, getElementPositionTopScreenNativeMobile_js_1.getElementPositionTopScreenNativeMobile)(document.querySelector('#username'), {
            isLandscape: true,
            safeArea: 44,
            screenHeight: mocks_js_1.IOS_DEVICES.IPHONE.innerHeight,
            screenWidth: mocks_js_1.IOS_DEVICES.IPHONE.width,
            sideBarWidth: mocks_js_1.IOS_DEVICES.IPHONE.sideBar,
            statusBarAddressBarHeight: 94,
        })).toMatchSnapshot();
    });
});
//# sourceMappingURL=getElementPositionTopScreenNativeMobile.test.js.map