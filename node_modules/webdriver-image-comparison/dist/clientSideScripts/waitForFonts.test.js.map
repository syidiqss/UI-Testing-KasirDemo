{"version":3,"file":"waitForFonts.test.js","sourceRoot":"","sources":["../../src/clientSideScripts/waitForFonts.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,iCAAwE;AACxE,sEAA4C;AAE5C,IAAA,iBAAQ,EAAC,oBAAoB,EAAE;IAC3B,IAAI,gBAA0B,CAAA;IAE9B,IAAA,mBAAU,EAAC;QACP,gBAAgB,gBAAQ,QAAQ,CAAE,CAAA;IACtC,CAAC,CAAC,CAAA;IAEF,IAAA,kBAAS,EAAC;QACN,QAAQ,GAAG,gBAAgB,CAAA;QAC3B,WAAE,CAAC,eAAe,EAAE,CAAA;IACxB,CAAC,CAAC,CAAA;IAEF,IAAA,WAAE,EAAC,gDAAgD,EAAE;;;;;oBAC3C,SAAS,GAAG,IAAI,OAAO,CAAO,UAAC,OAAO;wBACxC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAA;oBAC7B,CAAC,CAAC,CAAA;oBAEF,MAAM,CAAC,QAAQ,GAAG,sBACX,gBAAgB,KACnB,KAAK,EAAE,EAAE,KAAK,EAAE,SAAS,EAA4B,GAC5C,CAAA;oBAEb,WAAM,IAAA,eAAM,EAAC,IAAA,yBAAY,GAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,uBAAuB,CAAC,EAAA;;oBAAnE,SAAmE,CAAA;;;;SACtE,CAAC,CAAA;IAEF,IAAA,WAAE,EAAC,sDAAsD,EAAE;;;;;oBACjD,SAAS,GAAG,IAAI,OAAO,CAAO,UAAC,CAAC,EAAE,MAAM;wBAC1C,UAAU,CAAC,MAAM,EAAE,KAAK,CAAC,CAAA;oBAC7B,CAAC,CAAC,CAAA;oBAEF,MAAM,CAAC,QAAQ,GAAG,sBACX,gBAAgB,KACnB,KAAK,EAAE,EAAE,KAAK,EAAE,SAAS,EAA4B,GAC5C,CAAA;oBAEb,WAAE,CAAC,aAAa,EAAE,CAAA;oBACZ,OAAO,GAAG,IAAA,yBAAY,GAAE,CAAA;oBAE9B,WAAE,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAA;oBAE7B,WAAM,IAAA,eAAM,EAAC,OAAO,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,wBAAwB,CAAC,EAAA;;oBAA/D,SAA+D,CAAA;oBAC/D,WAAE,CAAC,aAAa,EAAE,CAAA;;;;SACrB,CAAC,CAAA;AACN,CAAC,CAAC,CAAA","sourcesContent":["// @vitest-environment jsdom\n\nimport { describe, it, expect, afterEach, beforeEach, vi } from 'vitest'\nimport waitForFonts from './waitForFonts.js'\n\ndescribe('waitForFontsLoaded', () => {\n    let originalDocument: Document\n\n    beforeEach(() => {\n        originalDocument = { ...document }\n    })\n\n    afterEach(() => {\n        document = originalDocument\n        vi.restoreAllMocks()\n    })\n\n    it('should resolve if fonts load within 11 seconds', async () => {\n        const mockReady = new Promise<void>((resolve) => {\n            setTimeout(resolve, 1000)\n        })\n\n        global.document = {\n            ...originalDocument,\n            fonts: { ready: mockReady } as unknown as FontFaceSet,\n        } as Document\n\n        await expect(waitForFonts()).resolves.toBe('All fonts have loaded')\n    })\n\n    it('should reject if fonts do not load within 11 seconds', async () => {\n        const mockReady = new Promise<void>((_, reject) => {\n            setTimeout(reject, 12000)\n        })\n\n        global.document = {\n            ...originalDocument,\n            fonts: { ready: mockReady } as unknown as FontFaceSet,\n        } as Document\n\n        vi.useFakeTimers()\n        const promise = waitForFonts()\n\n        vi.advanceTimersByTime(11000)\n\n        await expect(promise).rejects.toThrow('Font loading timed out')\n        vi.useRealTimers()\n    })\n})\n"]}