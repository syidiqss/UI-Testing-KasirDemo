{"version":3,"file":"checkAppScreen.js","sourceRoot":"","sources":["../../src/commands/checkAppScreen.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,oDAAkE;AAElE,kDAA0D;AAG1D,0DAA2F;AAC3F,wEAA8C;AAM9C,SAA8B,cAAc,CACxC,OAAgB,EAChB,YAA0B,EAC1B,OAAgB,EAChB,GAAW,EACX,kBAAsC,EACtC,eAAwB;;;;;;oBAGlB,oBAAoB,GAAG;wBACzB,GAAG,EAAE,kBAAkB,CAAC,GAAG;wBAC3B,MAAM,WACC,EAAE,YAAY,EAAE,EAAE,EAAE,EACpB,EAAE,cAAc,EAAG,EAAE,EAAE,CAC7B;qBACJ,CAAA;oBACK,oBAAoB,yBACnB,kBAAkB,CAAC,GAAG,CAAC,cAAc,GACrC,kBAAkB,CAAC,MAAM,CAC/B,CAAA;oBACO,QAAQ,GAAqB,OAAO,SAA5B,EAAE,cAAc,GAAK,OAAO,eAAZ,CAAY;oBACpC,SAAS,GAAe,YAAY,UAA3B,EAAE,QAAQ,GAAK,YAAY,SAAjB,CAAiB;oBAOxC,WAAM,IAAA,0BAAa,EAAC,OAAO,EAAE,YAAY,EAAE,OAAO,EAAE,GAAG,EAAE,oBAAoB,EAAE,eAAe,CAAC,EAAA;;oBAJ7F,KAIF,SAA+F,EAH/F,gBAAgB,sBAAA,EAChB,QAAQ,cAAA,EACR,WAAW,iBAAA;oBAIP,MAAM,GAAK,kBAAkB,CAAC,MAAM,OAA9B,CAA8B;oBACtB,WAAM,IAAA,sCAAsB,EAAC,MAAM,IAAI,EAAE,EAAE,cAAgC,CAAC,EAAA;;oBAA5F,aAAa,GAAG,SAA4E;oBACtE,WAAM,IAAA,wCAAwB,EAAC;4BACvD,SAAS,WAAA;4BACT,oBAAoB,sBAAA;4BACpB,YAAY,cAAA;yBACf,CAAC,EAAA;;oBAJI,mBAAmB,GAAG,SAI1B;oBAGI,oBAAoB,GAAG,IAAA,uCAA0B,EAAC,kBAAkB,CAAC,MAAM,CAAC,CAAA;oBAE5E,qBAAqB,GAAwB;wBAC/C,aAAa,kCAAM,aAAa,SAAK,mBAAmB,OAAC;wBACzD,cAAc,EAAE;4BACZ,GAAG,EAAE,kBAAkB,CAAC,GAAG,CAAC,cAAc;4BAC1C,MAAM,EAAE,oBAAoB;yBAC/B;wBACD,gBAAgB,kBAAA;wBAChB,QAAQ,UAAA;wBACR,aAAa,EAAE;4BACX,gBAAgB,EAAE,kBAAkB,CAAC,GAAG,CAAC,gBAAgB;4BACzD,YAAY,EAAE,OAAO,CAAC,YAAY;4BAClC,cAAc,EAAE,OAAO,CAAC,cAAc;4BACtC,UAAU,EAAE,OAAO,CAAC,UAAU;4BAC9B,WAAW,EAAE,YAAY,CAAC,WAAW;4BACrC,UAAU,EAAE,YAAY,CAAC,UAAU;4BACnC,QAAQ,UAAA;4BACR,eAAe,EAAE,kBAAkB,CAAC,GAAG,CAAC,eAAe;yBAC1D;wBACD,4BAA4B,EAAE,YAAY,CAAC,mBAAmB;wBAC9D,WAAW,EAAE,KAAK;wBAClB,SAAS,WAAA;wBACT,WAAW,aAAA;wBACX,QAAQ,EAAE,kBAAkB,CAAC,GAAG,CAAC,QAAQ;wBACzC,YAAY,EAAE,YAAY,CAAC,YAAY;qBAC1C,CAAA;oBAGD,WAAO,IAAA,+BAAmB,EAAC,QAAQ,EAAE,qBAAqB,EAAE,IAAI,EAAE,eAAe,CAAC,EAAA;;;;CACrF;AAtED,iCAsEC","sourcesContent":["import type { Folders } from '../base.interfaces.js'\nimport { screenMethodCompareOptions } from '../helpers/options.js'\nimport type {  ImageCompareOptions, ImageCompareResult } from '../methods/images.interfaces.js'\nimport { executeImageCompare } from '../methods/images.js'\nimport type { InstanceData } from '../methods/instanceData.interfaces.js'\nimport type { GetElementRect, Methods } from '../methods/methods.interfaces.js'\nimport { determineDeviceBlockOuts, determineIgnoreRegions } from '../methods/rectangles.js'\nimport saveAppScreen from './saveAppScreen.js'\nimport type { CheckScreenOptions } from './screen.interfaces.js'\n\n/**\n * Compare an image of the viewport of the screen\n */\nexport default async function checkAppScreen(\n    methods: Methods,\n    instanceData: InstanceData,\n    folders: Folders,\n    tag: string,\n    checkScreenOptions: CheckScreenOptions,\n    isNativeContext: boolean,\n): Promise<ImageCompareResult | number> {\n    // 1. Set some vars\n    const saveAppScreenOptions = {\n        wic: checkScreenOptions.wic,\n        method:{\n            ...{ hideElements: [] },\n            ...{ removeElements:  [] },\n        }\n    }\n    const screenCompareOptions = {\n        ...checkScreenOptions.wic.compareOptions,\n        ...checkScreenOptions.method,\n    }\n    const { executor, getElementRect } = methods\n    const { isAndroid, isMobile } = instanceData\n\n    // 2. Take the actual screenshot and retrieve the needed data\n    const {\n        devicePixelRatio,\n        fileName,\n        isLandscape,\n    } = await saveAppScreen(methods, instanceData, folders, tag, saveAppScreenOptions, isNativeContext)\n\n    // 3. Determine the ignore regions\n    const { ignore } = checkScreenOptions.method\n    const ignoreRegions = await determineIgnoreRegions(ignore || [], getElementRect as GetElementRect)\n    const deviceIgnoreRegions = await determineDeviceBlockOuts({\n        isAndroid,\n        screenCompareOptions,\n        instanceData,\n    })\n\n    // 4a. Determine the compare options\n    const methodCompareOptions = screenMethodCompareOptions(checkScreenOptions.method)\n\n    const executeCompareOptions: ImageCompareOptions = {\n        ignoreRegions: [...ignoreRegions, ...deviceIgnoreRegions],\n        compareOptions: {\n            wic: checkScreenOptions.wic.compareOptions,\n            method: methodCompareOptions,\n        },\n        devicePixelRatio,\n        fileName,\n        folderOptions: {\n            autoSaveBaseline: checkScreenOptions.wic.autoSaveBaseline,\n            actualFolder: folders.actualFolder,\n            baselineFolder: folders.baselineFolder,\n            diffFolder: folders.diffFolder,\n            browserName: instanceData.browserName,\n            deviceName: instanceData.deviceName,\n            isMobile,\n            savePerInstance: checkScreenOptions.wic.savePerInstance,\n        },\n        isAndroidNativeWebScreenshot: instanceData.nativeWebScreenshot,\n        isHybridApp: false,\n        isAndroid,\n        isLandscape,\n        logLevel: checkScreenOptions.wic.logLevel,\n        platformName: instanceData.platformName,\n    }\n\n    // 4b Now execute the compare and return the data\n    return executeImageCompare(executor, executeCompareOptions, true, isNativeContext)\n}\n"]}