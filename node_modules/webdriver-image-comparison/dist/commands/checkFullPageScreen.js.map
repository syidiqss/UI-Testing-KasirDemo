{"version":3,"file":"checkFullPageScreen.js","sourceRoot":"","sources":["../../src/commands/checkFullPageScreen.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kDAA0D;AAC1D,gDAAmD;AACnD,kFAAwD;AAMxD,oDAA4D;AAK5D,SAA8B,mBAAmB,CAC7C,OAAgB,EAChB,YAA0B,EAC1B,OAAgB,EAChB,GAAW,EACX,oBAA0C,EAC1C,eAAwB;;;;;;oBAGxB,IAAI,eAAe,EAAE,CAAC;wBAClB,MAAM,IAAI,KAAK,CAAC,2FAA2F,CAAC,CAAA;oBAChH,CAAC;oBAGK,mBAAmB,GAAwB;wBAC7C,GAAG,EAAE,oBAAoB,CAAC,GAAG;wBAC7B,MAAM,EAAE;4BACJ,mBAAmB,EAAE,oBAAoB,CAAC,MAAM,CAAC,mBAAmB;4BACpE,mBAAmB,EAAE,oBAAoB,CAAC,MAAM,CAAC,mBAAmB;4BACpE,qBAAqB,EAAE,oBAAoB,CAAC,MAAM,CAAC,qBAAqB;4BACxE,oBAAoB,EAAE,oBAAoB,CAAC,MAAM,CAAC,oBAAoB,IAAI,EAAE;4BAC5E,cAAc,EAAE,oBAAoB,CAAC,MAAM,CAAC,cAAc;4BAC1D,YAAY,EAAE,oBAAoB,CAAC,MAAM,CAAC,YAAY,IAAI,EAAE;4BAC5D,cAAc,EAAE,oBAAoB,CAAC,MAAM,CAAC,cAAc,IAAI,EAAE;4BAChE,kBAAkB,EAAE,oBAAoB,CAAC,MAAM,CAAC,kBAAkB;yBACrE;qBACJ,CAAA;oBACmD,WAAM,IAAA,+BAAkB,EACxE,OAAO,EACP,YAAY,EACZ,OAAO,EACP,GAAG,EACH,mBAAmB,EACnB,eAAe,CAClB,EAAA;;oBAPK,KAA8C,SAOnD,EAPO,gBAAgB,sBAAA,EAAE,QAAQ,cAAA,EAAE,WAAW,iBAAA;oBAUzC,cAAc,GAAG,IAAA,iCAAoB,EAAC,oBAAoB,CAAC,MAAM,CAAC,CAAA;oBAClE,qBAAqB,GAAG;wBAC1B,gBAAgB,kBAAA;wBAChB,cAAc,EAAE;4BACZ,GAAG,EAAE,oBAAoB,CAAC,GAAG,CAAC,cAAc;4BAC5C,MAAM,EAAE,cAAc;yBACzB;wBACD,QAAQ,UAAA;wBACR,aAAa,EAAE;4BACX,gBAAgB,EAAE,oBAAoB,CAAC,GAAG,CAAC,gBAAgB;4BAC3D,YAAY,EAAE,OAAO,CAAC,YAAY;4BAClC,cAAc,EAAE,OAAO,CAAC,cAAc;4BACtC,UAAU,EAAE,OAAO,CAAC,UAAU;4BAC9B,WAAW,EAAE,YAAY,CAAC,WAAW;4BACrC,UAAU,EAAE,YAAY,CAAC,UAAU;4BACnC,QAAQ,EAAE,IAAA,wBAAa,EAAC,YAAY,CAAC,YAAY,CAAC;4BAClD,eAAe,EAAE,oBAAoB,CAAC,GAAG,CAAC,eAAe;yBAC5D;wBACD,4BAA4B,EAAE,YAAY,CAAC,mBAAmB;wBAC9D,WAAW,EAAE,oBAAoB,CAAC,GAAG,CAAC,WAAW;wBACjD,WAAW,aAAA;wBACX,QAAQ,EAAE,oBAAoB,CAAC,GAAG,CAAC,QAAQ;wBAC3C,YAAY,EAAE,YAAY,CAAC,YAAY;qBAC1C,CAAA;oBAGD,WAAO,IAAA,+BAAmB,EAAC,OAAO,CAAC,QAAQ,EAAE,qBAAqB,CAAC,EAAA;;;;CACtE;AAhED,sCAgEC","sourcesContent":["import { executeImageCompare } from '../methods/images.js'\nimport { checkIsMobile } from '../helpers/utils.js'\nimport saveFullPageScreen from './saveFullPageScreen.js'\nimport type { ImageCompareResult } from '../methods/images.interfaces'\nimport type { Methods } from '../methods/methods.interfaces'\nimport type { InstanceData } from '../methods/instanceData.interfaces'\nimport type { Folders } from '../base.interfaces'\nimport type { CheckFullPageOptions, SaveFullPageOptions } from './fullPage.interfaces'\nimport { methodCompareOptions } from '../helpers/options.js'\n\n/**\n * Compare a fullpage screenshot\n */\nexport default async function checkFullPageScreen(\n    methods: Methods,\n    instanceData: InstanceData,\n    folders: Folders,\n    tag: string,\n    checkFullPageOptions: CheckFullPageOptions,\n    isNativeContext: boolean,\n): Promise<ImageCompareResult | number> {\n    // 1a. Check if the method is supported in native context\n    if (isNativeContext) {\n        throw new Error('The method checkFullPageScreen is not supported in native context for native mobile apps!')\n    }\n\n    // 1b. Take the actual full page screenshot and retrieve the needed data\n    const saveFullPageOptions: SaveFullPageOptions = {\n        wic: checkFullPageOptions.wic,\n        method: {\n            disableCSSAnimation: checkFullPageOptions.method.disableCSSAnimation,\n            enableLayoutTesting: checkFullPageOptions.method.enableLayoutTesting,\n            fullPageScrollTimeout: checkFullPageOptions.method.fullPageScrollTimeout,\n            hideAfterFirstScroll: checkFullPageOptions.method.hideAfterFirstScroll || [],\n            hideScrollBars: checkFullPageOptions.method.hideScrollBars,\n            hideElements: checkFullPageOptions.method.hideElements || [],\n            removeElements: checkFullPageOptions.method.removeElements || [],\n            waitForFontsLoaded: checkFullPageOptions.method.waitForFontsLoaded,\n        },\n    }\n    const { devicePixelRatio, fileName, isLandscape } = await saveFullPageScreen(\n        methods,\n        instanceData,\n        folders,\n        tag,\n        saveFullPageOptions,\n        isNativeContext,\n    )\n\n    // 2a. Determine the options\n    const compareOptions = methodCompareOptions(checkFullPageOptions.method)\n    const executeCompareOptions = {\n        devicePixelRatio,\n        compareOptions: {\n            wic: checkFullPageOptions.wic.compareOptions,\n            method: compareOptions,\n        },\n        fileName,\n        folderOptions: {\n            autoSaveBaseline: checkFullPageOptions.wic.autoSaveBaseline,\n            actualFolder: folders.actualFolder,\n            baselineFolder: folders.baselineFolder,\n            diffFolder: folders.diffFolder,\n            browserName: instanceData.browserName,\n            deviceName: instanceData.deviceName,\n            isMobile: checkIsMobile(instanceData.platformName),\n            savePerInstance: checkFullPageOptions.wic.savePerInstance,\n        },\n        isAndroidNativeWebScreenshot: instanceData.nativeWebScreenshot,\n        isHybridApp: checkFullPageOptions.wic.isHybridApp,\n        isLandscape,\n        logLevel: checkFullPageOptions.wic.logLevel,\n        platformName: instanceData.platformName,\n    }\n\n    // 2b Now execute the compare and return the data\n    return executeImageCompare(methods.executor, executeCompareOptions)\n}\n"]}