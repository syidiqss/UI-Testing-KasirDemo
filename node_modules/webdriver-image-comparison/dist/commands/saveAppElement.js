"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var afterScreenshot_js_1 = __importDefault(require("../helpers/afterScreenshot.js"));
var constants_js_1 = require("../helpers/constants.js");
var images_js_1 = require("../methods/images.js");
function saveAppElement(methods, instanceData, folders, element, tag, saveElementOptions, isNativeContext) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, formatImageName, logLevel, savePerInstance, executor, getElementRect, screenShot, resizeDimensions, browserName, browserVersion, deviceName, devicePixelRatio, deviceScreenSize, isIOS, isMobile, logName, platformName, platformVersion, base64Image, afterOptions;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = saveElementOptions.wic, formatImageName = _a.formatImageName, logLevel = _a.logLevel, savePerInstance = _a.savePerInstance;
                    executor = methods.executor, getElementRect = methods.getElementRect, screenShot = methods.screenShot;
                    resizeDimensions = saveElementOptions.method.resizeDimensions || constants_js_1.DEFAULT_RESIZE_DIMENSIONS;
                    browserName = instanceData.browserName, browserVersion = instanceData.browserVersion, deviceName = instanceData.deviceName, devicePixelRatio = instanceData.devicePixelRatio, deviceScreenSize = instanceData.deviceScreenSize, isIOS = instanceData.isIOS, isMobile = instanceData.isMobile, logName = instanceData.logName, platformName = instanceData.platformName, platformVersion = instanceData.platformVersion;
                    return [4, (0, images_js_1.takeBase64ElementScreenshot)({
                            element: element,
                            devicePixelRatio: devicePixelRatio,
                            isIOS: isIOS,
                            methods: {
                                getElementRect: getElementRect,
                                screenShot: screenShot,
                            },
                            resizeDimensions: resizeDimensions,
                        })];
                case 1:
                    base64Image = _b.sent();
                    afterOptions = {
                        actualFolder: folders.actualFolder,
                        base64Image: base64Image,
                        filePath: {
                            browserName: browserName,
                            deviceName: deviceName,
                            isMobile: isMobile,
                            savePerInstance: savePerInstance,
                        },
                        fileName: {
                            browserName: browserName,
                            browserVersion: browserVersion,
                            deviceName: deviceName,
                            devicePixelRatio: devicePixelRatio,
                            formatImageName: formatImageName,
                            isMobile: isMobile,
                            isTestInBrowser: !isNativeContext,
                            logName: logName,
                            name: '',
                            platformName: platformName,
                            platformVersion: platformVersion,
                            screenHeight: deviceScreenSize.height,
                            screenWidth: deviceScreenSize.width,
                            tag: tag,
                        },
                        isNativeContext: isNativeContext,
                        isLandscape: false,
                        logLevel: logLevel,
                        platformName: platformName,
                    };
                    return [2, (0, afterScreenshot_js_1.default)(executor, afterOptions)];
            }
        });
    });
}
exports.default = saveAppElement;
//# sourceMappingURL=saveAppElement.js.map