{"version":3,"file":"saveAppScreen.js","sourceRoot":"","sources":["../../src/commands/saveAppScreen.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,qFAA2D;AAC3D,kDAA6D;AAG7D,4DAAgE;AAMhE,SAA8B,aAAa,CACvC,OAAgB,EAChB,YAA0B,EAC1B,OAAgB,EAChB,GAAW,EACX,iBAAoC,EACpC,eAAwB;;;;;;oBAGlB,KAKF,iBAAiB,CAAC,GAAG,EAJrB,kBAAkB,wBAAA,EAClB,eAAe,qBAAA,EACf,QAAQ,cAAA,EACR,eAAe,qBAAA,CACM;oBAErB,WAAW,GAUX,YAAY,YAVD,EACX,cAAc,GASd,YAAY,eATE,EACd,UAAU,GAQV,YAAY,WARF,EACV,gBAAgB,GAOhB,YAAY,iBAPI,EAChB,gBAAgB,GAMhB,YAAY,iBANI,EAChB,KAAK,GAKL,YAAY,MALP,EACL,QAAQ,GAIR,YAAY,SAJJ,EACR,OAAO,GAGP,YAAY,QAHL,EACP,YAAY,GAEZ,YAAY,aAFA,EACZ,eAAe,GACf,YAAY,gBADG,CACH;oBAGU,WAAM,IAAA,qCAAoB,EAAC,OAAO,CAAC,UAAU,CAAC,EAAA;;oBAApE,WAAW,GAAW,SAA8C;yBAGpE,CAAA,KAAK,IAAI,kBAAkB,CAAA,EAA3B,cAA2B;oBACb,WAAM,IAAA,kCAAsB,EAAC;4BACvC,kBAAkB,oBAAA;4BAClB,WAAW,aAAA;4BACX,UAAU,YAAA;4BACV,gBAAgB,kBAAA;4BAChB,KAAK,OAAA;4BAEL,WAAW,EAAE,KAAK;4BAClB,QAAQ,UAAA;4BACR,UAAU,EAAE;gCAER,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,gBAAgB,CAAC,CAAC,CAAC,gBAAgB,CAAC,MAAM;gCACpF,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,gBAAgB,CAAC,KAAK,GAAG,gBAAgB,CAAC,CAAC,CAAC,gBAAgB,CAAC,KAAK;gCACjF,CAAC,EAAE,CAAC;gCACJ,CAAC,EAAE,CAAC;6BACP;yBACJ,CAAC,EAAA;;oBAhBF,WAAW,GAAG,SAgBZ,CAAA;;;oBAIA,YAAY,GAA2B;wBACzC,YAAY,EAAE,OAAO,CAAC,YAAY;wBAClC,WAAW,aAAA;wBACX,QAAQ,EAAE;4BACN,WAAW,aAAA;4BACX,UAAU,YAAA;4BACV,QAAQ,UAAA;4BACR,eAAe,iBAAA;yBAClB;wBACD,QAAQ,EAAE;4BACN,WAAW,aAAA;4BACX,cAAc,gBAAA;4BACd,UAAU,YAAA;4BACV,gBAAgB,EAAE,gBAAgB;4BAClC,eAAe,iBAAA;4BACf,QAAQ,UAAA;4BACR,eAAe,EAAE,CAAC,eAAe;4BACjC,OAAO,SAAA;4BACP,IAAI,EAAE,EAAE;4BACR,YAAY,cAAA;4BACZ,eAAe,iBAAA;4BACf,YAAY,EAAE,gBAAgB,CAAC,MAAM;4BACrC,WAAW,EAAE,gBAAgB,CAAC,KAAK;4BACnC,GAAG,KAAA;yBACN;wBACD,eAAe,iBAAA;wBACf,WAAW,EAAC,KAAK;wBACjB,QAAQ,UAAA;wBACR,YAAY,cAAA;qBACf,CAAA;oBAGD,WAAO,IAAA,4BAAe,EAAC,OAAO,CAAC,QAAQ,EAAE,YAAY,CAAC,EAAA;;;;CACzD;AAtFD,gCAsFC","sourcesContent":["import type { Folders } from '../base.interfaces.js'\nimport type { AfterScreenshotOptions, ScreenshotOutput } from '../helpers/afterScreenshot.interfaces.js'\nimport afterScreenshot from '../helpers/afterScreenshot.js'\nimport { makeCroppedBase64Image } from '../methods/images.js'\nimport type { InstanceData } from '../methods/instanceData.interfaces.js'\nimport type { Methods } from '../methods/methods.interfaces.js'\nimport { takeBase64Screenshot } from '../methods/screenshots.js'\nimport type { SaveScreenOptions } from './screen.interfaces.js'\n\n/**\n * Saves an image of the device screen for a native app\n */\nexport default async function saveAppScreen(\n    methods: Methods,\n    instanceData: InstanceData,\n    folders: Folders,\n    tag: string,\n    saveScreenOptions: SaveScreenOptions,\n    isNativeContext: boolean,\n): Promise<ScreenshotOutput> {\n    // 1. Set some variables\n    const {\n        addIOSBezelCorners,\n        formatImageName,\n        logLevel,\n        savePerInstance,\n    } = saveScreenOptions.wic\n    const {\n        browserName,\n        browserVersion,\n        deviceName,\n        devicePixelRatio,\n        deviceScreenSize,\n        isIOS,\n        isMobile,\n        logName,\n        platformName,\n        platformVersion,\n    } = instanceData\n\n    // 2.  Take the screenshot\n    let base64Image: string = await takeBase64Screenshot(methods.screenShot)\n\n    // 3.  We only need to use the `makeCroppedBase64Image` for iOS and when `addIOSBezelCorners` is true\n    if (isIOS && addIOSBezelCorners) {\n        base64Image = await makeCroppedBase64Image({\n            addIOSBezelCorners,\n            base64Image,\n            deviceName,\n            devicePixelRatio,\n            isIOS,\n            // @TODO: is this one needed for native apps?\n            isLandscape: false,\n            logLevel,\n            rectangles :{\n                // For iOS the screen size is always in css pixels, the screenshot is in device pixels\n                height: isIOS ? deviceScreenSize.height * devicePixelRatio : deviceScreenSize.height,\n                width: isIOS ? deviceScreenSize.width * devicePixelRatio : deviceScreenSize.width,\n                x: 0,\n                y: 0,\n            },\n        })\n    }\n\n    // 4.  The after the screenshot methods\n    const afterOptions: AfterScreenshotOptions = {\n        actualFolder: folders.actualFolder,\n        base64Image,\n        filePath: {\n            browserName,\n            deviceName,\n            isMobile,\n            savePerInstance,\n        },\n        fileName: {\n            browserName,\n            browserVersion,\n            deviceName,\n            devicePixelRatio: devicePixelRatio,\n            formatImageName,\n            isMobile,\n            isTestInBrowser: !isNativeContext,\n            logName,\n            name: '',\n            platformName,\n            platformVersion,\n            screenHeight: deviceScreenSize.height,\n            screenWidth: deviceScreenSize.width,\n            tag,\n        },\n        isNativeContext,\n        isLandscape:false,\n        logLevel,\n        platformName,\n    }\n\n    // 5.  Return the data\n    return afterScreenshot(methods.executor, afterOptions)\n}\n"]}