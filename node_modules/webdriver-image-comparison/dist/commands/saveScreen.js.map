{"version":3,"file":"saveScreen.js","sourceRoot":"","sources":["../../src/commands/saveScreen.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,wEAA8C;AAC9C,wEAA8C;AAK9C,SAA8B,UAAU,CACpC,OAAgB,EAChB,YAA0B,EAC1B,OAAgB,EAChB,GAAW,EACX,iBAAoC,EACpC,eAAwB;;;YAExB,WAAO,eAAe;oBAClB,CAAC,CAAC,IAAA,0BAAa,EAAC,OAAO,EAAE,YAAY,EAAE,OAAO,EAAE,GAAG,EAAE,iBAAiB,EAAE,eAAe,CAAC;oBACxF,CAAC,CAAC,IAAA,0BAAa,EAAC,OAAO,EAAE,YAAY,EAAE,OAAO,EAAE,GAAG,EAAE,iBAAiB,EAAE,eAAe,CAAC,EAAA;;;CAC/F;AAXD,6BAWC","sourcesContent":["import type { Methods } from '../methods/methods.interfaces'\nimport type { Folders } from '../base.interfaces'\nimport type { SaveScreenOptions } from './screen.interfaces'\nimport type { InstanceData } from '../methods/instanceData.interfaces'\nimport type { ScreenshotOutput } from '../helpers/afterScreenshot.interfaces'\nimport saveAppScreen from './saveAppScreen.js'\nimport saveWebScreen from './saveWebScreen.js'\n\n/**\n * Saves an image of the viewport of the desktop browser or the screen of a mobile device\n */\nexport default async function saveScreen(\n    methods: Methods,\n    instanceData: InstanceData,\n    folders: Folders,\n    tag: string,\n    saveScreenOptions: SaveScreenOptions,\n    isNativeContext: boolean,\n): Promise<ScreenshotOutput> {\n    return isNativeContext\n        ? saveAppScreen(methods, instanceData, folders, tag, saveScreenOptions, isNativeContext)\n        : saveWebScreen(methods, instanceData, folders, tag, saveScreenOptions, isNativeContext)\n}\n"]}