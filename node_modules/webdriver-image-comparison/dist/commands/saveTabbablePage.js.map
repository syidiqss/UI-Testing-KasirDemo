{"version":3,"file":"saveTabbablePage.js","sourceRoot":"","sources":["../../src/commands/saveTabbablePage.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,yGAA+E;AAC/E,kFAAwD;AAExD,yGAA+E;AAK/E,SAA8B,gBAAgB,CAC1C,OAAgB,EAChB,YAA0B,EAC1B,OAAgB,EAChB,GAAW,EACX,mBAAwC,EACxC,eAAwB;;;;;;oBAGxB,IAAI,eAAe,EAAE,CAAC;wBAClB,MAAM,IAAI,KAAK,CAAC,wFAAwF,CAAC,CAAA;oBAC7G,CAAC;oBAGD,WAAM,OAAO,CAAC,QAAQ,CAAC,iCAAoB,EAAE,mBAAmB,CAAC,GAAG,CAAC,eAAe,CAAC,EAAA;;oBAArF,SAAqF,CAAA;oBAGhE,WAAM,IAAA,+BAAkB,EAAC,OAAO,EAAE,YAAY,EAAE,OAAO,EAAE,GAAG,EAAE,mBAAmB,EAAE,eAAe,CAAC,EAAA;;oBAAlH,YAAY,GAAG,SAAmG;oBAGxH,WAAM,OAAO,CAAC,QAAQ,CAAC,iCAAoB,EAAE,qBAAqB,CAAC,EAAA;;oBAAnE,SAAmE,CAAA;oBAGnE,WAAO,YAAY,EAAA;;;;CACtB;AAxBD,mCAwBC","sourcesContent":["import type { ScreenshotOutput } from '../helpers/afterScreenshot.interfaces'\nimport type { Methods } from '../methods/methods.interfaces'\nimport type { InstanceData } from '../methods/instanceData.interfaces'\nimport type { Folders } from '../base.interfaces'\nimport drawTabbableOnCanvas from '../clientSideScripts/drawTabbableOnCanvas.js'\nimport saveFullPageScreen from './saveFullPageScreen.js'\nimport type { SaveTabbableOptions } from './tabbable.interfaces'\nimport removeElementFromDom from '../clientSideScripts/removeElementFromDom.js'\n\n/**\n * Saves an image of all tab executions\n */\nexport default async function saveTabbablePage(\n    methods: Methods,\n    instanceData: InstanceData,\n    folders: Folders,\n    tag: string,\n    saveTabbableOptions: SaveTabbableOptions,\n    isNativeContext: boolean,\n): Promise<ScreenshotOutput> {\n    // 1a. Check if the method is supported in native context\n    if (isNativeContext) {\n        throw new Error('The method saveTabbablePage is not supported in native context for native mobile apps!')\n    }\n\n    // 1b. Inject drawing the tabbables\n    await methods.executor(drawTabbableOnCanvas, saveTabbableOptions.wic.tabbableOptions)\n\n    // 2. Create the screenshot\n    const fullPageData = await saveFullPageScreen(methods, instanceData, folders, tag, saveTabbableOptions, isNativeContext)\n\n    // 3. Remove the canvas\n    await methods.executor(removeElementFromDom, 'wic-tabbable-canvas')\n\n    // 4. Return the data\n    return fullPageData\n}\n"]}