{"version":3,"file":"saveWebElement.js","sourceRoot":"","sources":["../../src/commands/saveWebElement.ts"],"names":[],"mappings":"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","sourcesContent":["import { takeBase64Screenshot } from '../methods/screenshots.js'\nimport { makeCroppedBase64Image } from '../methods/images.js'\nimport beforeScreenshot from '../helpers/beforeScreenshot.js'\nimport afterScreenshot from '../helpers/afterScreenshot.js'\nimport { determineElementRectangles } from '../methods/rectangles.js'\nimport type { AfterScreenshotOptions, ScreenshotOutput } from '../helpers/afterScreenshot.interfaces.js'\nimport type { Methods } from '../methods/methods.interfaces.js'\nimport type { InstanceData } from '../methods/instanceData.interfaces.js'\nimport type { Folders } from '../base.interfaces.js'\nimport type { SaveElementOptions, WicElement } from './element.interfaces.js'\nimport type { ElementRectanglesOptions, RectanglesOutput } from '../methods/rectangles.interfaces.js'\nimport type { BeforeScreenshotOptions, BeforeScreenshotResult } from '../helpers/beforeScreenshot.interfaces.js'\nimport { DEFAULT_RESIZE_DIMENSIONS } from '../helpers/constants.js'\nimport type { ResizeDimensions } from '../methods/images.interfaces.js'\nimport scrollElementIntoView from '../clientSideScripts/scrollElementIntoView.js'\nimport { waitFor } from '../helpers/utils.js'\nimport scrollToPosition from '../clientSideScripts/scrollToPosition.js'\n\n/**\n * Saves an image of an element\n */\nexport default async function saveWebElement(\n    methods: Methods,\n    instanceData: InstanceData,\n    folders: Folders,\n    element: HTMLElement | WicElement,\n    tag: string,\n    saveElementOptions: SaveElementOptions,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isNativeContext: boolean,\n): Promise<ScreenshotOutput> {\n    // 1a. Set some variables\n    const { addressBarShadowPadding, autoElementScroll, formatImageName, logLevel, savePerInstance, toolBarShadowPadding } =\n        saveElementOptions.wic\n    const { executor } = methods\n    // 1b. Set the method options to the right values\n    const disableCSSAnimation: boolean = saveElementOptions.method.disableCSSAnimation !== undefined\n        ? Boolean(saveElementOptions.method.disableCSSAnimation)\n        : saveElementOptions.wic.disableCSSAnimation\n    const enableLayoutTesting: boolean = saveElementOptions.method.enableLayoutTesting !== undefined\n        ? Boolean(saveElementOptions.method.enableLayoutTesting)\n        : saveElementOptions.wic.enableLayoutTesting\n    const hideScrollBars: boolean = saveElementOptions.method.hideScrollBars !== undefined\n        ? Boolean(saveElementOptions.method.hideScrollBars)\n        : saveElementOptions.wic.hideScrollBars\n    const resizeDimensions: ResizeDimensions | number = saveElementOptions.method.resizeDimensions || DEFAULT_RESIZE_DIMENSIONS\n    const hideElements: HTMLElement[] = saveElementOptions.method.hideElements || []\n    const removeElements: HTMLElement[] = saveElementOptions.method.removeElements || []\n    const waitForFontsLoaded: boolean = saveElementOptions.method.waitForFontsLoaded !== undefined\n        ? Boolean(saveElementOptions.method.waitForFontsLoaded)\n        : saveElementOptions.wic.waitForFontsLoaded\n\n    // 2.  Prepare the beforeScreenshot\n    const beforeOptions: BeforeScreenshotOptions = {\n        instanceData,\n        addressBarShadowPadding,\n        disableCSSAnimation,\n        enableLayoutTesting,\n        hideElements,\n        logLevel,\n        noScrollBars: hideScrollBars,\n        removeElements,\n        toolBarShadowPadding,\n        waitForFontsLoaded,\n    }\n    const enrichedInstanceData: BeforeScreenshotResult = await beforeScreenshot(executor, beforeOptions, true)\n    const {\n        browserName,\n        browserVersion,\n        deviceName,\n        dimensions: {\n            window: { devicePixelRatio, innerHeight, isLandscape, outerHeight, outerWidth, screenHeight, screenWidth },\n        },\n        isAndroid,\n        isAndroidNativeWebScreenshot,\n        isIOS,\n        isMobile,\n        isTestInBrowser,\n        logName,\n        name,\n        platformName,\n        platformVersion,\n    } = enrichedInstanceData\n\n    // Scroll the element into top of the viewport and return the current scroll position\n    let currentPosition: number | undefined\n    if (autoElementScroll) {\n        currentPosition = await executor(scrollElementIntoView, element, addressBarShadowPadding)\n        await waitFor(500)\n    }\n\n    // 3.  Take the screenshot\n    const base64Image: string = await takeBase64Screenshot(methods.screenShot)\n\n    // 4.  Determine the rectangles\n    const elementRectangleOptions: ElementRectanglesOptions = {\n        /**\n         * ToDo: handle NaA case\n         */\n        devicePixelRatio: devicePixelRatio || NaN,\n        innerHeight: innerHeight || NaN,\n        isAndroidNativeWebScreenshot,\n        isAndroid,\n        isIOS,\n        isLandscape,\n    }\n    const rectangles: RectanglesOutput = await determineElementRectangles({\n        executor,\n        base64Image,\n        options: elementRectangleOptions,\n        element,\n    })\n\n    // When the screenshot has been taken and the element position has been determined,\n    // we can scroll back to the original position\n    // We don't need to wait for the scroll here because we don't take a screenshot after this\n    if (autoElementScroll && currentPosition) {\n        await executor(scrollToPosition, currentPosition)\n    }\n\n    // 5.  Make a cropped base64 image with resizeDimensions\n    // @TODO: we have isLandscape here\n    const croppedBase64Image = await makeCroppedBase64Image({\n        addIOSBezelCorners: false,\n        base64Image,\n        deviceName,\n        devicePixelRatio: devicePixelRatio || NaN,\n        isIOS,\n        isLandscape,\n        logLevel,\n        rectangles,\n        resizeDimensions,\n    })\n\n    // 6.  The after the screenshot methods\n    const afterOptions: AfterScreenshotOptions = {\n        actualFolder: folders.actualFolder,\n        base64Image: croppedBase64Image,\n        disableCSSAnimation,\n        enableLayoutTesting,\n        filePath: {\n            browserName,\n            deviceName,\n            isMobile,\n            savePerInstance: savePerInstance,\n        },\n        fileName: {\n            browserName,\n            browserVersion,\n            deviceName,\n            devicePixelRatio: devicePixelRatio || NaN,\n            formatImageName,\n            isMobile,\n            isTestInBrowser,\n            logName,\n            name,\n            outerHeight: outerHeight || NaN,\n            outerWidth: outerWidth || NaN,\n            platformName,\n            platformVersion,\n            screenHeight: screenHeight || NaN,\n            screenWidth: screenWidth || NaN,\n            tag,\n        },\n        hideElements,\n        hideScrollBars,\n        isLandscape,\n        isNativeContext: false,\n        logLevel,\n        platformName: instanceData.platformName,\n        removeElements,\n    }\n\n    // 7.  Return the data\n    return afterScreenshot(executor, afterOptions)\n}\n"]}