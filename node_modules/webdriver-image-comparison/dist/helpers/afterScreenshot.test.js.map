{"version":3,"file":"afterScreenshot.test.js","sourceRoot":"","sources":["../../src/helpers/afterScreenshot.test.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uCAAgC;AAEhC,iCAA4D;AAC5D,4EAAkD;AAClD,qCAAiC;AACjC,2DAA+C;AAE/C,WAAE,CAAC,IAAI,CAAC,sBAAsB,EAAE,cAAM,OAAA,CAAC;IACnC,eAAe,EAAE,WAAE,CAAC,EAAE,EAAE;CAC3B,CAAC,EAFoC,CAEpC,CAAC,CAAA;AAEH,IAAA,iBAAQ,EAAC,iBAAiB,EAAE;IACxB,IAAM,MAAM,GAAG,IAAA,gBAAI,EAAC,OAAO,CAAC,GAAG,EAAE,EAAE,uBAAuB,CAAC,CAAA;IAE3D,IAAA,kBAAS,EAAC,cAAM,OAAA,IAAA,iBAAM,EAAC,MAAM,CAAC,EAAd,CAAc,CAAC,CAAA;IAE/B,IAAA,WAAE,EAAC,oEAAoE,EAAE;;;;;oBAC/D,eAAe,GAAG,WAAE,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC,CAAA;oBAC7C,OAAO,GAAG;wBACZ,YAAY,EAAE,MAAM;wBACpB,WAAW,EAAE,QAAQ;wBACrB,mBAAmB,EAAE,KAAK;wBAC1B,QAAQ,EAAE;4BACN,WAAW,EAAE,aAAa;4BAC1B,UAAU,EAAE,YAAY;4BACxB,QAAQ,EAAE,KAAK;4BACf,eAAe,EAAE,IAAI;yBACxB;wBACD,QAAQ,EAAE;4BACN,WAAW,EAAE,aAAa;4BAC1B,cAAc,EAAE,gBAAgB;4BAChC,UAAU,EAAE,YAAY;4BACxB,gBAAgB,EAAE,CAAC;4BACnB,eAAe,EAAE,gDAAgD;4BACjE,QAAQ,EAAE,KAAK;4BACf,eAAe,EAAE,IAAI;4BACrB,OAAO,EAAE,SAAS;4BAClB,IAAI,EAAE,MAAM;4BACZ,WAAW,EAAE,GAAG;4BAChB,UAAU,EAAE,IAAI;4BAChB,YAAY,EAAE,cAAc;4BAC5B,eAAe,EAAE,iBAAiB;4BAClC,YAAY,EAAE,GAAG;4BACjB,WAAW,EAAE,IAAI;4BACjB,GAAG,EAAE,KAAK;yBACb;wBACD,cAAc,EAAE,IAAI;wBACpB,WAAW,EAAE,KAAK;wBAClB,eAAe,EAAE,KAAK;wBACtB,QAAQ,EAAE,6BAAQ,CAAC,KAAK;wBACxB,YAAY,EAAE,CAAoB,aAAc,CAAC;wBACjD,YAAY,EAAE,EAAE;wBAChB,cAAc,EAAE,CAAoB,aAAc,CAAC;qBACtD,CAAA;oBAED,KAAA,eAAM,CAAA;oBAAC,WAAM,IAAA,4BAAe,EAAC,eAAe,EAAE,OAAO,CAAC,EAAA;;oBAAtD,kBAAO,SAA+C,EAAC,CAAC,OAAO,CAAC;wBAC5D,gBAAgB,EAAE,CAAC;wBACnB,QAAQ,EAAE,oCAAoC;wBAC9C,WAAW,EAAE,KAAK;wBAClB,IAAI,EAAE,UAAG,OAAO,CAAC,GAAG,EAAE,8CAA2C;qBACpE,CAAC,CAAA;;;;SACL,CAAC,CAAA;AACN,CAAC,CAAC,CAAA","sourcesContent":["import { join } from 'node:path'\n\nimport { describe, it, expect, afterEach, vi } from 'vitest'\nimport afterScreenshot from './afterScreenshot.js'\nimport { remove } from 'fs-extra'\nimport { LogLevel } from './options.interfaces'\n\nvi.mock('../methods/images.js', () => ({\n    saveBase64Image: vi.fn()\n}))\n\ndescribe('afterScreenshot', () => {\n    const folder = join(process.cwd(), '/.tmp/afterScreenshot')\n\n    afterEach(() => remove(folder))\n\n    it('should be able to return the ScreenshotOutput with default options', async () => {\n        const MOCKED_EXECUTOR = vi.fn().mockReturnValue('')\n        const options = {\n            actualFolder: folder,\n            base64Image: 'string',\n            disableCSSAnimation: false,\n            filePath: {\n                browserName: 'browserName',\n                deviceName: 'deviceName',\n                isMobile: false,\n                savePerInstance: true,\n            },\n            fileName: {\n                browserName: 'browserName',\n                browserVersion: 'browserVersion',\n                deviceName: 'deviceName',\n                devicePixelRatio: 2,\n                formatImageName: '{tag}-{browserName}-{width}x{height}-dpr-{dpr}',\n                isMobile: false,\n                isTestInBrowser: true,\n                logName: 'logName',\n                name: 'name',\n                outerHeight: 850,\n                outerWidth: 1400,\n                platformName: 'platformName',\n                platformVersion: 'platformVersion',\n                screenHeight: 900,\n                screenWidth: 1440,\n                tag: 'tag',\n            },\n            hideScrollBars: true,\n            isLandscape: false,\n            isNativeContext: false,\n            logLevel: LogLevel.debug,\n            hideElements: [<HTMLElement>(<any>'<div></div>')],\n            platformName: '',\n            removeElements: [<HTMLElement>(<any>'<div></div>')],\n        }\n\n        expect(await afterScreenshot(MOCKED_EXECUTOR, options)).toEqual({\n            devicePixelRatio: 2,\n            fileName: 'tag-browserName-1400x850-dpr-2.png',\n            isLandscape: false,\n            path: `${process.cwd()}/.tmp/afterScreenshot/desktop_browserName`,\n        })\n    })\n})\n"]}