"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var hideScrollbars_js_1 = __importDefault(require("../clientSideScripts/hideScrollbars.js"));
var setCustomCss_js_1 = __importDefault(require("../clientSideScripts/setCustomCss.js"));
var constants_js_1 = require("./constants.js");
var utils_js_1 = require("./utils.js");
var instanceData_js_1 = __importDefault(require("../methods/instanceData.js"));
var hideRemoveElements_js_1 = __importDefault(require("../clientSideScripts/hideRemoveElements.js"));
var options_interfaces_1 = require("./options.interfaces");
var toggleTextTransparency_js_1 = __importDefault(require("../clientSideScripts/toggleTextTransparency.js"));
var waitForFonts_js_1 = __importDefault(require("../clientSideScripts/waitForFonts.js"));
function beforeScreenshot(executor, options, addShadowPadding) {
    if (addShadowPadding === void 0) { addShadowPadding = false; }
    return __awaiter(this, void 0, void 0, function () {
        var _a, browserName, nativeWebScreenshot, platformName, addressBarShadowPadding, disableCSSAnimation, enableLayoutTesting, hideElements, logLevel, noScrollBars, removeElements, toolBarShadowPadding, waitForFontsLoaded, addressBarPadding, toolBarPadding, e_1, e_2, instanceOptions;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = options.instanceData, browserName = _a.browserName, nativeWebScreenshot = _a.nativeWebScreenshot, platformName = _a.platformName;
                    addressBarShadowPadding = options.addressBarShadowPadding, disableCSSAnimation = options.disableCSSAnimation, enableLayoutTesting = options.enableLayoutTesting, hideElements = options.hideElements, logLevel = options.logLevel, noScrollBars = options.noScrollBars, removeElements = options.removeElements, toolBarShadowPadding = options.toolBarShadowPadding, waitForFontsLoaded = options.waitForFontsLoaded;
                    addressBarPadding = (0, utils_js_1.getAddressBarShadowPadding)({
                        platformName: platformName,
                        browserName: browserName,
                        nativeWebScreenshot: nativeWebScreenshot,
                        addressBarShadowPadding: addressBarShadowPadding,
                        addShadowPadding: addShadowPadding,
                    });
                    toolBarPadding = (0, utils_js_1.getToolBarShadowPadding)({ platformName: platformName, browserName: browserName, toolBarShadowPadding: toolBarShadowPadding, addShadowPadding: addShadowPadding });
                    if (!waitForFontsLoaded) return [3, 4];
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 3, , 4]);
                    return [4, executor(waitForFonts_js_1.default)];
                case 2:
                    _b.sent();
                    return [3, 4];
                case 3:
                    e_1 = _b.sent();
                    if (logLevel === options_interfaces_1.LogLevel.debug || logLevel === options_interfaces_1.LogLevel.warn) {
                        console.log('Waiting for fonts to load threw an error:', e_1);
                    }
                    return [3, 4];
                case 4:
                    if (!noScrollBars) return [3, 6];
                    return [4, executor(hideScrollbars_js_1.default, noScrollBars)];
                case 5:
                    _b.sent();
                    _b.label = 6;
                case 6:
                    if (!(hideElements.length > 0 || removeElements.length > 0)) return [3, 10];
                    _b.label = 7;
                case 7:
                    _b.trys.push([7, 9, , 10]);
                    return [4, executor(hideRemoveElements_js_1.default, { hide: hideElements, remove: removeElements }, true)];
                case 8:
                    _b.sent();
                    return [3, 10];
                case 9:
                    e_2 = _b.sent();
                    if (logLevel === options_interfaces_1.LogLevel.debug || logLevel === options_interfaces_1.LogLevel.warn) {
                        console.log('\x1b[33m%s\x1b[0m', "\n#####################################################################################\n WARNING:\n (One of) the elements that needed to be hidden or removed could not be found on the\n page and caused this error\n Error: ".concat(e_2, "\n We made sure the test didn't break.\n#####################################################################################\n"));
                    }
                    return [3, 10];
                case 10:
                    if (!(disableCSSAnimation || (0, utils_js_1.checkIsMobile)(platformName))) return [3, 13];
                    return [4, executor(setCustomCss_js_1.default, { addressBarPadding: addressBarPadding, disableCSSAnimation: disableCSSAnimation, id: constants_js_1.CUSTOM_CSS_ID, toolBarPadding: toolBarPadding })];
                case 11:
                    _b.sent();
                    return [4, (0, utils_js_1.waitFor)(500)];
                case 12:
                    _b.sent();
                    _b.label = 13;
                case 13:
                    if (!enableLayoutTesting) return [3, 16];
                    return [4, executor(toggleTextTransparency_js_1.default, enableLayoutTesting)];
                case 14:
                    _b.sent();
                    return [4, (0, utils_js_1.waitFor)(500)];
                case 15:
                    _b.sent();
                    _b.label = 16;
                case 16:
                    instanceOptions = __assign({ addressBarShadowPadding: options.addressBarShadowPadding, toolBarShadowPadding: options.toolBarShadowPadding }, options.instanceData);
                    return [2, (0, instanceData_js_1.default)(executor, instanceOptions, addShadowPadding)];
            }
        });
    });
}
exports.default = beforeScreenshot;
//# sourceMappingURL=beforeScreenshot.js.map