{"version":3,"file":"beforeScreenshot.js","sourceRoot":"","sources":["../../src/helpers/beforeScreenshot.ts"],"names":[],"mappings":"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","sourcesContent":["import hideScrollBars from '../clientSideScripts/hideScrollbars.js'\nimport setCustomCss from '../clientSideScripts/setCustomCss.js'\nimport { CUSTOM_CSS_ID } from './constants.js'\nimport { checkIsMobile, getAddressBarShadowPadding, getToolBarShadowPadding, waitFor } from './utils.js'\nimport getEnrichedInstanceData from '../methods/instanceData.js'\nimport type { BeforeScreenshotOptions, BeforeScreenshotResult } from './beforeScreenshot.interfaces'\nimport type { Executor } from '../methods/methods.interfaces'\nimport hideRemoveElements from '../clientSideScripts/hideRemoveElements.js'\nimport { LogLevel } from './options.interfaces'\nimport toggleTextTransparency from '../clientSideScripts/toggleTextTransparency.js'\nimport waitForFonts from '../clientSideScripts/waitForFonts.js'\n\n/**\n * Methods that need to be executed before a screenshot will be taken\n */\nexport default async function beforeScreenshot(\n    executor: Executor,\n    options: BeforeScreenshotOptions,\n    addShadowPadding = false,\n): Promise<BeforeScreenshotResult> {\n    const { browserName, nativeWebScreenshot, platformName } = options.instanceData\n    const {\n        addressBarShadowPadding,\n        disableCSSAnimation,\n        enableLayoutTesting,\n        hideElements,\n        logLevel,\n        noScrollBars,\n        removeElements,\n        toolBarShadowPadding,\n        waitForFontsLoaded,\n    } = options\n    const addressBarPadding = getAddressBarShadowPadding({\n        platformName,\n        browserName,\n        nativeWebScreenshot,\n        addressBarShadowPadding,\n        addShadowPadding,\n    })\n    const toolBarPadding = getToolBarShadowPadding({ platformName, browserName, toolBarShadowPadding, addShadowPadding })\n\n    // Wait for the fonts to be loaded\n    if (waitForFontsLoaded){\n        try {\n            await executor(waitForFonts)\n        } catch (e) {\n            if (logLevel === LogLevel.debug || logLevel === LogLevel.warn) {\n                console.log('Waiting for fonts to load threw an error:', e)\n            }\n        }\n    }\n\n    // Hide the scrollbars\n    if (noScrollBars) {\n        await executor(hideScrollBars, noScrollBars)\n    }\n\n    // Hide and or Remove elements\n    if (hideElements.length > 0 || removeElements.length > 0) {\n        try {\n            await executor(hideRemoveElements, { hide: hideElements, remove: removeElements }, true)\n        } catch (e) {\n            if (logLevel === LogLevel.debug || logLevel === LogLevel.warn) {\n                console.log(\n                    '\\x1b[33m%s\\x1b[0m',\n                    `\n#####################################################################################\n WARNING:\n (One of) the elements that needed to be hidden or removed could not be found on the\n page and caused this error\n Error: ${e}\n We made sure the test didn't break.\n#####################################################################################\n`,\n                )\n            }\n        }\n    }\n\n    // Set some custom css\n    if (disableCSSAnimation || checkIsMobile(platformName)) {\n        await executor(setCustomCss, { addressBarPadding, disableCSSAnimation, id: CUSTOM_CSS_ID, toolBarPadding })\n        // Wait at least 500 milliseconds to make sure the css is applied\n        // Not every device is fast enough to apply the css faster\n        await waitFor(500)\n    }\n\n    // Make all text transparent\n    if (enableLayoutTesting){\n        await executor(toggleTextTransparency, enableLayoutTesting)\n        // Wait at least 500 milliseconds to make sure the css is applied\n        // Not every device is fast enough to apply the css faster\n        await waitFor(500)\n    }\n\n    // Get all the needed instance data\n    const instanceOptions = {\n        addressBarShadowPadding: options.addressBarShadowPadding,\n        toolBarShadowPadding: options.toolBarShadowPadding,\n        ...options.instanceData,\n    }\n\n    return getEnrichedInstanceData(executor, instanceOptions, addShadowPadding)\n}\n"]}