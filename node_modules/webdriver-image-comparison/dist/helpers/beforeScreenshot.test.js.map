{"version":3,"file":"beforeScreenshot.test.js","sourceRoot":"","sources":["../../src/helpers/beforeScreenshot.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, it, expect, vi } from 'vitest'\nimport beforeScreenshot from './beforeScreenshot.js'\nimport { LogLevel } from './options.interfaces'\n\ndescribe('beforeScreenshot', () => {\n    it('should be able to return the enriched instance data with default options', async () => {\n        const MOCKED_EXECUTOR = vi.fn().mockReturnValue('')\n\n        const options = {\n            instanceData: {\n                appName: 'appName',\n                browserName: 'browserName',\n                browserVersion: 'browserVersion',\n                deviceName: 'deviceName',\n                devicePixelRatio: 1,\n                deviceScreenSize: {\n                    height:1,\n                    width: 1,\n                },\n                devicePlatformRect: {\n                    statusBar: { x: 0, y:0, width: 0, height: 0 },\n                    homeBar: { x: 0, y:0, width: 0, height: 0 },\n                },\n                isAndroid: false,\n                isIOS: false,\n                isMobile: false,\n                logName: 'logName',\n                name: 'name',\n                nativeWebScreenshot: false,\n                platformName: 'platformName',\n                platformVersion: 'platformVersion',\n            },\n            addressBarShadowPadding: 6,\n            disableCSSAnimation: true,\n            enableLayoutTesting: false,\n            logLevel: LogLevel.debug,\n            noScrollBars: true,\n            toolBarShadowPadding: 6,\n            hideElements: [<HTMLElement>(<any>'<div></div>')],\n            removeElements: [<HTMLElement>(<any>'<div></div>')],\n            waitForFontsLoaded: true,\n        }\n\n        expect(await beforeScreenshot(MOCKED_EXECUTOR, options)).toMatchSnapshot()\n    })\n\n    it('should be able to return the enriched instance data with `addShadowPadding: true`', async () => {\n        const MOCKED_EXECUTOR = vi.fn().mockReturnValue('')\n\n        const options = {\n            instanceData: {\n                appName: 'appName',\n                browserName: 'browserName',\n                browserVersion: 'browserVersion',\n                deviceName: 'deviceName',\n                devicePixelRatio: 1,\n                deviceScreenSize: {\n                    height:1,\n                    width: 1,\n                },\n                devicePlatformRect: {\n                    statusBar: { x: 0, y:0, width: 0, height: 0 },\n                    homeBar: { x: 0, y:0, width: 0, height: 0 },\n                },\n                logName: 'logName',\n                isAndroid: false,\n                isIOS: false,\n                isMobile: false,\n                name: 'name',\n                nativeWebScreenshot: false,\n                platformName: 'platformName',\n                platformVersion: 'platformVersion',\n            },\n            addressBarShadowPadding: 6,\n            disableCSSAnimation: true,\n            enableLayoutTesting: false,\n            noScrollBars: true,\n            logLevel: LogLevel.debug,\n            toolBarShadowPadding: 6,\n            hideElements: [<HTMLElement>(<any>'<div></div>')],\n            removeElements: [<HTMLElement>(<any>'<div></div>')],\n            waitForFontsLoaded: true,\n        }\n\n        expect(await beforeScreenshot(MOCKED_EXECUTOR, options, true)).toMatchSnapshot()\n    })\n})\n"]}