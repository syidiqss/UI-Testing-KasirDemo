{"version":3,"file":"options.interfaces.js","sourceRoot":"","sources":["../../src/helpers/options.interfaces.ts"],"names":[],"mappings":";;;AAuHA,IAAY,QAKX;AALD,WAAY,QAAQ;IAChB,2BAAe,CAAA;IACf,yBAAa,CAAA;IACb,yBAAa,CAAA;IACb,6BAAiB,CAAA;AACrB,CAAC,EALW,QAAQ,wBAAR,QAAQ,QAKnB","sourcesContent":["import type { TabbableOptions } from '../commands/tabbable.interfaces'\n\nexport interface ClassOptions {\n    /**\n     * Class options\n     */\n    // The padding that needs to be added to the address bar on iOS and Android to do a proper cutout of the the viewport.\n    addressBarShadowPadding?: number;\n    // Automatically scroll to an element before taking a screenshot.\n    autoElementScroll?: boolean;\n    // Add iOS bezel corners and notch/dynamic island to the screenshot\n    addIOSBezelCorners?: boolean;\n    // Delete runtime folder (actual & diff) on initialization\n    clearRuntimeFolder?: boolean;\n    // The naming of the saved images can be customized by passing the parameter `formatImageName` with a format string\n    formatImageName?: string;\n    // Is it an hybrid app or not\n    isHybridApp?: boolean;\n    // Level to show logs\n    logLevel?: LogLevel;\n    // Save the images per instance in a separate folder.\n    savePerInstance?: boolean;\n    // The padding that needs to be added to the toolbar bar on iOS and Android to do a proper cutout of the the viewport.\n    toolBarShadowPadding?: number;\n    // Wait for the fonts to be loaded before taking a screenshot\n    waitForFontsLoaded?: boolean;\n\n    /**\n     * Baseline options\n     */\n    // If no baseline image is found during the comparison the image is automatically copied to the baseline folder when this is set to `true`\n    autoSaveBaseline?: boolean;\n    // The directory that will hold all the actual / difference screenshots\n    screenshotPath?: string | ((options: ClassOptions) => string);\n    // The directory that will hold all the baseline images that are used to during the comparison\n    baselineFolder?: string | ((options: ClassOptions) => string);\n\n    /**\n     * Class and method options\n     */\n    // En/Disable all css animations and the input caret in the application.\n    disableCSSAnimation?: boolean;\n    // Make all text on a page transparent to only focus on the layout.\n    enableLayoutTesting?: boolean;\n    // The timeout in milliseconds to wait after a scroll. This might help identifying pages with lazy loading.\n    fullPageScrollTimeout?: number;\n    // Hide scrollbars\n    hideScrollBars?: boolean;\n\n    /**\n     * Compare options\n     */\n    // Automatically block out the side bar for iPads in landscape mode during comparisons. This prevents failures on the tab/private/bookmark native component.\n    blockOutSideBar?: boolean;\n    // Automatically block out the status and address bar during comparisons. This prevents failures on time, wifi or battery status.\n    // This is mobile only.\n    blockOutStatusBar?: boolean;\n    // Automatically block out the tool bar. This is mobile only.\n    blockOutToolBar?: boolean;\n    // Compare images and discard alpha.\n    ignoreAlpha?: boolean;\n    // Compare images and discard anti aliasing.\n    ignoreAntialiasing?: boolean;\n    // Even though the images are in colour, the comparison wil compare 2 black/white images\n    ignoreColors?: boolean;\n    // Compare images and compare with `red = 16, green = 16, blue = 16, alpha = 16, minBrightness=16, maxBrightness=240`\n    ignoreLess?: boolean;\n    // Compare images and compare with `red = 0, green = 0, blue = 0, alpha = 0, minBrightness=0, maxBrightness=255`\n    ignoreNothing?: boolean;\n    // If true the return percentage will be like `0.12345678`, default is `0.12`\n    rawMisMatchPercentage?: boolean;\n    // This will return all compare data, not only the mismatch percentage\n    returnAllCompareData?: boolean;\n    // Allowable value of misMatchPercentage that prevents saving image with differences\n    saveAboveTolerance?: number;\n    //Scale images to same size before comparison\n    scaleImagesToSameSize?: boolean;\n\n    /**\n     * Tabbable options\n     */\n    tabbableOptions?: TabbableOptions;\n}\n\nexport interface DefaultOptions {\n    addressBarShadowPadding: number;\n    autoElementScroll: boolean;\n    addIOSBezelCorners: boolean;\n    autoSaveBaseline: boolean;\n    clearFolder: boolean;\n    compareOptions: CompareOptions;\n    disableCSSAnimation: boolean;\n    enableLayoutTesting: boolean;\n    formatImageName: string;\n    fullPageScrollTimeout: number;\n    hideScrollBars: boolean;\n    isHybridApp: boolean;\n    logLevel: LogLevel;\n    savePerInstance: boolean;\n    tabbableOptions: TabbableOptions;\n    toolBarShadowPadding: number;\n    waitForFontsLoaded: boolean;\n}\n\ninterface CompareOptions {\n    blockOutSideBar: boolean;\n    blockOutStatusBar: boolean;\n    blockOutToolBar: boolean;\n    ignoreAlpha: boolean;\n    ignoreAntialiasing: boolean;\n    ignoreColors: boolean;\n    ignoreLess: boolean;\n    ignoreNothing: boolean;\n    rawMisMatchPercentage: boolean;\n    returnAllCompareData: boolean;\n    saveAboveTolerance: number;\n    scaleImagesToSameSize: boolean;\n}\n\nexport enum LogLevel {\n    debug = 'debug',\n    info = 'info',\n    warn = 'warn',\n    silent = 'silent',\n}\n"]}