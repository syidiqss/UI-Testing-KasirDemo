{"version":3,"file":"options.test.js","sourceRoot":"","sources":["../../src/helpers/options.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, it, expect } from 'vitest'\nimport { defaultOptions, methodCompareOptions, screenMethodCompareOptions } from './options.js'\nimport type { ClassOptions } from './options.interfaces'\nimport type { ScreenMethodImageCompareCompareOptions } from '../methods/images.interfaces'\n\ndescribe('options', () => {\n    describe('defaultOptions', () => {\n        it('should return the default options when no options are provided', () => {\n            expect(defaultOptions({})).toMatchSnapshot()\n        })\n\n        it('should return the provided options when options are provided', () => {\n            const options: ClassOptions = {\n                addressBarShadowPadding: 1,\n                autoSaveBaseline: true,\n                formatImageName: '{foo}-{bar}',\n                savePerInstance: true,\n                toolBarShadowPadding: 1,\n                disableCSSAnimation: true,\n                fullPageScrollTimeout: 12345,\n                hideScrollBars: true,\n                blockOutSideBar: true,\n                blockOutStatusBar: true,\n                blockOutToolBar: true,\n                ignoreAlpha: true,\n                ignoreAntialiasing: true,\n                ignoreColors: true,\n                ignoreLess: true,\n                ignoreNothing: true,\n                rawMisMatchPercentage: true,\n                returnAllCompareData: true,\n                saveAboveTolerance: 12,\n                scaleImagesToSameSize: true,\n                tabbableOptions: {\n                    circle: {\n                        backgroundColor: 'backgroundColor',\n                        borderColor: 'borderColor',\n                        borderWidth: 123,\n                        fontColor: 'fontColor',\n                        fontFamily: 'fontFamily',\n                        fontSize: 321,\n                        size: 567,\n                        showNumber: false,\n                    },\n                    line: {\n                        color: 'color',\n                        width: 987,\n                    },\n                },\n            }\n\n            expect(defaultOptions(options)).toMatchSnapshot()\n        })\n    })\n\n    describe('methodCompareOptions', () => {\n        it('should not return the method options when no options are provided', () => {\n            expect(methodCompareOptions({})).toMatchSnapshot()\n        })\n\n        it('should return the provided options when options are provided', () => {\n            const options = {\n                blockOut: [{ height: 1, width: 2, x: 3, y: 4 }],\n                ignoreAlpha: true,\n                ignoreAntialiasing: true,\n                ignoreColors: true,\n                ignoreLess: true,\n                ignoreNothing: true,\n                rawMisMatchPercentage: true,\n                returnAllCompareData: true,\n                saveAboveTolerance: 12,\n                scaleImagesToSameSize: true,\n            }\n\n            expect(methodCompareOptions(options)).toMatchSnapshot()\n        })\n    })\n\n    describe('screenMethodCompareOptions', () => {\n        it('should not return the screen method options when no options are provided', () => {\n            expect(screenMethodCompareOptions({})).toMatchSnapshot()\n        })\n\n        it('should return the provided options when options are provided', () => {\n            const options: ScreenMethodImageCompareCompareOptions = {\n                blockOutSideBar: false,\n                blockOutStatusBar: false,\n                blockOutToolBar: false,\n                blockOut: [{ height: 1, width: 2, x: 3, y: 4 }],\n                ignoreAlpha: true,\n                ignoreAntialiasing: true,\n                ignoreColors: true,\n                ignoreLess: true,\n                ignoreNothing: true,\n                rawMisMatchPercentage: true,\n                returnAllCompareData: true,\n                saveAboveTolerance: 12,\n                scaleImagesToSameSize: true,\n            }\n\n            expect(screenMethodCompareOptions(options)).toMatchSnapshot()\n        })\n    })\n})\n"]}