"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isObject = exports.getIosBezelImageNames = exports.getDevicePixelRatio = exports.getScreenshotSize = exports.waitFor = exports.calculateDprData = exports.getToolBarShadowPadding = exports.getAddressBarShadowPadding = exports.checkAndroidChromeDriverScreenshot = exports.checkAndroidNativeWebScreenshot = exports.checkTestInMobileBrowser = exports.checkTestInBrowser = exports.checkIsIos = exports.checkIsAndroid = exports.checkIsMobile = exports.formatFileName = exports.getAndCreatePath = void 0;
var node_path_1 = require("node:path");
var constants_js_1 = require("./constants.js");
var fs_extra_1 = require("fs-extra");
function getAndCreatePath(folder, options) {
    var _a = options.browserName, browserName = _a === void 0 ? constants_js_1.NOT_KNOWN : _a, _b = options.deviceName, deviceName = _b === void 0 ? constants_js_1.NOT_KNOWN : _b, isMobile = options.isMobile, savePerInstance = options.savePerInstance;
    var instanceName = (isMobile ? deviceName : "".concat(constants_js_1.DESKTOP, "_").concat(browserName)).replace(/ /g, '_');
    var subFolder = savePerInstance ? instanceName : '';
    var folderName = (0, node_path_1.join)(folder, subFolder);
    (0, fs_extra_1.ensureDirSync)(folderName);
    return folderName;
}
exports.getAndCreatePath = getAndCreatePath;
function formatFileName(options) {
    var _a = options.browserName, browserName = _a === void 0 ? constants_js_1.NOT_KNOWN : _a, _b = options.browserVersion, browserVersion = _b === void 0 ? constants_js_1.NOT_KNOWN : _b, _c = options.deviceName, deviceName = _c === void 0 ? constants_js_1.NOT_KNOWN : _c, devicePixelRatio = options.devicePixelRatio, isMobile = options.isMobile, screenHeight = options.screenHeight, screenWidth = options.screenWidth, _d = options.outerHeight, outerHeight = _d === void 0 ? screenHeight : _d, _e = options.outerWidth, outerWidth = _e === void 0 ? screenWidth : _e, isTestInBrowser = options.isTestInBrowser, name = options.name, platformName = options.platformName, platformVersion = options.platformVersion, tag = options.tag;
    var defaults = {
        browserName: browserName,
        browserVersion: browserVersion,
        deviceName: deviceName,
        dpr: devicePixelRatio,
        height: isMobile ? screenHeight : outerHeight,
        logName: options.logName,
        mobile: isMobile && isTestInBrowser ? browserName : isMobile ? 'app' : constants_js_1.NOT_KNOWN,
        name: name,
        platformName: platformName,
        platformVersion: platformVersion,
        tag: tag,
        width: isMobile ? screenWidth : outerWidth,
    };
    var fileName = options.formatImageName;
    Object.keys(defaults).forEach(function (value) {
        fileName = fileName.replace("{".concat(value, "}"), defaults[value]);
    });
    return "".concat(fileName.replace(/ /g, '_'), ".png");
}
exports.formatFileName = formatFileName;
function checkIsMobile(platformName) {
    return checkIsAndroid(platformName) || checkIsIos(platformName);
}
exports.checkIsMobile = checkIsMobile;
function checkIsAndroid(platformName) {
    return platformName.toLowerCase() === constants_js_1.PLATFORMS.ANDROID;
}
exports.checkIsAndroid = checkIsAndroid;
function checkIsIos(platformName) {
    return platformName.toLowerCase() === constants_js_1.PLATFORMS.IOS;
}
exports.checkIsIos = checkIsIos;
function checkTestInBrowser(browserName) {
    return browserName !== '';
}
exports.checkTestInBrowser = checkTestInBrowser;
function checkTestInMobileBrowser(platformName, browserName) {
    return checkIsMobile(platformName) && checkTestInBrowser(browserName);
}
exports.checkTestInMobileBrowser = checkTestInMobileBrowser;
function checkAndroidNativeWebScreenshot(platformName, nativeWebscreenshot) {
    return (checkIsAndroid(platformName) && nativeWebscreenshot) || false;
}
exports.checkAndroidNativeWebScreenshot = checkAndroidNativeWebScreenshot;
function checkAndroidChromeDriverScreenshot(platformName, nativeWebScreenshot) {
    return checkIsAndroid(platformName) && !checkAndroidNativeWebScreenshot(platformName, nativeWebScreenshot);
}
exports.checkAndroidChromeDriverScreenshot = checkAndroidChromeDriverScreenshot;
function getAddressBarShadowPadding(options) {
    var platformName = options.platformName, browserName = options.browserName, nativeWebScreenshot = options.nativeWebScreenshot, addressBarShadowPadding = options.addressBarShadowPadding, addShadowPadding = options.addShadowPadding;
    var isTestInMobileBrowser = checkTestInMobileBrowser(platformName, browserName);
    var isAndroidNativeWebScreenshot = checkAndroidNativeWebScreenshot(platformName, nativeWebScreenshot);
    var isAndroid = checkIsAndroid(platformName);
    var isIOS = checkIsIos(platformName);
    return isTestInMobileBrowser && ((isAndroidNativeWebScreenshot && isAndroid) || isIOS) && addShadowPadding
        ? addressBarShadowPadding
        : 0;
}
exports.getAddressBarShadowPadding = getAddressBarShadowPadding;
function getToolBarShadowPadding(options) {
    var platformName = options.platformName, browserName = options.browserName, toolBarShadowPadding = options.toolBarShadowPadding, addShadowPadding = options.addShadowPadding;
    return checkTestInMobileBrowser(platformName, browserName) && checkIsIos(platformName) && addShadowPadding
        ? checkIsIos(platformName)
            ?
                toolBarShadowPadding + 9
            : toolBarShadowPadding
        : 0;
}
exports.getToolBarShadowPadding = getToolBarShadowPadding;
function calculateDprData(data, devicePixelRatio) {
    Object.keys(data).map(function (key) { return (data[key] = typeof data[key] === 'number' ? Math.round(data[key] * devicePixelRatio) : data[key]); });
    return data;
}
exports.calculateDprData = calculateDprData;
function waitFor(milliseconds) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2, new Promise(function (resolve) { return setTimeout(function () { return resolve(); }, milliseconds); })];
        });
    });
}
exports.waitFor = waitFor;
function getScreenshotSize(screenshot, devicePixelRation) {
    if (devicePixelRation === void 0) { devicePixelRation = 1; }
    return {
        height: Math.round(Buffer.from(screenshot, 'base64').readUInt32BE(20) / devicePixelRation),
        width: Math.round(Buffer.from(screenshot, 'base64').readUInt32BE(16) / devicePixelRation),
    };
}
exports.getScreenshotSize = getScreenshotSize;
function getDevicePixelRatio(screenshot, deviceScreenSize) {
    var screenshotSize = getScreenshotSize(screenshot);
    var devicePixelRatio = screenshotSize.width / deviceScreenSize.width;
    return Math.round(devicePixelRatio);
}
exports.getDevicePixelRatio = getDevicePixelRatio;
function getIosBezelImageNames(normalizedDeviceName) {
    var topImageName, bottomImageName;
    switch (normalizedDeviceName) {
        case 'iphonex':
            topImageName = 'iphonex.iphonexs.iphone11pro-top';
            bottomImageName = 'iphonex.iphonexs.iphone11pro-bottom';
            break;
        case 'iphonexs':
            topImageName = 'iphonex.iphonexs.iphone11pro-top';
            bottomImageName = 'iphonex.iphonexs.iphone11pro-bottom';
            break;
        case 'iphonexsmax':
            topImageName = 'iphonexsmax-top';
            bottomImageName = 'iphonexsmax-bottom';
            break;
        case 'iphonexr':
            topImageName = 'iphonexr.iphone11-top';
            bottomImageName = 'iphonexr.iphone11-bottom';
            break;
        case 'iphone11':
            topImageName = 'iphonexr.iphone11-top';
            bottomImageName = 'iphonexr.iphone11-bottom';
            break;
        case 'iphone11pro':
            topImageName = 'iphonex.iphonexs.iphone11pro-top';
            bottomImageName = 'iphonex.iphonexs.iphone11pro-bottom';
            break;
        case 'iphone11promax':
            topImageName = 'iphone11promax-top';
            bottomImageName = 'iphone11promax-bottom';
            break;
        case 'iphone12':
            topImageName = 'iphone12.iphone12pro-top';
            bottomImageName = 'iphone12.iphone12pro.iphone13.iphone13pro.iphone14-bottom';
            break;
        case 'iphone12mini':
            topImageName = 'iphone12mini-top';
            bottomImageName = 'iphone12mini.iphone13mini-bottom';
            break;
        case 'iphone12pro':
            topImageName = 'iphone12.iphone12pro-top';
            bottomImageName = 'iphone12.iphone12pro.iphone13.iphone13pro.iphone14-bottom';
            break;
        case 'iphone12promax':
            topImageName = 'iphone12promax-top';
            bottomImageName = 'iphone12promax.iphone13promax.iphone14plus-bottom';
            break;
        case 'iphone13':
            topImageName = 'iphone13.iphone13pro.iphone14-top';
            bottomImageName = 'iphone12.iphone12pro.iphone13.iphone13pro.iphone14-bottom';
            break;
        case 'iphone13mini':
            topImageName = 'iphone13mini-top';
            bottomImageName = 'iphone12mini.iphone13mini-bottom';
            break;
        case 'iphone13pro':
            topImageName = 'iphone13.iphone13pro.iphone14-top';
            bottomImageName = 'iphone12.iphone12pro.iphone13.iphone13pro.iphone14-bottom';
            break;
        case 'iphone13promax':
            topImageName = 'iphone13promax.iphone14plus-top';
            bottomImageName = 'iphone12promax.iphone13promax.iphone14plus-bottom';
            break;
        case 'iphone14':
            topImageName = 'iphone13.iphone13pro.iphone14-top';
            bottomImageName = 'iphone12.iphone12pro.iphone13.iphone13pro.iphone14-bottom';
            break;
        case 'iphone14plus':
            topImageName = 'iphone13promax.iphone14plus-top';
            bottomImageName = 'iphone12promax.iphone13promax.iphone14plus-bottom';
            break;
        case 'iphone14pro':
            topImageName = 'iphone14pro-top';
            bottomImageName = 'iphone14pro-bottom';
            break;
        case 'iphone14promax':
            topImageName = 'iphone14promax-top';
            bottomImageName = 'iphone14promax-bottom';
            break;
        case 'iphone15':
            topImageName = 'iphone15-top';
            bottomImageName = 'iphone15-bottom';
            break;
        case 'ipadmini':
            topImageName = 'ipadmini6th-top';
            bottomImageName = 'ipadmini6th-bottom';
            break;
        case 'ipadair':
            topImageName = 'ipadair4th.ipadair5th-top';
            bottomImageName = 'ipadair4th.ipadair5th-bottom';
            break;
        case 'ipadpro11':
            topImageName = 'ipadpro11-top';
            bottomImageName = 'ipadpro11-bottom';
            break;
        case 'ipadpro129':
            topImageName = 'ipadpro129-top';
            bottomImageName = 'ipadpro129-bottom';
            break;
    }
    if (!topImageName || !bottomImageName) {
        throw new Error("Could not find iOS bezel images for device ".concat(normalizedDeviceName));
    }
    return { topImageName: topImageName, bottomImageName: bottomImageName };
}
exports.getIosBezelImageNames = getIosBezelImageNames;
function isObject(item) {
    return (typeof item === 'object' && item !== null) || typeof item === 'function';
}
exports.isObject = isObject;
//# sourceMappingURL=utils.js.map