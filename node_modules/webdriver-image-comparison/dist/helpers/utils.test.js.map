{"version":3,"file":"utils.test.js","sourceRoot":"","sources":["../../src/helpers/utils.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, it, expect, afterEach } from 'vitest'\nimport { pathExistsSync, removeSync } from 'fs-extra'\nimport { join } from 'node:path'\nimport {\n    calculateDprData,\n    checkAndroidChromeDriverScreenshot,\n    checkAndroidNativeWebScreenshot,\n    checkIsAndroid,\n    checkIsIos,\n    checkIsMobile,\n    checkTestInBrowser,\n    checkTestInMobileBrowser,\n    formatFileName,\n    getAddressBarShadowPadding,\n    getAndCreatePath,\n    getScreenshotSize,\n    getToolBarShadowPadding,\n} from './utils.js'\nimport type { FormatFileNameOptions, GetAndCreatePathOptions } from './utils.interfaces'\nimport { IMAGE_STRING } from '../mocks/mocks.js'\n\ndescribe('utils', () => {\n    describe('getAndCreatePath', () => {\n        const folder = join(process.cwd(), '/.tmp/utils')\n\n        afterEach(() => removeSync(folder))\n\n        it('should create the folder and return the folder name for a device that needs to have its own folder', () => {\n            const options: GetAndCreatePathOptions = {\n                browserName: '',\n                deviceName: 'deviceName',\n                isMobile: true,\n                savePerInstance: true,\n            }\n            const expectedFolderName = join(folder, options.deviceName)\n\n            expect(pathExistsSync(expectedFolderName)).toMatchSnapshot()\n            expect(getAndCreatePath(folder, options)).toEqual(expectedFolderName)\n            expect(pathExistsSync(expectedFolderName)).toMatchSnapshot()\n        })\n\n        it('should create the folder and return the folder name for a browser that needs to have its own folder', () => {\n            const options: GetAndCreatePathOptions = {\n                browserName: 'browser',\n                deviceName: '',\n                isMobile: false,\n                savePerInstance: true,\n            }\n            const expectedFolderName = join(folder, `desktop_${options.browserName}`)\n\n            expect(pathExistsSync(expectedFolderName)).toMatchSnapshot()\n            expect(getAndCreatePath(folder, options)).toEqual(expectedFolderName)\n            expect(pathExistsSync(expectedFolderName)).toMatchSnapshot()\n        })\n\n        it('should create the folder and return the folder name for a browser', () => {\n            const options: GetAndCreatePathOptions = {\n                browserName: 'browser',\n                deviceName: '',\n                isMobile: false,\n                savePerInstance: false,\n            }\n\n            expect(pathExistsSync(folder)).toMatchSnapshot()\n            expect(getAndCreatePath(folder, options)).toEqual(folder)\n            expect(pathExistsSync(folder)).toMatchSnapshot()\n        })\n    })\n\n    describe('formatFileName', () => {\n        const formatFileOptions: FormatFileNameOptions = {\n            browserName: '',\n            browserVersion: '',\n            deviceName: '',\n            devicePixelRatio: 2,\n            formatImageName: '',\n            isMobile: false,\n            isTestInBrowser: true,\n            logName: '',\n            name: '',\n            outerHeight: 768,\n            outerWidth: 1366,\n            platformName: '',\n            platformVersion: '',\n            screenHeight: 900,\n            screenWidth: 1400,\n            tag: 'theTag',\n        }\n\n        it('should format a string with all options provided', () => {\n            formatFileOptions.formatImageName =\n                'browser.{browserName}-{browserVersion}-platform.{platformName}-{platformVersion}-dpr.{dpr}-{height}-{logName}-{name}-{tag}-{width}'\n            formatFileOptions.browserName = 'chrome'\n            formatFileOptions.browserVersion = '74'\n            formatFileOptions.logName = 'chrome-latest'\n            formatFileOptions.name = 'chrome-name'\n            formatFileOptions.platformName = 'osx'\n            formatFileOptions.platformVersion = '12'\n\n            expect(formatFileName(formatFileOptions)).toMatchSnapshot()\n        })\n\n        it('should format a string for mobile app', () => {\n            formatFileOptions.formatImageName = '{tag}-{mobile}-{dpr}-{width}x{height}'\n            formatFileOptions.deviceName = 'iPhoneX'\n            formatFileOptions.isMobile = true\n            formatFileOptions.isTestInBrowser = false\n\n            expect(formatFileName(formatFileOptions)).toMatchSnapshot()\n        })\n\n        it('should format a string for mobile browser', () => {\n            formatFileOptions.formatImageName = '{tag}-{mobile}-{dpr}-{width}x{height}'\n            formatFileOptions.browserName = 'chrome'\n            formatFileOptions.deviceName = 'iPhoneX'\n            formatFileOptions.isMobile = true\n            formatFileOptions.isTestInBrowser = true\n\n            expect(formatFileName(formatFileOptions)).toMatchSnapshot()\n        })\n    })\n\n    describe('checkIsMobile', () => {\n        it('should return false when no platform name is provided', () => {\n            expect(checkIsMobile('')).toMatchSnapshot()\n        })\n\n        it('should return true when a platform name is provided', () => {\n            expect(checkIsMobile('ios')).toMatchSnapshot()\n        })\n    })\n\n    describe('checkIsAndroid', () => {\n        it('should return false when no platform name is provided', () => {\n            expect(checkIsAndroid('')).toMatchSnapshot()\n        })\n\n        it('should return false when a platform name is provided that is not accepted', () => {\n            expect(checkIsAndroid('chrome')).toMatchSnapshot()\n        })\n\n        it('should return true when a valid platform name is provided', () => {\n            expect(checkIsAndroid('androId')).toMatchSnapshot()\n        })\n    })\n\n    describe('checkIsIos', () => {\n        it('should return false when no platform name is provided', () => {\n            expect(checkIsIos('')).toMatchSnapshot()\n        })\n\n        it('should return false when a platform name is provided that is not accepted', () => {\n            expect(checkIsIos('chrome')).toMatchSnapshot()\n        })\n\n        it('should return true when a valid platform name is provided', () => {\n            expect(checkIsIos('IoS')).toMatchSnapshot()\n        })\n    })\n\n    describe('checkTestInBrowser', () => {\n        it('should return false when no browser name is provided', () => {\n            expect(checkTestInBrowser('')).toMatchSnapshot()\n        })\n\n        it('should return true when a browser name is provided', () => {\n            expect(checkTestInBrowser('chrome')).toMatchSnapshot()\n        })\n    })\n\n    describe('checkTestInMobileBrowser', () => {\n        it('should return false when no platform name is provided', () => {\n            expect(checkTestInMobileBrowser('', 'chrome')).toMatchSnapshot()\n        })\n\n        it('should return false when a plaform but no browser name is provided', () => {\n            expect(checkTestInMobileBrowser('ios', '')).toMatchSnapshot()\n        })\n\n        it('should return true when a plaform and a browser name is provided', () => {\n            expect(checkTestInMobileBrowser('ios', 'chrome')).toMatchSnapshot()\n        })\n    })\n\n    describe('checkAndroidNativeWebScreenshot', () => {\n        it('should return false when no platform name is provided', () => {\n            expect(checkAndroidNativeWebScreenshot('', false)).toMatchSnapshot()\n        })\n\n        it('should return false when iOS and nativeWebscreenshot true is provided', () => {\n            expect(checkAndroidNativeWebScreenshot('ios', true)).toMatchSnapshot()\n        })\n\n        it('should return false when iOS and nativeWebscreenshot false is provided', () => {\n            expect(checkAndroidNativeWebScreenshot('ios', false)).toMatchSnapshot()\n        })\n\n        it('should return false when Android and nativeWebscreenshot false is provided', () => {\n            expect(checkAndroidNativeWebScreenshot('Android', false)).toMatchSnapshot()\n        })\n\n        it('should return true when Android and nativeWebscreenshot true is provided ', () => {\n            expect(checkAndroidNativeWebScreenshot('Android', true)).toMatchSnapshot()\n        })\n    })\n\n    describe('checkAndroidChromeDriverScreenshot', () => {\n        it('should return false when no platform name is provided', () => {\n            expect(checkAndroidChromeDriverScreenshot('', false)).toMatchSnapshot()\n        })\n\n        it('should return false when iOS and nativeWebscreenshot true is provided', () => {\n            expect(checkAndroidChromeDriverScreenshot('ios', true)).toMatchSnapshot()\n        })\n\n        it('should return false when iOS and nativeWebscreenshot false is provided', () => {\n            expect(checkAndroidChromeDriverScreenshot('ios', false)).toMatchSnapshot()\n        })\n\n        it('should return false when Android and nativeWebscreenshot true is provided', () => {\n            expect(checkAndroidChromeDriverScreenshot('Android', true)).toMatchSnapshot()\n        })\n\n        it('should return true when Android and nativeWebscreenshot false is provided ', () => {\n            expect(checkAndroidChromeDriverScreenshot('Android', false)).toMatchSnapshot()\n        })\n    })\n\n    describe('getAddressBarShadowPadding', () => {\n        const getAddressBarShadowPaddingOptions = {\n            platformName: '',\n            browserName: '',\n            nativeWebScreenshot: false,\n            addressBarShadowPadding: 6,\n            addShadowPadding: false,\n        }\n\n        it('should return 0 when this is a check for a desktop browser', () => {\n            getAddressBarShadowPaddingOptions.browserName = 'chrome'\n\n            expect(getAddressBarShadowPadding(getAddressBarShadowPaddingOptions)).toMatchSnapshot()\n        })\n\n        it('should return 0 when this is a check for an Android app', () => {\n            getAddressBarShadowPaddingOptions.platformName = 'android'\n\n            expect(getAddressBarShadowPadding(getAddressBarShadowPaddingOptions)).toMatchSnapshot()\n        })\n\n        it('should return 0 when this is a check for an iOS app', () => {\n            getAddressBarShadowPaddingOptions.platformName = 'ios'\n\n            expect(getAddressBarShadowPadding(getAddressBarShadowPaddingOptions)).toMatchSnapshot()\n        })\n\n        it('should return 0 when this is a check for Android with a native screenshot but without adding a shadow padding', () => {\n            getAddressBarShadowPaddingOptions.platformName = 'android'\n            getAddressBarShadowPaddingOptions.nativeWebScreenshot = true\n\n            expect(getAddressBarShadowPadding(getAddressBarShadowPaddingOptions)).toMatchSnapshot()\n        })\n\n        it('should return 0 when this is a check for iOS but without adding a shadow padding', () => {\n            getAddressBarShadowPaddingOptions.platformName = 'iOS'\n            getAddressBarShadowPaddingOptions.nativeWebScreenshot = true\n\n            expect(getAddressBarShadowPadding(getAddressBarShadowPaddingOptions)).toMatchSnapshot()\n        })\n\n        it('should return 6 when this is a check for Android with a native screenshot and adding a shadow padding', () => {\n            getAddressBarShadowPaddingOptions.platformName = 'android'\n            getAddressBarShadowPaddingOptions.nativeWebScreenshot = true\n            getAddressBarShadowPaddingOptions.addShadowPadding = true\n\n            expect(getAddressBarShadowPadding(getAddressBarShadowPaddingOptions)).toMatchSnapshot()\n        })\n\n        it('should return 6 when this is a check for iOS and adding a shadow padding', () => {\n            getAddressBarShadowPaddingOptions.platformName = 'iOS'\n            getAddressBarShadowPaddingOptions.addShadowPadding = true\n\n            expect(getAddressBarShadowPadding(getAddressBarShadowPaddingOptions)).toMatchSnapshot()\n        })\n    })\n\n    describe('getToolBarShadowPadding', () => {\n        it('should return 0 when this is a check for a desktop browser', () => {\n            const getToolBarShadowPaddingOptions = {\n                platformName: '',\n                browserName: 'chrome',\n                toolBarShadowPadding: 6,\n                addShadowPadding: false,\n            }\n\n            expect(getToolBarShadowPadding(getToolBarShadowPaddingOptions)).toMatchSnapshot()\n        })\n\n        it('should return 0 when this is a check for an Android app', () => {\n            const getToolBarShadowPaddingOptions = {\n                platformName: 'Android',\n                browserName: '',\n                toolBarShadowPadding: 6,\n                addShadowPadding: false,\n            }\n\n            expect(getToolBarShadowPadding(getToolBarShadowPaddingOptions)).toMatchSnapshot()\n        })\n\n        it('should return 0 when this is a check for an iOS app', () => {\n            const getToolBarShadowPaddingOptions = {\n                platformName: 'iOS',\n                browserName: '',\n                toolBarShadowPadding: 6,\n                addShadowPadding: false,\n            }\n\n            expect(getToolBarShadowPadding(getToolBarShadowPaddingOptions)).toMatchSnapshot()\n        })\n\n        it('should return 0 when this is a check for an Android app with adding a shadow padding', () => {\n            const getToolBarShadowPaddingOptions = {\n                platformName: 'android',\n                browserName: '',\n                toolBarShadowPadding: 6,\n                addShadowPadding: true,\n            }\n\n            expect(getToolBarShadowPadding(getToolBarShadowPaddingOptions)).toMatchSnapshot()\n        })\n\n        it('should return 0 when this is a check for an iOS app with adding a shadow padding', () => {\n            const getToolBarShadowPaddingOptions = {\n                platformName: 'iOS',\n                browserName: '',\n                toolBarShadowPadding: 6,\n                addShadowPadding: true,\n            }\n\n            expect(getToolBarShadowPadding(getToolBarShadowPaddingOptions)).toMatchSnapshot()\n        })\n\n        it('should return 0 when this is a check for Android browser and adding a shadow padding', () => {\n            const getToolBarShadowPaddingOptions = {\n                platformName: 'android',\n                browserName: 'chrome',\n                toolBarShadowPadding: 6,\n                addShadowPadding: true,\n            }\n\n            expect(getToolBarShadowPadding(getToolBarShadowPaddingOptions)).toMatchSnapshot()\n        })\n\n        it('should return 15 when this is a check for iOS browser and adding a shadow padding', () => {\n            const getToolBarShadowPaddingOptions = {\n                platformName: 'ios',\n                browserName: 'safari',\n                toolBarShadowPadding: 6,\n                addShadowPadding: true,\n            }\n\n            expect(getToolBarShadowPadding(getToolBarShadowPaddingOptions)).toMatchSnapshot()\n        })\n    })\n\n    describe('calculateDprData', () => {\n        it('should multiple all number values by the dpr value', () => {\n            const data = {\n                a: 1,\n                b: 2,\n                1: 3,\n                a1: 9,\n                bool: true,\n                string: 'string',\n            }\n\n            expect(calculateDprData(data, 2)).toMatchSnapshot()\n        })\n    })\n\n    // @TODO: Need to fix this, for now it broke with Jest 27 with this error\n    //   ● utils › waitFor › should wait for an amount of seconds and resolves the promise\n    //\n    //     expect(received).toHaveBeenCalledTimes(expected)\n    //\n    //     Matcher error: received value must be a mock or spy function\n    //\n    //     Received has type:  function\n    //     Received has value: [Function setTimeout]\n    //\n    //       384 |       waitFor(500);\n    //       385 |\n    //     > 386 |       expect(setTimeout).toHaveBeenCalledTimes(1);\n    //           |                          ^\n    //       387 |       expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 500);\n    //       388 |     });\n    //       389 |   });\n    //\n    //       at Object.<anonymous> (lib/helpers/utils.spec.ts:386:26)\n\n    // describe('waitFor', () => {\n    //   jest.useFakeTimers();\n    //\n    //   it('should wait for an amount of seconds and resolves the promise', () => {\n    //     waitFor(500);\n    //\n    //     expect(setTimeout).toHaveBeenCalledTimes(1);\n    //     expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 500);\n    //   });\n    // });\n\n    describe('getScreenshotSize', () => {\n        it('should get the screenshot size of a screenshot string with the default DPR', () => {\n            expect(getScreenshotSize(IMAGE_STRING)).toMatchSnapshot()\n        })\n\n        it('should get the screenshot size of a screenshot string with DRP 2', () => {\n            expect(getScreenshotSize(IMAGE_STRING, 2)).toMatchSnapshot()\n        })\n    })\n})\n"]}