"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getElementPositionIos = exports.getElementPositionDesktop = exports.getElementPositionAndroid = void 0;
var getElementPositionTopWindow_js_1 = __importDefault(require("../clientSideScripts/getElementPositionTopWindow.js"));
var getElementPositionTopDom_js_1 = __importDefault(require("../clientSideScripts/getElementPositionTopDom.js"));
var getElementPositionTopScreenNativeMobile_js_1 = require("../clientSideScripts/getElementPositionTopScreenNativeMobile.js");
var constants_js_1 = require("../helpers/constants.js");
var getAndroidStatusAddressToolBarOffsets_js_1 = __importDefault(require("../clientSideScripts/getAndroidStatusAddressToolBarOffsets.js"));
var getIosStatusAddressToolBarOffsets_js_1 = __importDefault(require("../clientSideScripts/getIosStatusAddressToolBarOffsets.js"));
function getElementPositionAndroid(executor, element, _a) {
    var isAndroidNativeWebScreenshot = _a.isAndroidNativeWebScreenshot, isLandscape = _a.isLandscape;
    return __awaiter(this, void 0, void 0, function () {
        var _b, safeArea, screenHeight, screenWidth, sideBarWidth, height;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!isAndroidNativeWebScreenshot) return [3, 2];
                    return [4, executor(getAndroidStatusAddressToolBarOffsets_js_1.default, constants_js_1.ANDROID_OFFSETS, { isHybridApp: false, isLandscape: isLandscape })];
                case 1:
                    _b = (_c.sent()), safeArea = _b.safeArea, screenHeight = _b.screenHeight, screenWidth = _b.screenWidth, sideBarWidth = _b.sideBar.width, height = _b.statusAddressBar.height;
                    return [2, executor(getElementPositionTopScreenNativeMobile_js_1.getElementPositionTopScreenNativeMobile, element, {
                            isLandscape: isLandscape,
                            safeArea: safeArea,
                            screenHeight: screenHeight,
                            screenWidth: screenWidth,
                            sideBarWidth: sideBarWidth,
                            statusBarAddressBarHeight: height,
                        })];
                case 2: return [2, executor(getElementPositionTopWindow_js_1.default, element)];
            }
        });
    });
}
exports.getElementPositionAndroid = getElementPositionAndroid;
function getElementPositionDesktop(executor, element, _a) {
    var innerHeight = _a.innerHeight, screenshotHeight = _a.screenshotHeight;
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_b) {
            if (screenshotHeight > innerHeight) {
                return [2, executor(getElementPositionTopDom_js_1.default, element)];
            }
            return [2, executor(getElementPositionTopWindow_js_1.default, element)];
        });
    });
}
exports.getElementPositionDesktop = getElementPositionDesktop;
function getElementPositionIos(executor, element, _a) {
    var isLandscape = _a.isLandscape;
    return __awaiter(this, void 0, void 0, function () {
        var _b, safeArea, screenHeight, screenWidth, sideBarWidth, height;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4, executor(getIosStatusAddressToolBarOffsets_js_1.default, constants_js_1.IOS_OFFSETS, isLandscape)];
                case 1:
                    _b = _c.sent(), safeArea = _b.safeArea, screenHeight = _b.screenHeight, screenWidth = _b.screenWidth, sideBarWidth = _b.sideBar.width, height = _b.statusAddressBar.height;
                    return [2, executor(getElementPositionTopScreenNativeMobile_js_1.getElementPositionTopScreenNativeMobile, element, {
                            isLandscape: isLandscape,
                            safeArea: safeArea,
                            screenHeight: screenHeight,
                            screenWidth: screenWidth,
                            sideBarWidth: sideBarWidth,
                            statusBarAddressBarHeight: height,
                        })];
            }
        });
    });
}
exports.getElementPositionIos = getElementPositionIos;
//# sourceMappingURL=elementPosition.js.map