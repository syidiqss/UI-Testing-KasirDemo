{"version":3,"file":"elementPosition.js","sourceRoot":"","sources":["../../src/methods/elementPosition.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uHAA6F;AAC7F,iHAAuF;AACvF,8HAAyH;AACzH,wDAAsE;AAGtE,2IAAiH;AACjH,mIAAyG;AAMzG,SAAsB,yBAAyB,CAC3C,QAAkB,EAClB,OAAoB,EACpB,EAA8G;QAA5G,4BAA4B,kCAAA,EAAE,WAAW,iBAAA;;;;;;yBAGvC,4BAA4B,EAA5B,cAA4B;oBAQxB,WAAM,QAAQ,CAAC,kDAAqC,EAAE,8BAAe,EAAE,EAAE,WAAW,EAAE,KAAK,EAAE,WAAW,aAAA,EAAE,CAAC,EAAA;;oBAPzG,KAM2B,CAC7B,SAA2G,CAC9G,EAPG,QAAQ,cAAA,EACR,YAAY,kBAAA,EACZ,WAAW,iBAAA,EACO,YAAY,mBAAA,EACV,MAAM,6BAAA;oBAK9B,WAAO,QAAQ,CAAC,oFAAuC,EAAE,OAAO,EAAE;4BAC9D,WAAW,aAAA;4BACX,QAAQ,UAAA;4BACR,YAAY,cAAA;4BACZ,WAAW,aAAA;4BACX,YAAY,cAAA;4BACZ,yBAAyB,EAAE,MAAM;yBACpC,CAAC,EAAA;wBAIN,WAAO,QAAQ,CAAC,wCAA2B,EAAE,OAAO,CAAC,EAAA;;;;CACxD;AA7BD,8DA6BC;AAiBD,SAAsB,yBAAyB,CAC3C,QAAkB,EAClB,OAAoB,EACpB,EAAoF;QAAlF,WAAW,iBAAA,EAAE,gBAAgB,sBAAA;;;YAE/B,IAAI,gBAAgB,GAAG,WAAW,EAAE,CAAC;gBACjC,WAAO,QAAQ,CAAC,qCAAwB,EAAE,OAAO,CAAC,EAAA;YACtD,CAAC;YAED,WAAO,QAAQ,CAAC,wCAA2B,EAAE,OAAO,CAAC,EAAA;;;CACxD;AAVD,8DAUC;AAKD,SAAsB,qBAAqB,CACvC,QAAkB,EAClB,OAAoB,EACpB,EAAyC;QAAvC,WAAW,iBAAA;;;;;wBASqB,WAAM,QAAQ,CAAC,8CAAiC,EAAE,0BAAW,EAAE,WAAW,CAAC,EAAA;;oBANvG,KAM4B,SAA2E,EALzG,QAAQ,cAAA,EACR,YAAY,kBAAA,EACZ,WAAW,iBAAA,EACO,YAAY,mBAAA,EACV,MAAM,6BAAA;oBAG9B,WAAO,QAAQ,CAAC,oFAAuC,EAAE,OAAO,EAAE;4BAC9D,WAAW,aAAA;4BACX,QAAQ,UAAA;4BACR,YAAY,cAAA;4BACZ,WAAW,aAAA;4BACX,YAAY,cAAA;4BACZ,yBAAyB,EAAE,MAAM;yBACpC,CAAC,EAAA;;;;CACL;AAtBD,sDAsBC","sourcesContent":["import getElementPositionTopWindow from '../clientSideScripts/getElementPositionTopWindow.js'\nimport getElementPositionTopDom from '../clientSideScripts/getElementPositionTopDom.js'\nimport { getElementPositionTopScreenNativeMobile } from '../clientSideScripts/getElementPositionTopScreenNativeMobile.js'\nimport { ANDROID_OFFSETS, IOS_OFFSETS } from '../helpers/constants.js'\nimport type { Executor } from './methods.interfaces'\nimport type { ElementPosition } from '../clientSideScripts/elementPosition.interfaces'\nimport getAndroidStatusAddressToolBarOffsets from '../clientSideScripts/getAndroidStatusAddressToolBarOffsets.js'\nimport getIosStatusAddressToolBarOffsets from '../clientSideScripts/getIosStatusAddressToolBarOffsets.js'\nimport type { StatusAddressToolBarOffsets } from '../clientSideScripts/statusAddressToolBarOffsets.interfaces'\n\n/**\n * Get the element position on a Android device\n */\nexport async function getElementPositionAndroid(\n    executor: Executor,\n    element: HTMLElement,\n    { isAndroidNativeWebScreenshot, isLandscape }: { isAndroidNativeWebScreenshot: boolean; isLandscape: boolean },\n): Promise<ElementPosition> {\n    // This is the native web screenshot\n    if (isAndroidNativeWebScreenshot) {\n        const {\n            safeArea,\n            screenHeight,\n            screenWidth,\n            sideBar: { width: sideBarWidth },\n            statusAddressBar: { height },\n        } = <StatusAddressToolBarOffsets>(\n            await executor(getAndroidStatusAddressToolBarOffsets, ANDROID_OFFSETS, { isHybridApp: false, isLandscape })\n        )\n\n        return executor(getElementPositionTopScreenNativeMobile, element, {\n            isLandscape,\n            safeArea,\n            screenHeight,\n            screenWidth,\n            sideBarWidth,\n            statusBarAddressBarHeight: height,\n        })\n    }\n\n    // This is the ChromeDriver screenshot\n    return executor(getElementPositionTopWindow, element)\n}\n\n/**\n * Get the element position on a desktop browser\n *\n * @param {function} executor         The function to execute JS in the browser\n * @param {number}   innerHeight      The inner height of the screen\n * @param {number}   screenshotHeight The screenshot height\n * @param {element}  element          The element\n *\n * @returns {Promise<{\n *    height: number,\n *    width: number,\n *    x: number,\n *    y: number\n * }>}\n */\nexport async function getElementPositionDesktop(\n    executor: Executor,\n    element: HTMLElement,\n    { innerHeight, screenshotHeight }: { innerHeight: number; screenshotHeight: number },\n): Promise<ElementPosition> {\n    if (screenshotHeight > innerHeight) {\n        return executor(getElementPositionTopDom, element)\n    }\n\n    return executor(getElementPositionTopWindow, element)\n}\n\n/**\n * Get the element position on iOS Safari\n */\nexport async function getElementPositionIos(\n    executor: Executor,\n    element: HTMLElement,\n    { isLandscape }: { isLandscape: boolean },\n): Promise<ElementPosition> {\n    // Determine status and address bar height\n    const {\n        safeArea,\n        screenHeight,\n        screenWidth,\n        sideBar: { width: sideBarWidth },\n        statusAddressBar: { height },\n    } = <StatusAddressToolBarOffsets> await executor(getIosStatusAddressToolBarOffsets, IOS_OFFSETS, isLandscape)\n\n    return executor(getElementPositionTopScreenNativeMobile, element, {\n        isLandscape,\n        safeArea,\n        screenHeight,\n        screenWidth,\n        sideBarWidth,\n        statusBarAddressBarHeight: height,\n    })\n}\n"]}