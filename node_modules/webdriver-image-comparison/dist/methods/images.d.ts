import type { CroppedBase64Image, IgnoreBoxes, ImageCompareOptions, ImageCompareResult, ResizeDimensions } from './images.interfaces';
import type { FullPageScreenshotsData } from './screenshots.interfaces';
import type { Executor, GetElementRect, TakeScreenShot } from './methods.interfaces';
import { LogLevel } from '../helpers/options.interfaces';
import type { WicElement } from '../commands/element.interfaces.js';
export declare function checkBaselineImageExists(actualFilePath: string, baselineFilePath: string, autoSaveBaseline: boolean, logLevel: LogLevel): Promise<void>;
export declare function makeCroppedBase64Image({ addIOSBezelCorners, base64Image, deviceName, devicePixelRatio, isIOS, isLandscape, logLevel, rectangles, resizeDimensions, }: CroppedBase64Image): Promise<string>;
export declare function executeImageCompare(executor: Executor, options: ImageCompareOptions, isViewPortScreenshot?: boolean, isNativeContext?: boolean): Promise<ImageCompareResult | number>;
export declare function makeFullPageBase64Image(screenshotsData: FullPageScreenshotsData, { devicePixelRatio, isLandscape }: {
    devicePixelRatio: number;
    isLandscape: boolean;
}): Promise<string>;
export declare function saveBase64Image(base64Image: string, filePath: string): Promise<void>;
export declare function addBlockOuts(screenshot: string, ignoredBoxes: IgnoreBoxes[]): Promise<string>;
export declare function takeBase64ElementScreenshot({ element, devicePixelRatio, isIOS, methods: { getElementRect, screenShot, }, resizeDimensions, }: {
    element: WicElement;
    devicePixelRatio: number;
    isIOS: boolean;
    methods: {
        getElementRect: GetElementRect;
        screenShot: TakeScreenShot;
    };
    resizeDimensions: ResizeDimensions;
}): Promise<string>;
//# sourceMappingURL=images.d.ts.map