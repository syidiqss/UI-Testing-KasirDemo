{"version":3,"file":"images.interfaces.js","sourceRoot":"","sources":["../../src/methods/images.interfaces.ts"],"names":[],"mappings":"","sourcesContent":["import type { CanvasRenderingContext2D } from 'canvas'\nimport type { RectanglesOutput } from './rectangles.interfaces'\nimport type { LogLevel } from '../helpers/options.interfaces'\nimport type { Folders } from '../base.interfaces'\n\nexport interface ResizeDimensions {\n    // The bottom margin\n    bottom?: number;\n    // The left margin\n    left?: number;\n    // The right margin\n    right?: number;\n    // The top margin\n    top?: number;\n}\n\nexport interface ImageCompareOptions {\n    // Optional ignore regions\n    ignoreRegions?: RectanglesOutput[];\n    // The device pixel ratio of the device\n    devicePixelRatio: number;\n    // The compare options\n    compareOptions: {\n        wic: WicImageCompareOptions;\n        method: ScreenMethodImageCompareCompareOptions;\n    };\n    // The name of the file\n    fileName: string;\n    // The folders object\n    folderOptions: ImageCompareFolderOptions;\n    // Is it an hybrid app or not\n    isHybridApp: boolean;\n    // Is this an Android device\n    isAndroid?: boolean;\n    // If it's in Landscape mode\n    isLandscape: boolean;\n    // Level to show logs\n    logLevel: LogLevel;\n    // The name of the platform\n    platformName: string;\n    // If this is a native web screenshot\n    isAndroidNativeWebScreenshot: boolean;\n}\n\nexport interface WicImageCompareOptions {\n    // Block out the side bar yes or no\n    blockOutSideBar: boolean;\n    // Block out the status bar yes or no\n    blockOutStatusBar: boolean;\n    // Block out the tool bar yes or no\n    blockOutToolBar: boolean;\n    // Compare images and discard alpha\n    ignoreAlpha: boolean;\n    // Compare images an discard anti aliasing\n    ignoreAntialiasing: boolean;\n    // Even though the images are in colour, the comparison wil compare 2 black/white images\n    ignoreColors: boolean;\n    // Compare images and compare with red = 16, green = 16, blue = 16,alpha = 16, minBrightness=16, maxBrightness=240\n    ignoreLess: boolean;\n    // Compare images and compare with red = 0, green = 0, blue = 0, alpha = 0, minBrightness=0, maxBrightness=255\n    ignoreNothing: boolean;\n    // Default false. If true, return percentage will be like 0.12345678, default is 0.12\n    rawMisMatchPercentage: boolean;\n    // Return all the compare data object\n    returnAllCompareData: boolean;\n    // Allowable value of misMatchPercentage that prevents saving image with differences\n    saveAboveTolerance: number;\n}\n\nexport interface DefaultImageCompareCompareOptions extends MethodImageCompareCompareOptions {\n    // Block out array with x, y, width and height values\n    blockOut?: RectanglesOutput[];\n}\n\nexport interface ScreenMethodImageCompareCompareOptions\n    extends DefaultImageCompareCompareOptions,\n    MethodImageCompareCompareOptions {\n    // Block out the side bar yes or no\n    blockOutSideBar?: boolean;\n    // Block out the status bar yes or no\n    blockOutStatusBar?: boolean;\n    // Block out the tool bar yes or no\n    blockOutToolBar?: boolean;\n}\n\nexport interface MethodImageCompareCompareOptions {\n    // Block out array with x, y, width and height values\n    blockOut?: RectanglesOutput[];\n    // Compare images and discard alpha\n    ignoreAlpha?: boolean;\n    // Compare images an discard anti aliasing\n    ignoreAntialiasing?: boolean;\n    // Even though the images are in colour, the comparison wil compare 2 black/white images\n    ignoreColors?: boolean;\n    // Compare images and compare with red = 16, green = 16, blue = 16,alpha = 16, minBrightness=16, maxBrightness=240\n    ignoreLess?: boolean;\n    // Compare images and compare with red = 0, green = 0, blue = 0, alpha = 0, minBrightness=0, maxBrightness=255\n    ignoreNothing?: boolean;\n    // Default false. If true, return percentage will be like 0.12345678, default is 0.12\n    rawMisMatchPercentage?: boolean;\n    // Return all the compare data object\n    returnAllCompareData?: boolean;\n    // Allowable value of misMatchPercentage that prevents saving image with differences\n    saveAboveTolerance?: number;\n    //Scale images to same size before comparison\n    scaleImagesToSameSize?: boolean;\n}\n\nexport interface ImageCompareFolderOptions extends Folders {\n    // Auto save image to baseline\n    autoSaveBaseline: boolean;\n    // The name of the browser\n    browserName: string;\n    // The name of the device\n    deviceName: string;\n    // Is the instance a mobile instance\n    isMobile: boolean;\n    // If the folder needs to have the instance name in it\n    savePerInstance: boolean;\n}\n\nexport interface ImageCompareResult {\n    // The file name\n    fileName: string;\n    folders: {\n        // The actual folder and file name\n        actual: string;\n        // The baseline folder and file name\n        baseline: string;\n        // This following folder is optional and only if there is a mismatch\n        // The folder that holds the diffs and the file name\n        diff?: string;\n    };\n    // The mismatch percentage\n    misMatchPercentage: number;\n}\n\nexport interface IgnoreBoxes {\n    bottom: number;\n    right: number;\n    left: number;\n    top: number;\n}\n\nexport interface CroppedBase64Image {\n    addIOSBezelCorners: boolean;\n    base64Image: string;\n    deviceName: string;\n    devicePixelRatio: number;\n    isIOS: boolean;\n    isLandscape: boolean;\n    logLevel: LogLevel;\n    rectangles: RectanglesOutput;\n    resizeDimensions?: ResizeDimensions;\n}\n\nexport interface RotateBase64ImageOptions {\n    base64Image: string;\n    degrees: number;\n    newHeight: number;\n    newWidth: number;\n}\n\nexport interface CropAndConvertToDataURL {\n    addIOSBezelCorners: boolean,\n    base64Image: string,\n    deviceName: string,\n    devicePixelRatio: number,\n    height: number,\n    isIOS: boolean,\n    isLandscape: boolean,\n    sourceX: number,\n    sourceY: number,\n    width: number,\n}\n\nexport interface AdjustedAxis {\n    length: number,\n    logLevel: LogLevel,\n    maxDimension: number,\n    paddingEnd: number,\n    paddingStart: number,\n    start: number,\n    warningType: 'WIDTH' | 'HEIGHT',\n}\n\nexport interface DimensionsWarning {\n    dimension: number,\n    logLevel: LogLevel\n    maxDimension: number,\n    position: number,\n    type: string,\n}\n\nexport interface RotatedImage { isLandscape: boolean, base64Image:string }\n\nexport interface HandleIOSBezelCorners {\n    addIOSBezelCorners: boolean,\n    ctx: CanvasRenderingContext2D,\n    deviceName: string,\n    devicePixelRatio: number,\n    height: number,\n    isLandscape: boolean,\n    width: number,\n}\n"]}