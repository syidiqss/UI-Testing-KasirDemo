{"version":3,"file":"images.js","sourceRoot":"","sources":["../../src/methods/images.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qCAAqE;AACrE,uCAAgC;AAChC,iCAAgD;AAEhD,kFAAwD;AACxD,gDAAkH;AAClH,wDAA6F;AAC7F,iDAAwF;AAiBxF,oEAAwD;AAMxD,SAAsB,wBAAwB,CAC1C,cAAsB,EACtB,gBAAwB,EACxB,gBAAyB,EACzB,QAAkB;;;YAElB,WAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;oBAC/B,IAAA,iBAAM,EAAC,gBAAgB,EAAE,UAAC,KAAK;wBAC3B,IAAI,KAAK,EAAE,CAAC;4BACR,IAAI,gBAAgB,EAAE,CAAC;gCACnB,IAAI,CAAC;oCACD,IAAA,mBAAQ,EAAC,cAAc,EAAE,gBAAgB,CAAC,CAAA;oCAC1C,IAAI,QAAQ,KAAK,6BAAQ,CAAC,IAAI,EAAE,CAAC;wCAC7B,OAAO,CAAC,GAAG,CACP,mBAAmB,EACnB,qIAI7B,gBAAgB,8FAElB,CAC4B,CAAA;oCACL,CAAC;gCACL,CAAC;gCAAC,OAAO,KAAK,EAAE,CAAC;oCAEb,MAAM,CACF,iKAGzB,KAAK,8FAEP,CACwB,CAAA;gCACL,CAAC;4BACL,CAAC;iCAAM,CAAC;gCACJ,MAAM,CACF,+MAIrB,cAAc,8FAEhB,CACoB,CAAA;4BACL,CAAC;wBACL,CAAC;wBACD,OAAO,EAAE,CAAA;oBACb,CAAC,CAAC,CAAA;gBACN,CAAC,CAAC,EAAA;;;CACL;AAlDD,4DAkDC;AAKD,SAAe,uBAAuB,CAAC,EAA0C;QAAxC,WAAW,iBAAA,EAAE,WAAW,iBAAA;;;;;;oBACvD,KAAuD,IAAA,4BAAiB,EAAC,WAAW,CAAC,EAA3E,gBAAgB,YAAA,EAAS,eAAe,WAAA,CAAmC;oBACrF,SAAS,GAAG,WAAW,IAAI,gBAAgB,GAAG,eAAe,CAAA;yBAE5D,SAAS,EAAT,cAAS;oBACV,WAAM,iBAAiB,CAAC,EAAE,WAAW,aAAA,EAAE,OAAO,EAAE,CAAC,EAAE,EAAE,SAAS,EAAE,eAAe,EAAE,QAAQ,EAAE,gBAAgB,EAAE,CAAC,EAAA;;oBAA9G,KAAA,SAA8G,CAAA;;;oBAC9G,KAAA,WAAW,CAAA;;wBAFjB,eAEiB;;;;CACpB;AAKD,SAAS,mBAAmB,CAAC,EAMT;QALhB,SAAS,eAAA,EACT,QAAQ,cAAA,EACR,YAAY,kBAAA,EACZ,QAAQ,cAAA,EACR,IAAI,UAAA;IAEJ,IAAI,QAAQ,KAAK,6BAAQ,CAAC,KAAK,IAAI,QAAQ,KAAK,6BAAQ,CAAC,IAAI,EAAE,CAAC;QAC5D,OAAO,CAAC,GAAG,CACP,mBAAmB,EACnB,yHAEY,IAAI,cAAI,SAAS,2EACvB,IAAI,4BAAkB,QAAQ,6CACjB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,YAAY,+FAE/E,CACQ,CAAA;IACL,CAAC;AACL,CAAC;AAKD,SAAS,eAAe,CAAC,EAQV;QAPX,MAAM,YAAA,EACN,QAAQ,cAAA,EACR,YAAY,kBAAA,EACZ,UAAU,gBAAA,EACV,YAAY,kBAAA,EACZ,KAAK,WAAA,EACL,WAAW,iBAAA;IAEX,IAAI,aAAa,GAAG,KAAK,GAAG,YAAY,CAAA;IACxC,IAAI,WAAW,GAAG,KAAK,GAAG,MAAM,GAAG,UAAU,CAAA;IAE7C,IAAI,aAAa,GAAG,CAAC,EAAE,CAAC;QACpB,mBAAmB,CAAC;YAChB,SAAS,EAAE,YAAY;YACvB,QAAQ,UAAA;YACR,YAAY,cAAA;YACZ,QAAQ,EAAE,aAAa;YACvB,IAAI,EAAE,WAAW,KAAK,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK;SACjD,CAAC,CAAA;QACF,aAAa,GAAG,CAAC,CAAA;IACrB,CAAC;IACD,IAAI,WAAW,GAAG,YAAY,EAAE,CAAC;QAC7B,mBAAmB,CAAC;YAChB,SAAS,EAAE,UAAU;YACrB,QAAQ,UAAA;YACR,YAAY,cAAA;YACZ,QAAQ,EAAE,WAAW;YACrB,IAAI,EAAE,WAAW,KAAK,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ;SACrD,CAAC,CAAA;QACF,WAAW,GAAG,YAAY,CAAA;IAC9B,CAAC;IAED,OAAO,CAAC,aAAa,EAAE,WAAW,CAAC,CAAA;AACvC,CAAC;AAKD,SAAe,qBAAqB,CAAC,EAQb;QAPpB,kBAAkB,wBAAA,EAClB,GAAG,SAAA,EACH,UAAU,gBAAA,EACV,gBAAgB,sBAAA,EAChB,MAAM,YAAA,EACN,WAAW,iBAAA,EACX,KAAK,WAAA;;;;;;oBAGC,oBAAoB,GAAG,UAAU;yBAClC,WAAW,EAAE;yBAEb,OAAO,CAAC,8DAA8D,EAAE,EAAE,CAAC,CAAA;oBAC1E,WAAW,GAEb,CAAC,oBAAoB,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,uCAAwB,CAAC,QAAQ,CAAC,oBAAoB,CAAC,CAAC;wBAEpG,CAAC,oBAAoB,CAAC,QAAQ,CAAC,MAAM,CAAC;4BACtC,uCAAwB,CAAC,QAAQ,CAAC,oBAAoB,CAAC;4BACvD,CAAC,KAAK,GAAG,gBAAgB,IAAI,IAAI,IAAI,MAAM,GAAG,gBAAgB,IAAI,IAAI,CAAC,CAAC,CAAA;oBACxE,eAAe,GAAG,KAAK,CAAA;yBAEvB,CAAA,kBAAkB,IAAI,WAAW,CAAA,EAAjC,eAAiC;oBAE3B,KAAoC,IAAA,gCAAqB,EAAC,oBAAoB,CAAC,EAA7E,YAAY,kBAAA,EAAE,eAAe,qBAAA,CAAgD;yBAEjF,CAAA,YAAY,IAAI,eAAe,CAAA,EAA/B,cAA+B;oBACzB,QAAQ,GAAG,IAAA,uBAAY,EAAC,IAAA,gBAAI,EAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAG,YAAY,SAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;oBAC/G,WAAW,GAAG,IAAA,uBAAY,EAAC,IAAA,gBAAI,EAAC,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAG,eAAe,SAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;yBAGpG,WAAW,EAAX,cAAW;oBAC5B,WAAM,iBAAiB,CAAC;4BACtB,WAAW,EAAE,QAAQ;4BACrB,OAAO,EAAE,CAAC,EAAE;4BACZ,SAAS,EAAE,IAAA,4BAAiB,EAAC,QAAQ,CAAC,CAAC,KAAK;4BAC5C,QAAQ,EAAE,IAAA,4BAAiB,EAAC,QAAQ,CAAC,CAAC,MAAM;yBAC/C,CAAC,EAAA;;oBALA,KAAA,SAKA,CAAA;;;oBACA,KAAA,QAAQ,CAAA;;;oBAPR,cAAc,KAON;yBACY,WAAW,EAAX,cAAW;oBAC/B,WAAM,iBAAiB,CAAC;4BACtB,WAAW,EAAE,WAAW;4BACxB,OAAO,EAAE,CAAC,EAAE;4BACZ,SAAS,EAAE,IAAA,4BAAiB,EAAC,QAAQ,CAAC,CAAC,KAAK;4BAC5C,QAAQ,EAAE,IAAA,4BAAiB,EAAC,QAAQ,CAAC,CAAC,MAAM;yBAC/C,CAAC,EAAA;;oBALA,KAAA,SAKA,CAAA;;;oBACA,KAAA,WAAW,CAAA;;;oBAPX,iBAAiB,KAON;oBAEjB,KAAA,CAAA,KAAA,GAAG,CAAA,CAAC,SAAS,CAAA;oBAAC,WAAM,IAAA,kBAAS,EAAC,gCAAyB,cAAc,CAAE,CAAC,EAAA;;oBAAxE,cAAc,SAA0D,EAAE,CAAC,EAAE,CAAC,EAAC,CAAA;oBAG/E,KAAA,CAAA,KAAA,GAAG,CAAA,CAAC,SAAS,CAAA;oBACT,WAAM,IAAA,kBAAS,EAAC,gCAAyB,iBAAiB,CAAE,CAAC,EAAA;;oBADjE,cACI,SAA6D,EAC7D,WAAW,CAAC,CAAC,CAAC,KAAK,GAAG,IAAA,4BAAiB,EAAC,WAAW,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;wBAC/D,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,IAAA,4BAAiB,EAAC,WAAW,CAAC,CAAC,MAAM,EACnE,CAAA;;;oBAED,eAAe,GAAG,IAAI,CAAA;;;oBAI9B,IAAI,kBAAkB,IAAI,CAAC,WAAW,EAAE,CAAC;wBACrC,eAAe,GAAG,IAAI,CAAA;oBAC1B,CAAC;oBAED,IAAI,eAAe,EAAE,CAAC;wBAClB,OAAO,CAAC,GAAG,CACP,mBAAmB,EACnB,iKAG0C,UAAU,gDAC/B,oBAAoB,iEAEnD,uCAAwB,CAAC,IAAI,CAAC,IAAI,CAAC,8FAEpC,CACQ,CAAA;oBACL,CAAC;;;;;CACJ;AAKD,SAAe,uBAAuB,CAAC,EAWb;QAVtB,kBAAkB,wBAAA,EAClB,WAAW,iBAAA,EACX,UAAU,gBAAA,EACV,gBAAgB,sBAAA,EAChB,MAAM,YAAA,EACN,KAAK,WAAA,EACL,WAAW,iBAAA,EACX,OAAO,aAAA,EACP,OAAO,aAAA,EACP,KAAK,WAAA;;;;;;oBAEC,MAAM,GAAG,IAAA,qBAAY,EAAC,KAAK,EAAE,MAAM,CAAC,CAAA;oBACpC,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAA;oBACrB,WAAM,IAAA,kBAAS,EAAC,gCAAyB,WAAW,CAAE,CAAC,EAAA;;oBAA/D,KAAK,GAAG,SAAuD;oBACrE,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAA;yBAEtE,KAAK,EAAL,cAAK;oBACL,WAAM,qBAAqB,CAAC,EAAE,kBAAkB,oBAAA,EAAE,GAAG,KAAA,EAAE,UAAU,YAAA,EAAE,gBAAgB,kBAAA,EAAE,MAAM,QAAA,EAAE,WAAW,aAAA,EAAE,KAAK,OAAA,EAAE,CAAC,EAAA;;oBAAlH,SAAkH,CAAA;;wBAGtH,WAAO,MAAM,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,0BAA0B,EAAE,EAAE,CAAC,EAAA;;;;CACpE;AAKD,SAAsB,sBAAsB,CAAC,EAUxB;QATjB,kBAAkB,wBAAA,EAClB,WAAW,iBAAA,EACX,UAAU,gBAAA,EACV,gBAAgB,sBAAA,EAChB,KAAK,WAAA,EACL,WAAW,iBAAA,EACX,QAAQ,cAAA,EACR,UAAU,gBAAA,EACV,wBAA4C,EAA5C,gBAAgB,mBAAG,wCAAyB,KAAA;;;;;wBAGrB,WAAM,uBAAuB,CAAC,EAAE,WAAW,aAAA,EAAE,WAAW,aAAA,EAAE,CAAC,EAAA;;oBAA5E,cAAc,GAAG,SAA2D;oBAC5E,KAAuD,IAAA,4BAAiB,EAAC,WAAW,CAAC,EAA3E,gBAAgB,YAAA,EAAS,eAAe,WAAA,CAAmC;oBAGrF,2BAAoC,wCAAyB,GAAK,gBAAgB,CAAE,EAAlF,GAAG,SAAA,EAAE,KAAK,WAAA,EAAE,MAAM,YAAA,EAAE,IAAI,UAAA,CAA0D;oBAClF,MAAM,GAAkB,UAAU,OAA5B,EAAE,KAAK,GAAW,UAAU,MAArB,EAAE,CAAC,GAAQ,UAAU,EAAlB,EAAE,CAAC,GAAK,UAAU,EAAf,CAAe;oBACpC,KAA6B,eAAe,CAAC;wBAC/C,MAAM,EAAE,KAAK;wBACb,QAAQ,UAAA;wBACR,YAAY,EAAE,eAAe;wBAC7B,UAAU,EAAE,KAAK;wBACjB,YAAY,EAAE,IAAI;wBAClB,KAAK,EAAE,CAAC;wBACR,WAAW,EAAE,OAAO;qBACvB,CAAC,EARK,YAAY,QAAA,EAAE,UAAU,QAAA,CAQ7B;oBACI,KAA6B,eAAe,CAAC;wBAC/C,MAAM,EAAE,MAAM;wBACd,QAAQ,UAAA;wBACR,YAAY,EAAE,gBAAgB;wBAC9B,UAAU,EAAE,MAAM;wBAClB,YAAY,EAAE,GAAG;wBACjB,KAAK,EAAE,CAAC;wBACR,WAAW,EAAE,QAAQ;qBACxB,CAAC,EARK,YAAY,QAAA,EAAE,UAAU,QAAA,CAQ7B;oBAGF,WAAO,uBAAuB,CAAC;4BAC3B,kBAAkB,oBAAA;4BAClB,WAAW,EAAE,cAAc;4BAC3B,UAAU,YAAA;4BACV,gBAAgB,kBAAA;4BAChB,MAAM,EAAE,UAAU,GAAG,YAAY;4BACjC,KAAK,OAAA;4BACL,WAAW,aAAA;4BACX,OAAO,EAAE,YAAY;4BACrB,OAAO,EAAE,YAAY;4BACrB,KAAK,EAAE,UAAU,GAAG,YAAY;yBACnC,CACA,EAAA;;;;CACJ;AAnDD,wDAmDC;AAKD,SAAsB,mBAAmB,CACrC,QAAkB,EAClB,OAA4B,EAC5B,oBAA4B,EAC5B,eAAuB;IADvB,qCAAA,EAAA,4BAA4B;IAC5B,gCAAA,EAAA,uBAAuB;;;;;;oBAInB,KASA,OAAO,cATW,EAAlB,aAAa,mBAAG,EAAE,KAAA,EAClB,gBAAgB,GAQhB,OAAO,iBARS,EAChB,QAAQ,GAOR,OAAO,SAPC,EACR,4BAA4B,GAM5B,OAAO,6BANqB,EAC5B,SAAS,GAKT,OAAO,UALE,EACT,WAAW,GAIX,OAAO,YAJI,EACX,WAAW,GAGX,OAAO,YAHI,EACX,QAAQ,GAER,OAAO,SAFC,EACR,YAAY,GACZ,OAAO,aADK,CACL;oBACL,KACF,OAAO,CAAC,aAAa,EADjB,YAAY,kBAAA,EAAE,gBAAgB,sBAAA,EAAE,cAAc,oBAAA,EAAE,WAAW,iBAAA,EAAE,UAAU,gBAAA,EAAE,UAAU,gBAAA,EAAE,QAAQ,cAAA,EAAE,eAAe,qBAAA,CAC7F;oBAEnB,mBAAmB,yBAAQ,OAAO,CAAC,cAAc,CAAC,GAAG,GAAK,OAAO,CAAC,cAAc,CAAC,MAAM,CAAE,CAAA;oBAGzF,mBAAmB,GAAG,EAAE,WAAW,aAAA,EAAE,UAAU,YAAA,EAAE,QAAQ,UAAA,EAAE,eAAe,iBAAA,EAAE,CAAA;oBAC5E,gBAAgB,GAAG,IAAA,2BAAgB,EAAC,YAAY,EAAE,mBAAmB,CAAC,CAAA;oBACtE,kBAAkB,GAAG,IAAA,2BAAgB,EAAC,cAAc,EAAE,mBAAmB,CAAC,CAAA;oBAC1E,cAAc,GAAG,IAAA,gBAAI,EAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAA;oBACjD,gBAAgB,GAAG,IAAA,gBAAI,EAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAA;oBAG3D,WAAM,wBAAwB,CAAC,cAAc,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,QAAQ,CAAC,EAAA;;oBAA5F,SAA4F,CAAA;oBAItF,sBAAsB,GAAG,CAAC,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,CAAC,CAAA;oBAC/E,MAAM,GAAG,sBAAsB,CAAC,MAAM,CAAC,UAAC,MAAM;wBAChD,OAAA,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,IAAI,CACjC,UAAC,GAAqC,IAAK,OAAA,GAAG,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,mBAAmB,CAAC,GAAG,CAAC,EAA9D,CAA8D,CAC5G;oBAFD,CAEC,CACwB,CAAA;oBAGvB,QAAQ,GAAG,UAAU,IAAI,mBAAmB,CAAC,CAAC,CAAC,mBAAmB,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAA;oBACtF,8BAA8B,GAAG,EAAE,CAAA;yBACrC,CAAC,eAAe,EAAhB,cAAgB;oBACV,2BAA2B,GAAG;wBAChC,eAAe,EAAE,mBAAmB,CAAC,eAAe;wBACpD,iBAAiB,EAAE,mBAAmB,CAAC,iBAAiB;wBACxD,eAAe,EAAE,mBAAmB,CAAC,eAAe;wBACpD,WAAW,aAAA;wBACX,WAAW,aAAA;wBACX,QAAQ,UAAA;wBACR,oBAAoB,sBAAA;wBACpB,4BAA4B,8BAAA;wBAC5B,YAAY,cAAA;qBACf,CAAA;yBACD,CAAA,KAAA,8BAA8B,CAAC,IAAI,CAAA;0BAAnC,8BAA8B;oBAAU,WAAM,IAAA,uDAAuC,EAAC,QAAQ,EAAE,2BAA2B,CAAC,EAAA;;oBAA5H,wBAAuC,CAAC,SAAoF,CAAC,IAAI,EAAE,IAAC;;;oBAElI,YAAY,GAAG,8CAEd,QAAQ,SAGR,aAAa,SAEb,8BAA8B,QAEhC,GAAG,CAEA,UAAC,UAAU;wBACP,OAAO,IAAA,2BAAgB,EACnB;4BAEI,MAAM,EAAE,UAAU,CAAC,CAAC,GAAG,UAAU,CAAC,MAAM;4BACxC,KAAK,EAAE,UAAU,CAAC,CAAC,GAAG,UAAU,CAAC,KAAK;4BACtC,IAAI,EAAE,UAAU,CAAC,CAAC;4BAClB,GAAG,EAAE,UAAU,CAAC,CAAC;yBACpB,EAED,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,gBAAgB,CACnC,CAAA;oBACL,CAAC,CACJ,CAAA;oBAEC,cAAc,uBAChB,MAAM,QAAA,IACH,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE,YAAY,cAAA,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,KAChE,eAAe,EAAE,mBAAmB,CAAC,qBAAqB,GAC7D,CAAA;oBAGyB,WAAM,IAAA,0BAAa,EAAC,IAAA,uBAAY,EAAC,gBAAgB,CAAC,EAAE,IAAA,uBAAY,EAAC,cAAc,CAAC,EAAE,cAAc,CAAC,EAAA;;oBAArH,IAAI,GAAgB,SAAiG;oBACrH,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,CAAA;oBAClD,wBAAwB,GAAG,mBAAmB,CAAC,qBAAqB;wBACtE,CAAC,CAAC,qBAAqB;wBACvB,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAA;yBAG/C,CAAA,qBAAqB,GAAG,mBAAmB,CAAC,kBAAkB,IAAI,QAAQ,KAAK,6BAAQ,CAAC,KAAK,CAAA,EAA7F,cAA6F;oBACvF,YAAY,GAAG,qBAAqB,GAAG,mBAAmB,CAAC,kBAAkB,CAAA;oBAC7E,mBAAmB,GAAG,4DAA4D,CAAA;oBAClF,YAAY,GAAG,yDAAyD,CAAA;oBACxE,cAAc,GAAG,IAAA,2BAAgB,EAAC,UAAU,EAAE,mBAAmB,CAAC,CAAA;oBACxE,YAAY,GAAG,IAAA,gBAAI,EAAC,cAAc,EAAE,QAAQ,CAAC,CAAA;oBAEvC,KAAA,eAAe,CAAA;oBAAC,WAAM,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,YAAY,CAAC,EAAA;wBAAxG,WAAM,kBAAgB,SAAkF,EAAE,YAAY,EAAC,EAAA;;oBAAvH,SAAuH,CAAA;oBAEvH,IAAI,QAAQ,KAAK,6BAAQ,CAAC,KAAK,IAAI,QAAQ,KAAK,6BAAQ,CAAC,IAAI,EAAE,CAAC;wBAC5D,OAAO,CAAC,GAAG,CACP,mBAAmB,EACnB,oGAEb,YAAY,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,YAAY,gBACjD,YAAY,8FAEd,CACY,CAAA;oBACL,CAAC;;wBAIL,WAAO,mBAAmB,CAAC,oBAAoB;wBAC3C,CAAC,CAAC;4BACE,QAAQ,UAAA;4BACR,OAAO,aACH,MAAM,EAAE,cAAc,EACtB,QAAQ,EAAE,gBAAgB,IACvB,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAClD;4BACD,kBAAkB,EAAE,wBAAwB;yBAC/C;wBACD,CAAC,CAAC,wBAAwB,EAAA;;;;CACjC;AArID,kDAqIC;AAKD,SAAsB,uBAAuB,CACzC,eAAwC,EACxC,EAAqF;QAAnF,gBAAgB,sBAAA,EAAE,WAAW,iBAAA;;;;;;oBAEzB,mBAAmB,GAAG,eAAe,CAAC,IAAI,CAAC,MAAM,CAAA;oBAC/B,YAAY,GAAiC,eAAe,eAAhD,EAAiB,WAAW,GAAK,eAAe,cAApB,CAAoB;oBAC9E,MAAM,GAAG,IAAA,qBAAY,EAAC,WAAW,EAAE,YAAY,CAAC,CAAA;oBAChD,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAA;oBAG1B,CAAC,GAAG,CAAC;;;yBAAE,CAAA,CAAC,GAAG,mBAAmB,CAAA;oBAC7B,iBAAiB,GAAG,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,CAAA;oBAEtD,KAAuD,IAAA,4BAAiB,EAAC,iBAAiB,EAAE,gBAAgB,CAAC,EAAnG,gBAAgB,YAAA,EAAS,eAAe,WAAA,CAA2D;oBAC7G,SAAS,GAAG,WAAW,IAAI,gBAAgB,GAAG,eAAe,CAAA;yBAE5C,SAAS,EAAT,cAAS;oBAC1B,WAAM,iBAAiB,CAAC;4BACtB,WAAW,EAAE,iBAAiB;4BAC9B,OAAO,EAAE,CAAC,EAAE;4BACZ,SAAS,EAAE,eAAe;4BAC1B,QAAQ,EAAE,gBAAgB;yBAC7B,CAAC,EAAA;;oBALA,KAAA,SAKA,CAAA;;;oBACA,KAAA,iBAAiB,CAAA;;;oBAPjB,cAAc,KAOG;oBACjB,KAA+E,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,EAApG,eAAe,qBAAA,EAAE,WAAW,iBAAA,EAAE,UAAU,gBAAA,EAAE,cAAc,oBAAA,EAAE,cAAc,oBAAA,CAA4B;oBAC9F,WAAM,IAAA,kBAAS,EAAC,gCAAyB,cAAc,CAAE,CAAC,EAAA;;oBAAlE,KAAK,GAAG,SAA0D;oBAExE,GAAG,CAAC,SAAS,CACT,KAAK,EAEL,cAAc,EACd,cAAc,EAEd,UAAU,EACV,WAAW,EAEX,CAAC,EACD,eAAe,EAEf,UAAU,EACV,WAAW,CACd,CAAA;;;oBA/BoC,CAAC,EAAE,CAAA;;wBAkC5C,WAAO,MAAM,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,0BAA0B,EAAE,EAAE,CAAC,EAAA;;;;CACpE;AA7CD,0DA6CC;AAKD,SAAsB,eAAe,CAAC,WAAmB,EAAE,QAAgB;;;YACvE,WAAO,IAAA,qBAAU,EAAC,QAAQ,EAAE,WAAW,EAAE,QAAQ,CAAC,EAAA;;;CACrD;AAFD,0CAEC;AAKD,SAAsB,YAAY,CAAC,UAAkB,EAAE,YAA2B;;;;;;oBAExE,KAAoB,IAAA,4BAAiB,EAAC,UAAU,CAAC,EAA/C,MAAM,YAAA,EAAE,KAAK,WAAA,CAAkC;oBACjD,MAAM,GAAG,IAAA,qBAAY,EAAC,KAAK,EAAE,MAAM,CAAC,CAAA;oBAC5B,WAAM,IAAA,kBAAS,EAAC,gCAAyB,UAAU,CAAE,CAAC,EAAA;;oBAA9D,KAAK,GAAG,SAAsD;oBAC9D,aAAa,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAA;oBAG7C,aAAa,CAAC,SAAS,CACnB,KAAK,EAEL,CAAC,EACD,CAAC,EAED,KAAK,EACL,MAAM,EAEN,CAAC,EACD,CAAC,EAED,KAAK,EACL,MAAM,CACT,CAAA;oBAGD,YAAY,CAAC,OAAO,CAAC,UAAC,UAAU;wBACpB,IAAO,eAAe,GAAgD,UAAU,MAA1D,EAAU,gBAAgB,GAAsB,UAAU,OAAhC,EAAQ,CAAC,GAAa,UAAU,KAAvB,EAAO,CAAC,GAAK,UAAU,IAAf,CAAe;wBACxF,IAAM,YAAY,GAAG,IAAA,qBAAY,EAAC,eAAe,GAAG,CAAC,EAAE,gBAAgB,GAAG,CAAC,CAAC,CAAA;wBAC5E,IAAM,aAAa,GAAG,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,CAAA;wBAGnD,aAAa,CAAC,WAAW,GAAG,GAAG,CAAA;wBAC/B,aAAa,CAAC,SAAS,GAAG,SAAS,CAAA;wBACnC,aAAa,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,eAAe,GAAG,CAAC,EAAE,gBAAgB,GAAG,CAAC,CAAC,CAAA;wBAGvE,aAAa,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC,EAAE,CAAC,CAAC,CAAA;oBAC/C,CAAC,CAAC,CAAA;oBAGF,WAAO,MAAM,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,0BAA0B,EAAE,EAAE,CAAC,EAAA;;;;CACpE;AAzCD,oCAyCC;AAMD,SAAe,iBAAiB,CAAC,EAAuE;QAArE,WAAW,iBAAA,EAAE,OAAO,aAAA,EAAE,SAAS,eAAA,EAAE,QAAQ,cAAA;;;;;;oBAClE,MAAM,GAAG,IAAA,qBAAY,EAAC,QAAQ,EAAE,SAAS,CAAC,CAAA;oBAC1C,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAA;oBACrB,WAAM,IAAA,kBAAS,EAAC,gCAAyB,WAAW,CAAE,CAAC,EAAA;;oBAA/D,KAAK,GAAG,SAAuD;oBAErE,MAAM,CAAC,KAAK,GAAG,OAAO,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAA;oBAC/D,MAAM,CAAC,MAAM,GAAG,OAAO,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAA;oBAEhE,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAA;oBAClD,GAAG,CAAC,MAAM,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,CAAA;oBACrC,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAA;oBAEzD,WAAO,MAAM,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,0BAA0B,EAAE,EAAE,CAAC,EAAA;;;;CACpE;AAKD,SAAe,2BAA2B,CAAC,EAkB1C;QAjBG,OAAO,aAAA,EACP,gBAAgB,sBAAA,EAChB,KAAK,WAAA,EACL,eAGC,EAFG,cAAc,oBAAA,EACd,UAAU,gBAAA,EAEd,gBAAgB,sBAAA;;;;;wBAYO,WAAM,OAAO,EAAA;;oBAA9B,cAAc,GAAG,SAAa;oBACpC,IAAI,CAAC,IAAA,6BAAa,EAAC,cAAc,CAAC,EAAC,CAAC;wBAChC,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,CAAA;oBACpE,CAAC;oBAGqB,WAAM,cAAc,CAAC,cAAc,CAAC,SAAS,CAAC,EAAA;;oBAA9D,aAAa,GAAG,SAA8C;oBAGhD,WAAM,UAAU,EAAE,EAAA;;oBAAhC,WAAW,GAAG,SAAkB;oBAKX,WAAM,sBAAsB,CAAC;4BACpD,kBAAkB,EAAE,KAAK;4BACzB,WAAW,aAAA;4BACX,UAAU,EAAE,EAAE;4BACd,gBAAgB,kBAAA;4BAChB,KAAK,OAAA;4BACL,WAAW,EAAE,KAAK;4BAGlB,QAAQ,EAAE,OAAO;4BACjB,UAAU,EAAE,IAAA,2BAAgB,EAAC;gCACzB,MAAM,EAAE,aAAa,CAAC,MAAM;gCAC5B,KAAK,EAAE,aAAa,CAAC,KAAK;gCAC1B,CAAC,EAAE,aAAa,CAAC,CAAC;gCAClB,CAAC,EAAE,aAAa,CAAC,CAAC;6BACrB,EAAE,KAAK,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;4BAEhC,gBAAgB,EAAE,IAAA,2BAAgB,EAAC,gBAAgB,EAAE,CAAC,GAAC,gBAAgB,CAAC;yBAC3E,CAAC,EAAA;;oBAlBI,kBAAkB,GAAG,SAkBzB;oBAEF,WAAO,kBAAkB,EAAA;;;;CAC5B;AAKD,SAAsB,2BAA2B,CAAC,EAkBjD;QAjBG,OAAO,aAAA,EACP,gBAAgB,sBAAA,EAChB,KAAK,WAAA,EACL,eAGC,EAFG,cAAc,oBAAA,EACd,UAAU,gBAAA,EAEd,gBAAgB,sBAAA;;;;;;oBAWV,2BAA2B,GAAG,gBAAgB,KAAK,wCAAyB,CAAA;yBAE9E,CAAC,2BAA2B,EAA5B,cAA4B;;;;oBAED,WAAM,OAAO,EAAA;;oBAA9B,cAAc,GAAG,SAAa;oBACpC,IAAI,CAAC,IAAA,6BAAa,EAAC,cAAc,CAAC,EAAE,CAAC;wBACjC,OAAO,CAAC,KAAK,CAAC,yEAAyE,EAAE,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,CAAA;oBAC5H,CAAC;oBACM,WAAM,cAAc,CAAC,qBAAqB,CAAC,cAAc,CAAC,SAAS,CAAC,EAAA;wBAA3E,WAAO,SAAoE,EAAA;;;oBAE3E,OAAO,CAAC,KAAK,CAAC,wGAAwG,EAAE,OAAK,EAAE,0CAA0C,CAAC,CAAA;;wBAI3K,WAAM,2BAA2B,CAAC;wBACrC,OAAO,SAAA;wBACP,gBAAgB,kBAAA;wBAChB,KAAK,OAAA;wBACL,OAAO,EAAE;4BACL,cAAc,gBAAA;4BACd,UAAU,YAAA;yBACb;wBACD,gBAAgB,kBAAA;qBACnB,CAAC,EAAA;wBATF,WAAO,SASL,EAAA;;;;CACL;AA3CD,kEA2CC","sourcesContent":["import { access, copySync, outputFile, readFileSync } from 'fs-extra'\nimport { join } from 'node:path'\nimport { createCanvas, loadImage } from 'canvas'\nimport type { ComparisonOptions, ComparisonIgnoreOption } from 'resemblejs'\nimport compareImages from '../resemble/compareImages.js'\nimport { calculateDprData, getAndCreatePath, getIosBezelImageNames, getScreenshotSize } from '../helpers/utils.js'\nimport { DEFAULT_RESIZE_DIMENSIONS, supportedIosBezelDevices } from '../helpers/constants.js'\nimport { determineStatusAddressToolBarRectangles, isWdioElement } from './rectangles.js'\nimport type {\n    AdjustedAxis,\n    CropAndConvertToDataURL,\n    CroppedBase64Image,\n    DimensionsWarning,\n    HandleIOSBezelCorners,\n    IgnoreBoxes,\n    ImageCompareOptions,\n    ImageCompareResult,\n    ResizeDimensions,\n    RotateBase64ImageOptions,\n    RotatedImage,\n} from './images.interfaces'\nimport type { FullPageScreenshotsData } from './screenshots.interfaces'\nimport type { Executor, GetElementRect, TakeScreenShot } from './methods.interfaces'\nimport type { CompareData } from '../resemble/compare.interfaces'\nimport { LogLevel } from '../helpers/options.interfaces'\nimport type { WicElement } from '../commands/element.interfaces.js'\n\n/**\n * Check if the image exists and create a new baseline image if needed\n */\nexport async function checkBaselineImageExists(\n    actualFilePath: string,\n    baselineFilePath: string,\n    autoSaveBaseline: boolean,\n    logLevel: LogLevel,\n): Promise<void> {\n    return new Promise((resolve, reject) => {\n        access(baselineFilePath, (error) => {\n            if (error) {\n                if (autoSaveBaseline) {\n                    try {\n                        copySync(actualFilePath, baselineFilePath)\n                        if (logLevel === LogLevel.info) {\n                            console.log(\n                                '\\x1b[33m%s\\x1b[0m',\n                                `\n#####################################################################################\n INFO:\n Autosaved the image to\n ${baselineFilePath}\n#####################################################################################\n`,\n                            )\n                        }\n                    } catch (error) {\n                        /* istanbul ignore next */\n                        reject(\n                            `\n#####################################################################################\n Image could not be copied. The following error was thrown:\n ${error}\n#####################################################################################\n`,\n                        )\n                    }\n                } else {\n                    reject(\n                        `\n#####################################################################################\n Baseline image not found, save the actual image manually to the baseline.\n The image can be found here:\n ${actualFilePath}\n#####################################################################################\n`,\n                    )\n                }\n            }\n            resolve()\n        })\n    })\n}\n\n/**\n * Get the rotated image if needed\n */\nasync function getRotatedImageIfNeeded({ isLandscape, base64Image }: RotatedImage): Promise<string> {\n    const { height: screenshotHeight, width: screenshotWidth } = getScreenshotSize(base64Image)\n    const isRotated = isLandscape && screenshotHeight > screenshotWidth\n\n    return isRotated\n        ? await rotateBase64Image({ base64Image, degrees: -90, newHeight: screenshotWidth, newWidth: screenshotHeight })\n        : base64Image\n}\n\n/**\n * Log a warning when the crop goes out of the screen\n */\nfunction logDimensionWarning({\n    dimension,\n    logLevel,\n    maxDimension,\n    position,\n    type,\n}: DimensionsWarning): void {\n    if (logLevel === LogLevel.debug || logLevel === LogLevel.warn) {\n        console.log(\n            '\\x1b[33m%s\\x1b[0m',\n            `\n#####################################################################################\n THE RESIZE DIMENSION ${type}=${dimension} MADE THE CROPPING GO OUT OF THE SCREEN SIZE\n RESULTING IN A ${type} CROP POSITION=${position}.\n THIS HAS BEEN DEFAULTED TO '${['TOP', 'LEFT'].includes(type) ? 0 : maxDimension}'\n#####################################################################################\n`,\n        )\n    }\n}\n\n/**\n * Get the adjusted axis\n */\nfunction getAdjustedAxis({\n    length,\n    logLevel,\n    maxDimension,\n    paddingEnd,\n    paddingStart,\n    start,\n    warningType,\n}: AdjustedAxis): [number, number] {\n    let adjustedStart = start - paddingStart\n    let adjustedEnd = start + length + paddingEnd\n\n    if (adjustedStart < 0) {\n        logDimensionWarning({\n            dimension: paddingStart,\n            logLevel,\n            maxDimension,\n            position: adjustedStart,\n            type: warningType === 'WIDTH' ? 'LEFT' : 'TOP',\n        })\n        adjustedStart = 0\n    }\n    if (adjustedEnd > maxDimension) {\n        logDimensionWarning({\n            dimension: paddingEnd,\n            logLevel,\n            maxDimension,\n            position: adjustedEnd,\n            type: warningType === 'WIDTH' ? 'RIGHT' : 'BOTTOM',\n        })\n        adjustedEnd = maxDimension\n    }\n\n    return [adjustedStart, adjustedEnd]\n}\n\n/**\n * Handle the iOS bezel corners\n */\nasync function handleIOSBezelCorners({\n    addIOSBezelCorners,\n    ctx,\n    deviceName,\n    devicePixelRatio,\n    height,\n    isLandscape,\n    width,\n}: HandleIOSBezelCorners){\n    // Add the bezel corners to the iOS image if we need to\n    const normalizedDeviceName = deviceName\n        .toLowerCase()\n    // (keep alphanumeric|remove simulator|remove inch|remove 1st/2nd/3rd/4th generation)\n        .replace(/([^A-Za-z0-9]|simulator|inch|(\\d(st|nd|rd|th)) generation)/gi, '')\n    const isSupported =\n        // For iPhone\n        (normalizedDeviceName.includes('iphone') && supportedIosBezelDevices.includes(normalizedDeviceName)) ||\n        // For iPad\n        (normalizedDeviceName.includes('ipad') &&\n        supportedIosBezelDevices.includes(normalizedDeviceName) &&\n        (width / devicePixelRatio >= 1133 || height / devicePixelRatio >= 1133))\n    let isIosBezelError = false\n\n    if (addIOSBezelCorners && isSupported) {\n        // Determine the bezel images\n        const { topImageName, bottomImageName } = getIosBezelImageNames(normalizedDeviceName)\n\n        if (topImageName && bottomImageName) {\n            const topImage = readFileSync(join(__dirname, '..', '..', 'assets', 'ios', `${topImageName}.png`)).toString('base64')\n            const bottomImage = readFileSync(join(__dirname, '..', '..', 'assets', 'ios', `${bottomImageName}.png`)).toString('base64')\n\n            // If the screen is rotated the images need to be rotated\n            const topBase64Image = isLandscape\n                ? await rotateBase64Image({\n                    base64Image: topImage,\n                    degrees: -90,\n                    newHeight: getScreenshotSize(topImage).width,\n                    newWidth: getScreenshotSize(topImage).height,\n                })\n                : topImage\n            const bottomBase64Image = isLandscape\n                ? await rotateBase64Image({\n                    base64Image: bottomImage,\n                    degrees: -90,\n                    newHeight: getScreenshotSize(topImage).width,\n                    newWidth: getScreenshotSize(topImage).height,\n                })\n                : bottomImage\n            // Draw top image, always place it at x=0 and y=0\n            ctx.drawImage(await loadImage(`data:image/png;base64,${topBase64Image}`), 0, 0)\n            // Draw bottom image, depending if the screen is rotated it needs to be placed\n            // y = heightScreen - heightBottom or x = widthScreen - heightBottom\n            ctx.drawImage(\n                await loadImage(`data:image/png;base64,${bottomBase64Image}`),\n                isLandscape ? width - getScreenshotSize(bottomImage).height : 0,\n                isLandscape ? 0 : height - getScreenshotSize(bottomImage).height,\n            )\n        } else {\n            isIosBezelError = true\n        }\n    }\n\n    if (addIOSBezelCorners && !isSupported) {\n        isIosBezelError = true\n    }\n\n    if (isIosBezelError) {\n        console.log(\n            '\\x1b[33m%s\\x1b[0m',\n            `\n#####################################################################################\nWARNING:\nWe could not find the bezel corners for the device '${deviceName}'.\nThe normalized device name is '${normalizedDeviceName}'\nand couldn't be found in the supported devices:\n${supportedIosBezelDevices.join(', ')}\n#####################################################################################\n`,\n        )\n    }\n}\n\n/**\n * Crop the image and convert it to a base64 image\n */\nasync function cropAndConvertToDataURL({\n    addIOSBezelCorners,\n    base64Image,\n    deviceName,\n    devicePixelRatio,\n    height,\n    isIOS,\n    isLandscape,\n    sourceX,\n    sourceY,\n    width,\n}: CropAndConvertToDataURL): Promise<string> {\n    const canvas = createCanvas(width, height)\n    const ctx = canvas.getContext('2d')\n    const image = await loadImage(`data:image/png;base64,${base64Image}`)\n    ctx.drawImage(image, sourceX, sourceY, width, height, 0, 0, width, height)\n\n    if (isIOS){\n        await handleIOSBezelCorners({ addIOSBezelCorners, ctx, deviceName, devicePixelRatio, height, isLandscape, width })\n    }\n\n    return canvas.toDataURL().replace(/^data:image\\/png;base64,/, '')\n}\n\n/**\n * Make a cropped image with Canvas\n */\nexport async function makeCroppedBase64Image({\n    addIOSBezelCorners,\n    base64Image,\n    deviceName,\n    devicePixelRatio,\n    isIOS,\n    isLandscape,\n    logLevel,\n    rectangles,\n    resizeDimensions = DEFAULT_RESIZE_DIMENSIONS,\n}: CroppedBase64Image): Promise<string> {\n    // Rotate the image if needed and get the screenshot size\n    const newBase64Image = await getRotatedImageIfNeeded({ isLandscape, base64Image })\n    const { height: screenshotHeight, width: screenshotWidth } = getScreenshotSize(base64Image)\n\n    // Determine/Get the size of the cropped screenshot and cut out dimensions\n    const { top, right, bottom, left } = { ...DEFAULT_RESIZE_DIMENSIONS, ...resizeDimensions }\n    const { height, width, x, y } = rectangles\n    const [sourceXStart, sourceXEnd] = getAdjustedAxis({\n        length: width,\n        logLevel,\n        maxDimension: screenshotWidth,\n        paddingEnd: right,\n        paddingStart: left,\n        start: x,\n        warningType: 'WIDTH'\n    })\n    const [sourceYStart, sourceYEnd] = getAdjustedAxis({\n        length: height,\n        logLevel,\n        maxDimension: screenshotHeight,\n        paddingEnd: bottom,\n        paddingStart: top,\n        start: y,\n        warningType: 'HEIGHT',\n    })\n\n    // Create the canvas and draw the image on it\n    return cropAndConvertToDataURL({\n        addIOSBezelCorners,\n        base64Image: newBase64Image,\n        deviceName,\n        devicePixelRatio,\n        height: sourceYEnd - sourceYStart,\n        isIOS,\n        isLandscape,\n        sourceX: sourceXStart,\n        sourceY: sourceYStart,\n        width: sourceXEnd - sourceXStart,\n    }\n    )\n}\n\n/**\n * Execute the image compare\n */\nexport async function executeImageCompare(\n    executor: Executor,\n    options: ImageCompareOptions,\n    isViewPortScreenshot = false,\n    isNativeContext = false,\n): Promise<ImageCompareResult | number> {\n    // 1. Set some variables\n    const {\n        ignoreRegions = [],\n        devicePixelRatio,\n        fileName,\n        isAndroidNativeWebScreenshot,\n        isAndroid,\n        isHybridApp,\n        isLandscape,\n        logLevel,\n        platformName,\n    } = options\n    const { actualFolder, autoSaveBaseline, baselineFolder, browserName, deviceName, diffFolder, isMobile, savePerInstance } =\n        options.folderOptions\n    let diffFilePath\n    const imageCompareOptions = { ...options.compareOptions.wic, ...options.compareOptions.method }\n\n    // 2. Create all needed folders\n    const createFolderOptions = { browserName, deviceName, isMobile, savePerInstance }\n    const actualFolderPath = getAndCreatePath(actualFolder, createFolderOptions)\n    const baselineFolderPath = getAndCreatePath(baselineFolder, createFolderOptions)\n    const actualFilePath = join(actualFolderPath, fileName)\n    const baselineFilePath = join(baselineFolderPath, fileName)\n\n    // 3. Check if there is a baseline image, and determine if it needs to be auto saved or not\n    await checkBaselineImageExists(actualFilePath, baselineFilePath, autoSaveBaseline, logLevel)\n\n    // 4. Prepare the compare\n    // 4a.Determine the ignore options\n    const resembleIgnoreDefaults = ['alpha', 'antialiasing', 'colors', 'less', 'nothing']\n    const ignore = resembleIgnoreDefaults.filter((option) =>\n        Object.keys(imageCompareOptions).find(\n            (key: keyof typeof imageCompareOptions) => key.toLowerCase().includes(option) && imageCompareOptions[key],\n        ),\n    ) as ComparisonIgnoreOption[]\n\n    // 4b. Determine the ignore rectangles for the block outs\n    const blockOut = 'blockOut' in imageCompareOptions ? imageCompareOptions.blockOut || [] : []\n    const webStatusAddressToolBarOptions = []\n    if (!isNativeContext){\n        const statusAddressToolBarOptions = {\n            blockOutSideBar: imageCompareOptions.blockOutSideBar,\n            blockOutStatusBar: imageCompareOptions.blockOutStatusBar,\n            blockOutToolBar: imageCompareOptions.blockOutToolBar,\n            isHybridApp,\n            isLandscape,\n            isMobile,\n            isViewPortScreenshot,\n            isAndroidNativeWebScreenshot,\n            platformName,\n        }\n        webStatusAddressToolBarOptions.push(...(await determineStatusAddressToolBarRectangles(executor, statusAddressToolBarOptions)) || [])\n    }\n    const ignoredBoxes = [\n        // These come from the method\n        ...blockOut,\n        // @TODO: I'm defaulting ignore regions for devices\n        // Need to check if this is the right thing to do for web and mobile browser tests\n        ...ignoreRegions,\n        // Only get info about the status bars when we are in the web context\n        ...webStatusAddressToolBarOptions\n    ]\n        .map(\n            // 4d. Make sure all the rectangles are equal to the dpr for the screenshot\n            (rectangles) => {\n                return calculateDprData(\n                    {\n                        // Adjust for the ResembleJS API\n                        bottom: rectangles.y + rectangles.height,\n                        right: rectangles.x + rectangles.width,\n                        left: rectangles.x,\n                        top: rectangles.y,\n                    },\n                    // For Android we don't need to do it times the pixel ratio, for all others we need to\n                    isAndroid ? 1 : devicePixelRatio,\n                )\n            },\n        )\n\n    const compareOptions: ComparisonOptions = {\n        ignore,\n        ...(ignoredBoxes.length > 0 ? { output: { ignoredBoxes } } : {}),\n        scaleToSameSize: imageCompareOptions.scaleImagesToSameSize,\n    }\n\n    // 5. Execute the compare and retrieve the data\n    const data: CompareData = await compareImages(readFileSync(baselineFilePath), readFileSync(actualFilePath), compareOptions)\n    const rawMisMatchPercentage = data.rawMisMatchPercentage\n    const reportMisMatchPercentage = imageCompareOptions.rawMisMatchPercentage\n        ? rawMisMatchPercentage\n        : Number(data.rawMisMatchPercentage.toFixed(3))\n\n    // 6. Save the diff when there is a diff or when debug mode is on\n    if (rawMisMatchPercentage > imageCompareOptions.saveAboveTolerance || logLevel === LogLevel.debug) {\n        const isDifference = rawMisMatchPercentage > imageCompareOptions.saveAboveTolerance\n        const isDifferenceMessage = 'WARNING:\\n There was a difference. Saved the difference to'\n        const debugMessage = 'INFO:\\n Debug mode is enabled. Saved the debug file to:'\n        const diffFolderPath = getAndCreatePath(diffFolder, createFolderOptions)\n        diffFilePath = join(diffFolderPath, fileName)\n\n        await saveBase64Image(await addBlockOuts(Buffer.from(data.getBuffer()).toString('base64'), ignoredBoxes), diffFilePath)\n\n        if (logLevel === LogLevel.debug || logLevel === LogLevel.warn) {\n            console.log(\n                '\\x1b[33m%s\\x1b[0m',\n                `\n#####################################################################################\n ${isDifference ? isDifferenceMessage : debugMessage}\n ${diffFilePath}\n#####################################################################################\n`,\n            )\n        }\n    }\n\n    // 7. Return the comparison data\n    return imageCompareOptions.returnAllCompareData\n        ? {\n            fileName,\n            folders: {\n                actual: actualFilePath,\n                baseline: baselineFilePath,\n                ...(diffFilePath ? { diff: diffFilePath } : {}),\n            },\n            misMatchPercentage: reportMisMatchPercentage,\n        }\n        : reportMisMatchPercentage\n}\n\n/**\n * Make a full page image with Canvas\n */\nexport async function makeFullPageBase64Image(\n    screenshotsData: FullPageScreenshotsData,\n    { devicePixelRatio, isLandscape }: { devicePixelRatio: number; isLandscape: boolean },\n): Promise<string> {\n    const amountOfScreenshots = screenshotsData.data.length\n    const { fullPageHeight: canvasHeight, fullPageWidth: canvasWidth } = screenshotsData\n    const canvas = createCanvas(canvasWidth, canvasHeight)\n    const ctx = canvas.getContext('2d')\n\n    // Load all the images\n    for (let i = 0; i < amountOfScreenshots; i++) {\n        const currentScreenshot = screenshotsData.data[i].screenshot\n        // Determine if the image is rotated\n        const { height: screenshotHeight, width: screenshotWidth } = getScreenshotSize(currentScreenshot, devicePixelRatio)\n        const isRotated = isLandscape && screenshotHeight > screenshotWidth\n        // If so we need to rotate is -90 degrees\n        const newBase64Image = isRotated\n            ? await rotateBase64Image({\n                base64Image: currentScreenshot,\n                degrees: -90,\n                newHeight: screenshotWidth,\n                newWidth: screenshotHeight,\n            })\n            : currentScreenshot\n        const { canvasYPosition, imageHeight, imageWidth, imageXPosition, imageYPosition } = screenshotsData.data[i]\n        const image = await loadImage(`data:image/png;base64,${newBase64Image}`)\n\n        ctx.drawImage(\n            image,\n            // Start at x/y pixels from the left and the top of the image (crop)\n            imageXPosition,\n            imageYPosition,\n            // 'Get' a (w * h) area from the source image (crop)\n            imageWidth,\n            imageHeight,\n            // Place the result at 0, 0 in the canvas,\n            0,\n            canvasYPosition,\n            // With as width / height: 100 * 100 (scale)\n            imageWidth,\n            imageHeight,\n        )\n    }\n\n    return canvas.toDataURL().replace(/^data:image\\/png;base64,/, '')\n}\n\n/**\n * Save the base64 image to a file\n */\nexport async function saveBase64Image(base64Image: string, filePath: string): Promise<void> {\n    return outputFile(filePath, base64Image, 'base64')\n}\n\n/**\n * Create a canvas with the ignore boxes if they are present\n */\nexport async function addBlockOuts(screenshot: string, ignoredBoxes: IgnoreBoxes[]): Promise<string> {\n    // Create canvas and load image\n    const { height, width } = getScreenshotSize(screenshot)\n    const canvas = createCanvas(width, height)\n    const image = await loadImage(`data:image/png;base64,${screenshot}`)\n    const canvasContext = canvas.getContext('2d')\n\n    // Draw the image on canvas\n    canvasContext.drawImage(\n        image,\n        // Start at x/y pixels from the left and the top of the image (crop)\n        0,\n        0,\n        // 'Get' a (w * h) area from the source image (crop)\n        width,\n        height,\n        // Place the result at 0, 0 in the canvas,\n        0,\n        0,\n        // With as width / height: 100 * 100 (scale)\n        width,\n        height,\n    )\n\n    // Loop over all ignored areas and add them to the current canvas\n    ignoredBoxes.forEach((ignoredBox) => {\n        const { right: ignoredBoxWidth, bottom: ignoredBoxHeight, left: x, top: y } = ignoredBox\n        const ignoreCanvas = createCanvas(ignoredBoxWidth - x, ignoredBoxHeight - y)\n        const ignoreContext = ignoreCanvas.getContext('2d')\n\n        // Add a background color to the ignored box\n        ignoreContext.globalAlpha = 0.5\n        ignoreContext.fillStyle = '#39aa56'\n        ignoreContext.fillRect(0, 0, ignoredBoxWidth - x, ignoredBoxHeight - y)\n\n        // add to canvasContext\n        canvasContext.drawImage(ignoreCanvas, x, y)\n    })\n\n    // Return the screenshot\n    return canvas.toDataURL().replace(/^data:image\\/png;base64,/, '')\n}\n\n/**\n * Rotate a base64 image\n * Tnx to https://gist.github.com/Zyndoras/6897abdf53adbedf02564808aaab94db\n */\nasync function rotateBase64Image({ base64Image, degrees, newHeight, newWidth }: RotateBase64ImageOptions): Promise<string> {\n    const canvas = createCanvas(newWidth, newHeight)\n    const ctx = canvas.getContext('2d')\n    const image = await loadImage(`data:image/png;base64,${base64Image}`)\n\n    canvas.width = degrees % 180 === 0 ? image.width : image.height\n    canvas.height = degrees % 180 === 0 ? image.height : image.width\n\n    ctx.translate(canvas.width / 2, canvas.height / 2)\n    ctx.rotate((degrees * Math.PI) / 180)\n    ctx.drawImage(image, image.width / -2, image.height / -2)\n\n    return canvas.toDataURL().replace(/^data:image\\/png;base64,/, '')\n}\n\n/**\n * Take a based64 screenshot of an element and resize it\n */\nasync function takeResizedBase64Screenshot({\n    element,\n    devicePixelRatio,\n    isIOS,\n    methods:{\n        getElementRect,\n        screenShot,\n    },\n    resizeDimensions,\n}:{\n    element: WicElement,\n    devicePixelRatio: number,\n    isIOS: boolean,\n    methods:{\n        getElementRect: GetElementRect,\n        screenShot: TakeScreenShot,\n    }\n    resizeDimensions: ResizeDimensions,\n}\n): Promise<string> {\n    const awaitedElement = await element\n    if (!isWdioElement(awaitedElement)){\n        console.log('awaitedElement = ', JSON.stringify(awaitedElement))\n    }\n\n    // Get the element position\n    const elementRegion = await getElementRect(awaitedElement.elementId)\n\n    // Create a screenshot\n    const base64Image = await screenShot()\n    // Crop it out with the correct dimensions\n\n    // Make the image smaller\n    // Provide the size of the image with the resizeDimensions on left, right, top and bottom\n    const resizedBase64Image = await makeCroppedBase64Image({\n        addIOSBezelCorners: false,\n        base64Image,\n        deviceName: '',\n        devicePixelRatio,\n        isIOS,\n        isLandscape: false,\n        // @TODO:we need to fix this debug statement\n        // @ts-ignore\n        logLevel: 'debug',\n        rectangles: calculateDprData({\n            height: elementRegion.height,\n            width: elementRegion.width,\n            x: elementRegion.x,\n            y: elementRegion.y,\n        }, isIOS ? devicePixelRatio : 1),\n        // The assumption is that a user calculated the resizeDimensions from a screenshot which is with the devicePixelRatio\n        resizeDimensions: calculateDprData(resizeDimensions, 1/devicePixelRatio),\n    })\n\n    return resizedBase64Image\n}\n\n/**\n * Take a base64 screenshot of an element\n */\nexport async function takeBase64ElementScreenshot({\n    element,\n    devicePixelRatio,\n    isIOS,\n    methods:{\n        getElementRect,\n        screenShot,\n    },\n    resizeDimensions,\n}:{\n    element: WicElement,\n    devicePixelRatio: number,\n    isIOS: boolean,\n    methods:{\n        getElementRect: GetElementRect,\n        screenShot: TakeScreenShot,\n    }\n    resizeDimensions: ResizeDimensions,\n}): Promise<string> {\n    const shouldTakeResizedScreenshot = resizeDimensions !== DEFAULT_RESIZE_DIMENSIONS\n\n    if (!shouldTakeResizedScreenshot) {\n        try {\n            const awaitedElement = await element\n            if (!isWdioElement(awaitedElement)) {\n                console.error(' takeBase64ElementScreenshot element is not a valid element because of ', JSON.stringify(awaitedElement))\n            }\n            return await awaitedElement.takeElementScreenshot(awaitedElement.elementId)\n        } catch (error) {\n            console.error('Error taking an element screenshot with the default `element.takeElementScreenshot(elementId)` method:', error, ' We will retry with a resized screenshot')\n        }\n    }\n\n    return await takeResizedBase64Screenshot({\n        element,\n        devicePixelRatio,\n        isIOS,\n        methods: {\n            getElementRect,\n            screenShot,\n        },\n        resizeDimensions,\n    })\n}\n"]}