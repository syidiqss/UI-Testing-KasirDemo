{"version":3,"file":"instanceData.test.js","sourceRoot":"","sources":["../../src/methods/instanceData.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, it, expect, vi } from 'vitest'\nimport getEnrichedInstanceData from './instanceData.js'\n\ndescribe('getEnrichedInstanceData', () => {\n    it('should be able to enrich the instance data with all the defaults for desktop with no shadow padding', async () => {\n        const instanceOptions = {\n            addressBarShadowPadding: 6,\n            toolBarShadowPadding: 6,\n            browserName: 'browserName',\n            browserVersion: 'browserVersion',\n            deviceName: 'deviceName',\n            logName: 'logName',\n            name: 'name',\n            nativeWebScreenshot: false,\n            platformName: 'platformName',\n            platformVersion: 'platformVersion',\n        }\n        const MOCKED_EXECUTOR = vi\n            .fn()\n            // getEnrichedInstanceData for: getScreenDimensions\n            .mockResolvedValueOnce({\n                body: {\n                    offsetHeight: 0,\n                    scrollHeight: 0,\n                },\n                html: {\n                    clientHeight: 0,\n                    clientWidth: 0,\n                    offsetHeight: 0,\n                    scrollHeight: 0,\n                    scrollWidth: 0,\n                },\n                window: {\n                    devicePixelRatio: 1,\n                    innerHeight: 768,\n                    innerWidth: 1024,\n                    outerHeight: 768,\n                    outerWidth: 1024,\n                    screenHeight: 0,\n                    screenWidth: 0,\n                },\n            })\n\n        expect(await getEnrichedInstanceData(MOCKED_EXECUTOR, instanceOptions, false)).toMatchSnapshot()\n    })\n\n    it('should be able to enrich the instance data with all the defaults for Android ChromeDriver with no shadow padding', async () => {\n        const instanceOptions = {\n            addressBarShadowPadding: 6,\n            toolBarShadowPadding: 6,\n            browserName: 'browserName',\n            browserVersion: 'browserVersion',\n            deviceName: 'deviceName',\n            logName: 'logName',\n            name: 'name',\n            nativeWebScreenshot: false,\n            platformName: 'Android',\n            platformVersion: '8.0',\n        }\n        const MOCKED_EXECUTOR = vi\n            .fn()\n            // getEnrichedInstanceData for: getScreenDimensions\n            .mockResolvedValueOnce({\n                body: {\n                    offsetHeight: 0,\n                    scrollHeight: 0,\n                },\n                html: {\n                    clientHeight: 0,\n                    clientWidth: 0,\n                    offsetHeight: 0,\n                    scrollHeight: 0,\n                    scrollWidth: 0,\n                },\n                window: {\n                    devicePixelRatio: 1,\n                    innerHeight: 768,\n                    innerWidth: 1024,\n                    outerHeight: 768,\n                    outerWidth: 1024,\n                    screenHeight: 0,\n                    screenWidth: 0,\n                },\n            })\n\n        expect(await getEnrichedInstanceData(MOCKED_EXECUTOR, instanceOptions, false)).toMatchSnapshot()\n    })\n\n    it('should be able to enrich the instance data with all the defaults for Android Native Webscreenshot with no shadow padding', async () => {\n        const instanceOptions = {\n            addressBarShadowPadding: 6,\n            toolBarShadowPadding: 6,\n            browserName: 'browserName',\n            browserVersion: 'browserVersion',\n            deviceName: 'deviceName',\n            logName: 'logName',\n            name: 'name',\n            nativeWebScreenshot: true,\n            platformName: 'Android',\n            platformVersion: '8.0',\n        }\n        const MOCKED_EXECUTOR = vi\n            .fn()\n            // getEnrichedInstanceData for: getScreenDimensions\n            .mockResolvedValueOnce({\n                body: {\n                    offsetHeight: 0,\n                    scrollHeight: 0,\n                },\n                html: {\n                    clientHeight: 0,\n                    clientWidth: 0,\n                    offsetHeight: 0,\n                    scrollHeight: 0,\n                    scrollWidth: 0,\n                },\n                window: {\n                    devicePixelRatio: 1,\n                    innerHeight: 768,\n                    innerWidth: 1024,\n                    outerHeight: 768,\n                    outerWidth: 1024,\n                    screenHeight: 0,\n                    screenWidth: 0,\n                },\n            })\n\n        expect(await getEnrichedInstanceData(MOCKED_EXECUTOR, instanceOptions, false)).toMatchSnapshot()\n    })\n\n    it('should be able to enrich the instance data with all the defaults for iOS with shadow padding', async () => {\n        const instanceOptions = {\n            addressBarShadowPadding: 6,\n            toolBarShadowPadding: 6,\n            browserName: 'browserName',\n            browserVersion: 'browserVersion',\n            deviceName: 'deviceName',\n            logName: 'logName',\n            name: 'name',\n            nativeWebScreenshot: false,\n            platformName: 'iOS',\n            platformVersion: '12.4',\n        }\n        const MOCKED_EXECUTOR = vi\n            .fn()\n            // getEnrichedInstanceData for: getScreenDimensions\n            .mockResolvedValueOnce({\n                body: {\n                    offsetHeight: 0,\n                    scrollHeight: 0,\n                },\n                html: {\n                    clientHeight: 0,\n                    clientWidth: 0,\n                    offsetHeight: 0,\n                    scrollHeight: 0,\n                    scrollWidth: 0,\n                },\n                window: {\n                    devicePixelRatio: 1,\n                    innerHeight: 768,\n                    innerWidth: 1024,\n                    outerHeight: 768,\n                    outerWidth: 1024,\n                    screenHeight: 0,\n                    screenWidth: 0,\n                },\n            })\n\n        expect(await getEnrichedInstanceData(MOCKED_EXECUTOR, instanceOptions, true)).toMatchSnapshot()\n    })\n})\n"]}