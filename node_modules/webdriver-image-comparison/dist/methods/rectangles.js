"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.determineDeviceBlockOuts = exports.determineIgnoreRegions = exports.isWdioElement = exports.determineStatusAddressToolBarRectangles = exports.determineScreenRectangles = exports.determineElementRectangles = void 0;
var utils_js_1 = require("../helpers/utils.js");
var elementPosition_js_1 = require("./elementPosition.js");
var constants_js_1 = require("../helpers/constants.js");
var getIosStatusAddressToolBarOffsets_js_1 = __importDefault(require("../clientSideScripts/getIosStatusAddressToolBarOffsets.js"));
var getAndroidStatusAddressToolBarOffsets_js_1 = __importDefault(require("../clientSideScripts/getAndroidStatusAddressToolBarOffsets.js"));
function determineElementRectangles(_a) {
    var executor = _a.executor, base64Image = _a.base64Image, options = _a.options, element = _a.element;
    return __awaiter(this, void 0, void 0, function () {
        var devicePixelRatio, innerHeight, isAndroid, isAndroidNativeWebScreenshot, isIOS, isLandscape, height, elementPosition, selectorMessage, message;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    devicePixelRatio = options.devicePixelRatio, innerHeight = options.innerHeight, isAndroid = options.isAndroid, isAndroidNativeWebScreenshot = options.isAndroidNativeWebScreenshot, isIOS = options.isIOS, isLandscape = options.isLandscape;
                    height = (0, utils_js_1.getScreenshotSize)(base64Image, devicePixelRatio).height;
                    if (!isIOS) return [3, 2];
                    return [4, (0, elementPosition_js_1.getElementPositionIos)(executor, element, { isLandscape: isLandscape })];
                case 1:
                    elementPosition = _b.sent();
                    return [3, 6];
                case 2:
                    if (!isAndroid) return [3, 4];
                    return [4, (0, elementPosition_js_1.getElementPositionAndroid)(executor, element, { isAndroidNativeWebScreenshot: isAndroidNativeWebScreenshot, isLandscape: isLandscape })];
                case 3:
                    elementPosition = _b.sent();
                    return [3, 6];
                case 4: return [4, (0, elementPosition_js_1.getElementPositionDesktop)(executor, element, { innerHeight: innerHeight, screenshotHeight: height })];
                case 5:
                    elementPosition = _b.sent();
                    _b.label = 6;
                case 6:
                    if (elementPosition.height === 0 || elementPosition.width === 0) {
                        selectorMessage = ' ';
                        if (element.selector) {
                            selectorMessage = ", with selector \"$(".concat(element.selector, ")\",");
                        }
                        message = "The element".concat(selectorMessage, "is not visible. The dimensions are ").concat(elementPosition.width, "x").concat(elementPosition.height);
                        throw new Error(message);
                    }
                    return [2, (0, utils_js_1.calculateDprData)({
                            height: elementPosition.height,
                            width: elementPosition.width,
                            x: elementPosition.x,
                            y: elementPosition.y,
                        }, devicePixelRatio)];
            }
        });
    });
}
exports.determineElementRectangles = determineElementRectangles;
function determineScreenRectangles(base64Image, options) {
    var devicePixelRatio = options.devicePixelRatio, innerHeight = options.innerHeight, innerWidth = options.innerWidth, isIOS = options.isIOS, isAndroidChromeDriverScreenshot = options.isAndroidChromeDriverScreenshot, isAndroidNativeWebScreenshot = options.isAndroidNativeWebScreenshot, isLandscape = options.isLandscape;
    var _a = (0, utils_js_1.getScreenshotSize)(base64Image, devicePixelRatio), height = _a.height, width = _a.width;
    var screenshotWidth = isIOS || isAndroidChromeDriverScreenshot ? width : innerWidth;
    var screenshotHeight = isIOS || isAndroidNativeWebScreenshot ? height : innerHeight;
    var isRotated = isLandscape && height > width;
    return (0, utils_js_1.calculateDprData)({
        height: isRotated ? screenshotWidth : screenshotHeight,
        width: isRotated ? screenshotHeight : screenshotWidth,
        x: 0,
        y: 0,
    }, devicePixelRatio);
}
exports.determineScreenRectangles = determineScreenRectangles;
function determineStatusAddressToolBarRectangles(executor, options) {
    return __awaiter(this, void 0, void 0, function () {
        var blockOutSideBar, blockOutStatusBar, blockOutToolBar, isAndroidNativeWebScreenshot, isHybridApp, isLandscape, isMobile, isViewPortScreenshot, platformName, rectangles, _a, sideBar, statusAddressBar, toolBar;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    blockOutSideBar = options.blockOutSideBar, blockOutStatusBar = options.blockOutStatusBar, blockOutToolBar = options.blockOutToolBar, isAndroidNativeWebScreenshot = options.isAndroidNativeWebScreenshot, isHybridApp = options.isHybridApp, isLandscape = options.isLandscape, isMobile = options.isMobile, isViewPortScreenshot = options.isViewPortScreenshot, platformName = options.platformName;
                    rectangles = [];
                    if (!(isViewPortScreenshot &&
                        isMobile &&
                        ((0, utils_js_1.checkAndroidNativeWebScreenshot)(platformName, isAndroidNativeWebScreenshot) || (0, utils_js_1.checkIsIos)(platformName)))) return [3, 2];
                    return [4, ((0, utils_js_1.checkIsIos)(platformName)
                            ? executor(getIosStatusAddressToolBarOffsets_js_1.default, constants_js_1.IOS_OFFSETS, isLandscape)
                            : executor(getAndroidStatusAddressToolBarOffsets_js_1.default, constants_js_1.ANDROID_OFFSETS, {
                                isHybridApp: isHybridApp,
                                isLandscape: isLandscape,
                            }))];
                case 1:
                    _a = (_b.sent()), sideBar = _a.sideBar, statusAddressBar = _a.statusAddressBar, toolBar = _a.toolBar;
                    if (blockOutStatusBar) {
                        rectangles.push(statusAddressBar);
                    }
                    if (blockOutToolBar) {
                        rectangles.push(toolBar);
                    }
                    if (blockOutSideBar) {
                        rectangles.push(sideBar);
                    }
                    _b.label = 2;
                case 2: return [2, rectangles];
            }
        });
    });
}
exports.determineStatusAddressToolBarRectangles = determineStatusAddressToolBarRectangles;
function isWdioElement(x) {
    if (!(0, utils_js_1.isObject)(x)) {
        return false;
    }
    var region = x;
    var keys = ['selector', 'elementId'];
    return keys.every(function (key) { return typeof region[key] === 'string'; });
}
exports.isWdioElement = isWdioElement;
function validateIgnoreRegion(x) {
    if (!(0, utils_js_1.isObject)(x)) {
        return false;
    }
    var region = x;
    var keys = ['height', 'width', 'x', 'y'];
    return keys.every(function (key) { return typeof region[key] === 'number'; });
}
function formatErrorMessage(item, message) {
    var formattedItem = (0, utils_js_1.isObject)(item) ? JSON.stringify(item) : item;
    return "".concat(formattedItem, " ").concat(message);
}
function splitIgnores(items) {
    var elements = [];
    var regions = [];
    var errorMessages = [];
    for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
        var item = items_1[_i];
        if (Array.isArray(item)) {
            for (var _a = 0, item_1 = item; _a < item_1.length; _a++) {
                var nestedItem = item_1[_a];
                if (!isWdioElement(nestedItem)) {
                    errorMessages.push(formatErrorMessage(nestedItem, 'is not a valid WebdriverIO element'));
                }
                else {
                    elements.push(nestedItem);
                }
            }
        }
        else if (isWdioElement(item)) {
            elements.push(item);
        }
        else if (validateIgnoreRegion(item)) {
            regions.push(item);
        }
        else {
            errorMessages.push(formatErrorMessage(item, 'is not a valid WebdriverIO element or region'));
        }
    }
    if (errorMessages.length > 0) {
        throw new Error('Invalid elements or regions: ' + errorMessages.join(', '));
    }
    return { elements: elements, regions: regions };
}
function getRegionsFromElements(elements, getElementRect) {
    return __awaiter(this, void 0, void 0, function () {
        var regions, _i, elements_1, element, region;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    regions = [];
                    _i = 0, elements_1 = elements;
                    _a.label = 1;
                case 1:
                    if (!(_i < elements_1.length)) return [3, 4];
                    element = elements_1[_i];
                    return [4, getElementRect(element.elementId)];
                case 2:
                    region = _a.sent();
                    regions.push(region);
                    _a.label = 3;
                case 3:
                    _i++;
                    return [3, 1];
                case 4: return [2, regions];
            }
        });
    });
}
function determineIgnoreRegions(ignores, getElementRect) {
    return __awaiter(this, void 0, void 0, function () {
        var awaitedIgnores, _a, elements, regions, regionsFromElements;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4, Promise.all(ignores)];
                case 1:
                    awaitedIgnores = _b.sent();
                    _a = splitIgnores(awaitedIgnores), elements = _a.elements, regions = _a.regions;
                    return [4, getRegionsFromElements(elements, getElementRect)];
                case 2:
                    regionsFromElements = _b.sent();
                    return [2, __spreadArray(__spreadArray([], regions, true), regionsFromElements, true).map(function (region) { return ({
                            x: Math.round(region.x),
                            y: Math.round(region.y),
                            width: Math.round(region.width),
                            height: Math.round(region.height),
                        }); })];
            }
        });
    });
}
exports.determineIgnoreRegions = determineIgnoreRegions;
function determineDeviceBlockOuts(_a) {
    var isAndroid = _a.isAndroid, screenCompareOptions = _a.screenCompareOptions, instanceData = _a.instanceData;
    return __awaiter(this, void 0, void 0, function () {
        var rectangles, blockOutStatusBar, blockOutToolBar, _b, homeBar, statusBar;
        return __generator(this, function (_c) {
            rectangles = [];
            blockOutStatusBar = screenCompareOptions.blockOutStatusBar, blockOutToolBar = screenCompareOptions.blockOutToolBar;
            _b = instanceData.devicePlatformRect, homeBar = _b.homeBar, statusBar = _b.statusBar;
            if (blockOutStatusBar) {
                rectangles.push(statusBar);
            }
            if (isAndroid) {
            }
            else if (blockOutToolBar) {
                rectangles.push(homeBar);
            }
            return [2, rectangles];
        });
    });
}
exports.determineDeviceBlockOuts = determineDeviceBlockOuts;
//# sourceMappingURL=rectangles.js.map