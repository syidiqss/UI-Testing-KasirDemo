{"version":3,"file":"rectangles.js","sourceRoot":"","sources":["../../src/methods/rectangles.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ChainablePromiseElement } from 'webdriverio'\nimport { calculateDprData, checkAndroidNativeWebScreenshot, checkIsIos, getScreenshotSize, isObject } from '../helpers/utils.js'\nimport { getElementPositionAndroid, getElementPositionDesktop, getElementPositionIos } from './elementPosition.js'\nimport { IOS_OFFSETS, ANDROID_OFFSETS } from '../helpers/constants.js'\nimport type {\n    ElementRectangles,\n    RectanglesOutput,\n    ScreenRectanglesOptions,\n    StatusAddressToolBarRectangles,\n    StatusAddressToolBarRectanglesOptions,\n} from './rectangles.interfaces'\nimport type { Executor, GetElementRect } from './methods.interfaces'\nimport getIosStatusAddressToolBarOffsets from '../clientSideScripts/getIosStatusAddressToolBarOffsets.js'\nimport getAndroidStatusAddressToolBarOffsets from '../clientSideScripts/getAndroidStatusAddressToolBarOffsets.js'\nimport type { StatusAddressToolBarOffsets } from '../clientSideScripts/statusAddressToolBarOffsets.interfaces'\nimport type { CheckScreenMethodOptions } from '../commands/screen.interfaces.js'\nimport type { InstanceData } from './instanceData.interfaces.js'\n\n/**\n * Determine the element rectangles on the page / screenshot\n */\nexport async function determineElementRectangles({\n    executor,\n    base64Image,\n    options,\n    element,\n}: ElementRectangles): Promise<RectanglesOutput> {\n    // Determine screenshot data\n    const {\n        devicePixelRatio,\n        innerHeight,\n        isAndroid,\n        isAndroidNativeWebScreenshot,\n        isIOS,\n        isLandscape,\n    } = options\n    const { height } = getScreenshotSize(base64Image, devicePixelRatio)\n    let elementPosition\n\n    // Determine the element position on the screenshot\n    if (isIOS) {\n        elementPosition = await getElementPositionIos(executor, element, { isLandscape })\n    } else if (isAndroid) {\n        elementPosition = await getElementPositionAndroid(executor, element, { isAndroidNativeWebScreenshot, isLandscape })\n    } else {\n        elementPosition = await getElementPositionDesktop(executor, element, { innerHeight, screenshotHeight: height })\n    }\n\n    // Validate if the element is visible\n    if (elementPosition.height === 0 || elementPosition.width === 0) {\n        let selectorMessage = ' '\n        if (element.selector) {\n            selectorMessage = `, with selector \"$(${element.selector})\",`\n        }\n        const message = `The element${selectorMessage}is not visible. The dimensions are ${elementPosition.width}x${elementPosition.height}`\n        throw new Error(message)\n    }\n\n    // Determine the rectangles based on the device pixel ratio\n    return calculateDprData(\n        {\n            height: elementPosition.height,\n            width: elementPosition.width,\n            x: elementPosition.x,\n            y: elementPosition.y,\n        },\n        devicePixelRatio,\n    )\n}\n\n/**\n * Determine the rectangles of the screen for the screenshot\n */\nexport function determineScreenRectangles(base64Image: string, options: ScreenRectanglesOptions): RectanglesOutput {\n    // Determine screenshot data\n    const {\n        devicePixelRatio,\n        innerHeight,\n        innerWidth,\n        isIOS,\n        isAndroidChromeDriverScreenshot,\n        isAndroidNativeWebScreenshot,\n        isLandscape,\n    } = options\n    const { height, width } = getScreenshotSize(base64Image, devicePixelRatio)\n\n    // Determine the width\n    const screenshotWidth = isIOS || isAndroidChromeDriverScreenshot ? width : innerWidth\n    const screenshotHeight = isIOS || isAndroidNativeWebScreenshot ? height : innerHeight\n    const isRotated = isLandscape && height > width\n\n    // Determine the rectangles\n    return calculateDprData(\n        {\n            height: isRotated ? screenshotWidth : screenshotHeight,\n            width: isRotated ? screenshotHeight : screenshotWidth,\n            x: 0,\n            y: 0,\n        },\n        devicePixelRatio,\n    )\n}\n\n/**\n * Determine the rectangles for the mobile devices\n */\nexport async function determineStatusAddressToolBarRectangles(\n    executor: Executor,\n    options: StatusAddressToolBarRectanglesOptions,\n): Promise<StatusAddressToolBarRectangles> {\n    const {\n        blockOutSideBar,\n        blockOutStatusBar,\n        blockOutToolBar,\n        isAndroidNativeWebScreenshot,\n        isHybridApp,\n        isLandscape,\n        isMobile,\n        isViewPortScreenshot,\n        platformName,\n    } = options\n    const rectangles = []\n\n    if (\n        isViewPortScreenshot &&\n        isMobile &&\n        (checkAndroidNativeWebScreenshot(platformName, isAndroidNativeWebScreenshot) || checkIsIos(platformName))\n    ) {\n        const { sideBar, statusAddressBar, toolBar } = (await (checkIsIos(platformName)\n            ? executor(getIosStatusAddressToolBarOffsets, IOS_OFFSETS, isLandscape)\n            : executor(getAndroidStatusAddressToolBarOffsets, ANDROID_OFFSETS, {\n                isHybridApp,\n                isLandscape,\n            }))) as StatusAddressToolBarOffsets\n\n        if (blockOutStatusBar) {\n            rectangles.push(statusAddressBar)\n        }\n\n        if (blockOutToolBar) {\n            rectangles.push(toolBar)\n        }\n\n        if (blockOutSideBar) {\n            rectangles.push(sideBar)\n        }\n    }\n\n    return rectangles\n}\n\n/**\n * Validate that the element is a WebdriverIO element\n */\nexport function isWdioElement(x: unknown) {\n    if (!isObject(x)) {\n        return false\n    }\n\n    const region = x as WebdriverIO.Element\n    const keys: (keyof WebdriverIO.Element)[] = ['selector', 'elementId']\n\n    return keys.every(key => typeof region[key] === 'string')\n}\n\n/**\n * Validate that the object is a valid ignore region\n */\nfunction validateIgnoreRegion(x: unknown) {\n    if (!isObject(x)) {\n        return false\n    }\n\n    const region = x as RectanglesOutput\n    const keys: (keyof RectanglesOutput)[] = ['height', 'width', 'x', 'y']\n\n    return keys.every(key => typeof region[key] === 'number')\n}\n\n/**\n * Format the error message\n */\nfunction formatErrorMessage(item:unknown, message:string) {\n    const formattedItem = isObject(item) ? JSON.stringify(item) : item\n    return `${formattedItem} ${message}`\n}\n\n/**\n * Split the ignores into elements and regions and throw an error if\n * an element is not a valid WebdriverIO element/region\n */\nfunction splitIgnores(items:unknown[]): { elements: WebdriverIO.Element[], regions: RectanglesOutput[] }{\n    const elements = []\n    const regions = []\n    const errorMessages = []\n\n    for (const item of items) {\n        if (Array.isArray(item)) {\n            for (const nestedItem of item) {\n                if (!isWdioElement(nestedItem)) {\n                    errorMessages.push(formatErrorMessage(nestedItem, 'is not a valid WebdriverIO element'))\n                } else {\n                    elements.push(nestedItem as WebdriverIO.Element)\n                }\n            }\n        } else if (isWdioElement(item)) {\n            elements.push(item as WebdriverIO.Element)\n        } else if (validateIgnoreRegion(item)) {\n            regions.push(item as RectanglesOutput)\n        } else {\n            errorMessages.push(formatErrorMessage(item, 'is not a valid WebdriverIO element or region'))\n        }\n    }\n\n    if (errorMessages.length > 0) {\n        throw new Error('Invalid elements or regions: ' + errorMessages.join(', '))\n    }\n\n    return { elements, regions }\n}\n\n/**\n * Get the regions from the elements\n */\nasync function getRegionsFromElements(\n    elements: WebdriverIO.Element[],\n    getElementRect: GetElementRect,\n): Promise<RectanglesOutput[]> {\n    const regions = []\n    for (const element of elements) {\n        const region = await getElementRect(element.elementId)\n        regions.push(region)\n    }\n\n    return regions\n}\n\n/**\n * Translate ignores to regions\n */\nexport async function determineIgnoreRegions(\n    ignores: (RectanglesOutput | WebdriverIO.Element | ChainablePromiseElement<WebdriverIO.Element>)[],\n    getElementRect: GetElementRect,\n): Promise<RectanglesOutput[]>{\n    const awaitedIgnores = await Promise.all(ignores)\n    const { elements, regions } = splitIgnores(awaitedIgnores)\n    const regionsFromElements = await getRegionsFromElements(elements, getElementRect)\n\n    return [...regions, ...regionsFromElements]\n        .map((region:RectanglesOutput) => ({\n            x: Math.round(region.x),\n            y: Math.round(region.y),\n            width: Math.round(region.width),\n            height: Math.round(region.height),\n        }))\n}\n\n/**\n * Determine the device block outs\n */\nexport async function determineDeviceBlockOuts({ isAndroid, screenCompareOptions, instanceData }: {\n    isAndroid: boolean,\n    screenCompareOptions: CheckScreenMethodOptions,\n    instanceData: InstanceData,\n}){\n    const rectangles: RectanglesOutput[] = []\n    const { blockOutStatusBar, blockOutToolBar } = screenCompareOptions\n    const { devicePlatformRect:{ homeBar, statusBar } } = instanceData\n\n    if (blockOutStatusBar){\n        rectangles.push(statusBar)\n    }\n    if (isAndroid){\n        //\n    } else if (blockOutToolBar){\n        rectangles.push(homeBar)\n    }\n\n    // @TODO: This is from the native-app-compare module, I can't really find the diffs between the two\n    // if (options.blockOutStatusBar) {\n    //     rectangles.push(deviceInfo.rectangles.statusBar)\n    // }\n\n    // if (driver.isAndroid && options.blockOutNavigationBar) {\n    //     rectangles.push(deviceInfo.rectangles.androidNavigationBar)\n    // }\n\n    return rectangles\n}\n"]}