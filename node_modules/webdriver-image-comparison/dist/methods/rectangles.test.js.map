{"version":3,"file":"rectangles.test.js","sourceRoot":"","sources":["../../src/methods/rectangles.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, it, expect, vi } from 'vitest'\nimport { determineElementRectangles, determineScreenRectangles, determineStatusAddressToolBarRectangles } from './rectangles.js'\nimport { IMAGE_STRING } from '../mocks/mocks.js'\n\ndescribe('rectangles', () => {\n    describe('determineElementRectangles', () => {\n        it('should determine them for iOS', async () => {\n            const options = {\n                isAndroid: false,\n                devicePixelRatio: 2,\n                isAndroidNativeWebScreenshot: false,\n                innerHeight: 678,\n                isIOS: true,\n                isLandscape: false,\n            }\n            const MOCKED_EXECUTOR = vi\n                .fn()\n                // getElementPositionIos for: getIosStatusAddressToolBarOffsets\n                .mockResolvedValueOnce({\n                    sideBar: {\n                        height: 240,\n                        width: 120,\n                        x: 0,\n                        y: 70,\n                    },\n                    statusAddressBar: {\n                        height: 94,\n                        width: 375,\n                        x: 0,\n                        y: 0,\n                    },\n                    toolBar: {\n                        height: 5,\n                        width: 135,\n                        x: 120,\n                        y: 799,\n                    },\n                })\n                // getElementPositionIos for: getElementPositionTopScreenNativeMobile\n                .mockResolvedValueOnce({\n                    height: 120,\n                    width: 120,\n                    x: 100,\n                    y: 10,\n                })\n\n            expect(\n                await determineElementRectangles({\n                    executor: MOCKED_EXECUTOR,\n                    base64Image: IMAGE_STRING,\n                    options,\n                    element: 'element',\n                }),\n            ).toMatchSnapshot()\n        })\n\n        it('should determine them for Android Native webscreenshot', async () => {\n            const options = {\n                isAndroid: true,\n                devicePixelRatio: 3,\n                isAndroidNativeWebScreenshot: true,\n                innerHeight: 678,\n                isIOS: false,\n                isLandscape: false,\n            }\n            const MOCKED_EXECUTOR = vi\n                .fn()\n                // getElementPositionAndroid for: getAndroidStatusAddressToolBarOffsets\n                .mockResolvedValueOnce({\n                    sideBar: {\n                        height: 0,\n                        width: 0,\n                        x: 0,\n                        y: 0,\n                    },\n                    statusAddressBar: {\n                        height: 20,\n                        width: 375,\n                        x: 0,\n                        y: 0,\n                    },\n                    toolBar: {\n                        height: 5,\n                        width: 135,\n                        x: 120,\n                        y: 799,\n                    },\n                })\n                // getElementPositionIos for: getElementPositionTopScreenNativeMobile\n                .mockResolvedValueOnce({\n                    height: 120,\n                    width: 120,\n                    x: 100,\n                    y: 10,\n                })\n\n            expect(\n                await determineElementRectangles({\n                    executor: MOCKED_EXECUTOR,\n                    base64Image: IMAGE_STRING,\n                    options,\n                    element: 'element',\n                }),\n            ).toMatchSnapshot()\n        })\n\n        it('should determine them for Android ChromeDriver', async () => {\n            const options = {\n                isAndroid: true,\n                devicePixelRatio: 1,\n                isAndroidNativeWebScreenshot: false,\n                innerHeight: 678,\n                isIOS: false,\n                isLandscape: false,\n            }\n            const MOCKED_EXECUTOR = vi\n                .fn()\n                // getElementPositionAndroid for: getElementPositionTopWindow\n                .mockResolvedValueOnce({\n                    height: 20,\n                    width: 375,\n                    x: 0,\n                    y: 0,\n                })\n\n            expect(\n                await determineElementRectangles({\n                    executor: MOCKED_EXECUTOR,\n                    base64Image: IMAGE_STRING,\n                    options,\n                    element: 'element',\n                }),\n            ).toMatchSnapshot()\n        })\n\n        it('should determine them for a desktop browser', async () => {\n            const options = {\n                isAndroid: false,\n                devicePixelRatio: 2,\n                isAndroidNativeWebScreenshot: false,\n                innerHeight: 500,\n                isIOS: false,\n                isLandscape: false,\n            }\n            const MOCKED_EXECUTOR = vi\n                .fn()\n                // getElementPositionDesktop for: getElementPositionTopWindow\n                .mockResolvedValueOnce({\n                    height: 20,\n                    width: 375,\n                    x: 12,\n                    y: 34,\n                })\n\n            expect(\n                await determineElementRectangles({\n                    executor: MOCKED_EXECUTOR,\n                    base64Image: IMAGE_STRING,\n                    options,\n                    element: 'element',\n                }),\n            ).toMatchSnapshot()\n        })\n\n        it('should throw an error when the element height is 0', async () => {\n            const options = {\n                isAndroid: false,\n                devicePixelRatio: 2,\n                isAndroidNativeWebScreenshot: false,\n                innerHeight: 500,\n                isIOS: false,\n                isLandscape: false,\n            }\n            const MOCKED_EXECUTOR = vi.fn().mockResolvedValueOnce({\n                height: 0,\n                width: 375,\n                x: 12,\n                y: 34,\n            })\n\n            try {\n                await determineElementRectangles({\n                    executor: MOCKED_EXECUTOR,\n                    base64Image: IMAGE_STRING,\n                    options,\n                    element: { selector: '#elementID' },\n                })\n                // Fail test if above expression doesn't throw anything.\n                expect(true).toBe(false)\n            } catch (e: unknown) {\n                expect((e as Error).message).toBe('The element, with selector \"$(#elementID)\",is not visible. The dimensions are 375x0')\n            }\n        })\n\n        it('should throw an error when the element width is 0', async () => {\n            const options = {\n                isAndroid: false,\n                devicePixelRatio: 2,\n                isAndroidNativeWebScreenshot: false,\n                innerHeight: 500,\n                isIOS: false,\n                isLandscape: false,\n            }\n            const MOCKED_EXECUTOR = vi.fn().mockResolvedValueOnce({\n                height: 375,\n                width: 0,\n                x: 12,\n                y: 34,\n            })\n\n            try {\n                await determineElementRectangles({\n                    executor: MOCKED_EXECUTOR,\n                    base64Image: IMAGE_STRING,\n                    options,\n                    element: { selector: '#elementID' },\n                })\n                // Fail test if above expression doesn't throw anything.\n                expect(true).toBe(false)\n            } catch (e: unknown) {\n                expect((e as Error).message).toBe('The element, with selector \"$(#elementID)\",is not visible. The dimensions are 0x375')\n            }\n        })\n\n        it('should throw an error when the element width is 0 and no element selector is provided', async () => {\n            const options = {\n                isAndroid: false,\n                devicePixelRatio: 2,\n                isAndroidNativeWebScreenshot: false,\n                innerHeight: 500,\n                isIOS: false,\n                isLandscape: false,\n            }\n            const MOCKED_EXECUTOR = vi.fn().mockResolvedValueOnce({\n                height: 375,\n                width: 0,\n                x: 12,\n                y: 34,\n            })\n\n            try {\n                await determineElementRectangles({\n                    executor: MOCKED_EXECUTOR,\n                    base64Image: IMAGE_STRING,\n                    options,\n                    element: {},\n                })\n                // Fail test if above expression doesn't throw anything.\n                expect(true).toBe(false)\n            } catch (e: unknown) {\n                expect((e as Error).message).toBe('The element is not visible. The dimensions are 0x375')\n            }\n        })\n    })\n\n    describe('determineScreenRectangles', () => {\n        it('should determine them for iOS', async () => {\n            const options = {\n                innerHeight: 553,\n                innerWidth: 375,\n                isAndroidNativeWebScreenshot: false,\n                isAndroidChromeDriverScreenshot: false,\n                isIOS: true,\n                devicePixelRatio: 2,\n                isLandscape: false,\n            }\n\n            expect(await determineScreenRectangles(IMAGE_STRING, options)).toMatchSnapshot()\n        })\n\n        it('should determine them for Android ChromeDriver', async () => {\n            const options = {\n                innerHeight: 553,\n                innerWidth: 375,\n                isAndroidNativeWebScreenshot: false,\n                isAndroidChromeDriverScreenshot: true,\n                isIOS: false,\n                devicePixelRatio: 2,\n                isLandscape: false,\n            }\n\n            expect(await determineScreenRectangles(IMAGE_STRING, options)).toMatchSnapshot()\n        })\n\n        it('should determine them for Android Native webscreenshot', async () => {\n            const options = {\n                innerHeight: 553,\n                innerWidth: 375,\n                isAndroidNativeWebScreenshot: true,\n                isAndroidChromeDriverScreenshot: false,\n                isIOS: false,\n                devicePixelRatio: 2,\n                isLandscape: false,\n            }\n\n            expect(await determineScreenRectangles(IMAGE_STRING, options)).toMatchSnapshot()\n        })\n    })\n\n    describe('determineStatusAddressToolBarRectangles', () => {\n        it('should determine the rectangles for the iOS with a status and toolbar blockout', async () => {\n            const options = {\n                blockOutSideBar: true,\n                blockOutStatusBar: true,\n                blockOutToolBar: true,\n                isAndroidNativeWebScreenshot: false,\n                isHybridApp: false,\n                isLandscape: false,\n                isMobile: true,\n                isViewPortScreenshot: true,\n                platformName: 'iOS',\n            }\n            const MOCKED_EXECUTOR = vi\n                .fn()\n                // determineStatusAddressToolBarRectangles for: getIosStatusAddressToolBarOffsets\n                .mockResolvedValueOnce({\n                    sideBar: {\n                        height: 240,\n                        width: 120,\n                        x: 0,\n                        y: 70,\n                    },\n                    statusAddressBar: {\n                        height: 94,\n                        width: 375,\n                        x: 0,\n                        y: 0,\n                    },\n                    toolBar: {\n                        height: 5,\n                        width: 135,\n                        x: 120,\n                        y: 799,\n                    },\n                })\n\n            expect(await determineStatusAddressToolBarRectangles(MOCKED_EXECUTOR, options)).toMatchSnapshot()\n        })\n\n        it('should determine the rectangles for the iOS without a status and toolbar blockout', async () => {\n            const options = {\n                blockOutSideBar: false,\n                blockOutStatusBar: false,\n                blockOutToolBar: false,\n                isAndroidNativeWebScreenshot: false,\n                isHybridApp: false,\n                isLandscape: false,\n                isMobile: true,\n                isViewPortScreenshot: true,\n                platformName: 'iOS',\n            }\n            const MOCKED_EXECUTOR = vi\n                .fn()\n                // determineStatusAddressToolBarRectangles for: getIosStatusAddressToolBarOffsets\n                .mockResolvedValueOnce({\n                    sideBar: {\n                        height: 240,\n                        width: 120,\n                        x: 0,\n                        y: 70,\n                    },\n                    statusAddressBar: {\n                        height: 94,\n                        width: 375,\n                        x: 0,\n                        y: 0,\n                    },\n                    toolBar: {\n                        height: 5,\n                        width: 135,\n                        x: 0,\n                        y: 799,\n                    },\n                })\n\n            expect(await determineStatusAddressToolBarRectangles(MOCKED_EXECUTOR, options)).toMatchSnapshot()\n        })\n\n        it('should determine the rectangles for Android with a status and toolbar blockout', async () => {\n            const options = {\n                blockOutSideBar: true,\n                blockOutStatusBar: true,\n                blockOutToolBar: true,\n                isAndroidNativeWebScreenshot: true,\n                isHybridApp: false,\n                isLandscape: false,\n                isMobile: true,\n                isViewPortScreenshot: true,\n                platformName: 'Android',\n            }\n            const MOCKED_EXECUTOR = vi\n                .fn()\n                // determineStatusAddressToolBarRectangles for: getAndroidStatusAddressToolBarOffsets\n                .mockResolvedValueOnce({\n                    sideBar: {\n                        height: 0,\n                        width: 0,\n                        x: 0,\n                        y: 0,\n                    },\n                    statusAddressBar: {\n                        height: 40,\n                        width: 320,\n                        x: 0,\n                        y: 0,\n                    },\n                    toolBar: {\n                        height: 100,\n                        width: 320,\n                        x: 0,\n                        y: 600,\n                    },\n                })\n\n            expect(await determineStatusAddressToolBarRectangles(MOCKED_EXECUTOR, options)).toMatchSnapshot()\n        })\n\n        it('should determine the rectangles that there are no rectangles for this device', async () => {\n            const options = {\n                blockOutSideBar: false,\n                blockOutStatusBar: false,\n                blockOutToolBar: false,\n                isAndroidNativeWebScreenshot: false,\n                isHybridApp: false,\n                isLandscape: false,\n                isMobile: true,\n                isViewPortScreenshot: false,\n                platformName: 'Android',\n            }\n            const MOCKED_EXECUTOR = vi\n                .fn()\n                // determineStatusAddressToolBarRectangles for: getAndroidStatusAddressToolBarOffsets\n                .mockResolvedValueOnce({\n                    statusAddressBar: {\n                        height: 40,\n                        width: 320,\n                        x: 0,\n                        y: 0,\n                    },\n                    toolBar: {\n                        height: 100,\n                        width: 320,\n                        x: 0,\n                        y: 600,\n                    },\n                })\n\n            expect(await determineStatusAddressToolBarRectangles(MOCKED_EXECUTOR, options)).toMatchSnapshot()\n        })\n    })\n})\n"]}