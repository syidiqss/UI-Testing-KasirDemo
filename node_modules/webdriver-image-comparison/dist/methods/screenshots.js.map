{"version":3,"file":"screenshots.js","sourceRoot":"","sources":["../../src/methods/screenshots.ts"],"names":[],"mappings":"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","sourcesContent":["import scrollToPosition from '../clientSideScripts/scrollToPosition.js'\nimport getDocumentScrollHeight from '../clientSideScripts/getDocumentScrollHeight.js'\nimport getAndroidStatusAddressToolBarOffsets from '../clientSideScripts/getAndroidStatusAddressToolBarOffsets.js'\nimport getIosStatusAddressToolBarOffsets from '../clientSideScripts/getIosStatusAddressToolBarOffsets.js'\nimport { ANDROID_OFFSETS, IOS_OFFSETS } from '../helpers/constants.js'\nimport { calculateDprData, getScreenshotSize, waitFor } from '../helpers/utils.js'\nimport type { Executor, TakeScreenShot } from './methods.interfaces'\nimport type {\n    FullPageScreenshotOptions,\n    FullPageScreenshotNativeMobileOptions,\n    FullPageScreenshotDataOptions,\n    FullPageScreenshotsData,\n} from './screenshots.interfaces'\nimport type { StatusAddressToolBarOffsets } from '../clientSideScripts/statusAddressToolBarOffsets.interfaces'\nimport hideRemoveElements from '../clientSideScripts/hideRemoveElements.js'\nimport hideScrollBars from '../clientSideScripts/hideScrollbars.js'\nimport { LogLevel } from '../helpers/options.interfaces'\n\n/**\n * Take a full page screenshots for desktop / iOS / Android\n */\nexport async function getBase64FullPageScreenshotsData(\n    takeScreenshot: TakeScreenShot,\n    executor: Executor,\n    options: FullPageScreenshotDataOptions,\n): Promise<FullPageScreenshotsData> {\n    const {\n        addressBarShadowPadding,\n        devicePixelRatio,\n        fullPageScrollTimeout,\n        hideAfterFirstScroll,\n        innerHeight,\n        isAndroid,\n        isAndroidNativeWebScreenshot,\n        isAndroidChromeDriverScreenshot,\n        isHybridApp,\n        isIOS,\n        isLandscape,\n        logLevel,\n        screenHeight,\n        screenWidth,\n        toolBarShadowPadding,\n    } = options\n    const desktopOptions = {\n        devicePixelRatio,\n        fullPageScrollTimeout,\n        hideAfterFirstScroll,\n        innerHeight,\n        logLevel,\n    }\n    const nativeMobileOptions = {\n        ...desktopOptions,\n        addressBarShadowPadding,\n        screenHeight,\n        screenWidth,\n        toolBarShadowPadding,\n    }\n\n    if (isAndroid && isAndroidNativeWebScreenshot) {\n        // Create a fullpage screenshot for Android when native screenshot (so including status, address and toolbar) is created\n        const {\n            safeArea,\n            screenHeight,\n            screenWidth,\n            sideBar: { width: sideBarWidth },\n            statusAddressBar: { height: statusAddressBarHeight },\n        } = <StatusAddressToolBarOffsets>(\n            await executor(getAndroidStatusAddressToolBarOffsets, ANDROID_OFFSETS, { isHybridApp, isLandscape })\n        )\n\n        const androidNativeMobileOptions = {\n            ...nativeMobileOptions,\n            isLandscape,\n            safeArea,\n            screenHeight,\n            screenWidth,\n            sideBarWidth,\n            statusAddressBarHeight,\n        }\n\n        return getFullPageScreenshotsDataNativeMobile(takeScreenshot, executor, androidNativeMobileOptions)\n    } else if (isAndroid && isAndroidChromeDriverScreenshot) {\n        const chromeDriverOptions = { devicePixelRatio, fullPageScrollTimeout, hideAfterFirstScroll, innerHeight, logLevel }\n\n        // Create a fullpage screenshot for Android when the ChromeDriver provides the screenshots\n        return getFullPageScreenshotsDataAndroidChromeDriver(takeScreenshot, executor, chromeDriverOptions)\n    } else if (isIOS) {\n        // Create a fullpage screenshot for iOS. iOS screenshots will hold the status, address and toolbar so they need to be removed\n        const {\n            safeArea,\n            screenHeight,\n            screenWidth,\n            sideBar: { width: sideBarWidth },\n            statusAddressBar: { height: statusAddressBarHeight },\n            toolBar: { y: iosHomeBarY },\n        } = <StatusAddressToolBarOffsets> await executor(getIosStatusAddressToolBarOffsets, IOS_OFFSETS, isLandscape)\n        const iosNativeMobileOptions = {\n            ...nativeMobileOptions,\n            iosHomeBarY,\n            isLandscape,\n            safeArea,\n            screenHeight,\n            screenWidth,\n            sideBarWidth,\n            statusAddressBarHeight,\n        }\n\n        return getFullPageScreenshotsDataNativeMobile(takeScreenshot, executor, iosNativeMobileOptions)\n    }\n\n    // Create a fullpage screenshot for all desktops\n    return getFullPageScreenshotsDataDesktop(takeScreenshot, executor, desktopOptions)\n}\n\n/**\n * Take a full page screenshots for native mobile\n */\nexport async function getFullPageScreenshotsDataNativeMobile(\n    takeScreenshot: TakeScreenShot,\n    executor: Executor,\n    options: FullPageScreenshotNativeMobileOptions,\n): Promise<FullPageScreenshotsData> {\n    const viewportScreenshots = []\n\n    // The addressBarShadowPadding and toolBarShadowPadding is used because the viewport has a shadow on the address and the tool bar\n    // so the cutout of the viewport needs to be a little bit smaller\n    const {\n        addressBarShadowPadding,\n        devicePixelRatio,\n        fullPageScrollTimeout,\n        hideAfterFirstScroll,\n        innerHeight,\n        iosHomeBarY,\n        safeArea,\n        isLandscape,\n        logLevel,\n        statusAddressBarHeight,\n        screenHeight,\n        sideBarWidth,\n        toolBarShadowPadding,\n    } = options\n    const iosViewportHeight =\n        innerHeight -\n        addressBarShadowPadding -\n        toolBarShadowPadding -\n        // This is for iOS devices in landscape mode with a notch. They have a home bar at the bottom of the screen\n        // which is not part of the bottom toolbar. This home bar is not part of the viewport and needs to be subtracted\n        // 1133 is for iPads with a home bar, see the constants\n        (iosHomeBarY && ((isLandscape && safeArea) || screenHeight >= 1133) ? screenHeight - iosHomeBarY : 0)\n\n    // Start with an empty array, during the scroll it will be filled because a page could also have a lazy loading\n    const amountOfScrollsArray = []\n    let scrollHeight: number | undefined\n    let screenshotSizeHeight: number | undefined\n    let screenshotSizeWidth: number | undefined\n    let isRotated = false\n\n    for (let i = 0; i <= amountOfScrollsArray.length; i++) {\n        // Determine and start scrolling\n        const scrollY = iosViewportHeight * i\n        await executor(scrollToPosition, scrollY)\n\n        // Hide scrollbars before taking a screenshot, we don't want them, on the screenshot\n        await executor(hideScrollBars, true)\n\n        // Simply wait the amount of time specified for lazy-loading\n        await waitFor(fullPageScrollTimeout)\n\n        // Elements that need to be hidden after the first scroll for a fullpage scroll\n        if (i === 1 && hideAfterFirstScroll.length > 0) {\n            try {\n                await executor(hideRemoveElements, { hide: hideAfterFirstScroll, remove: [] }, true)\n            } catch (e) {\n                logHiddenRemovedError(e, logLevel)\n            }\n        }\n\n        // Take the screenshot and get the width\n        const screenshot = await takeBase64Screenshot(takeScreenshot)\n        screenshotSizeHeight = getScreenshotSize(screenshot, devicePixelRatio).height - sideBarWidth\n        screenshotSizeWidth = getScreenshotSize(screenshot, devicePixelRatio).width - sideBarWidth\n        isRotated = Boolean(isLandscape && screenshotSizeHeight > screenshotSizeWidth)\n\n        // Determine scroll height and check if we need to scroll again\n        scrollHeight = await executor(getDocumentScrollHeight)\n        if (scrollHeight && (scrollY + iosViewportHeight < scrollHeight)) {\n            amountOfScrollsArray.push(amountOfScrollsArray.length)\n        }\n        // There is no else\n\n        // The height of the image of the last 1 could be different\n        const imageHeight = amountOfScrollsArray.length === i && scrollHeight\n            ? scrollHeight - scrollY\n            : iosViewportHeight\n\n        // The starting position for cropping could be different for the last image\n        // The cropping always needs to start at status and address bar height and the address bar shadow padding\n        const imageYPosition =\n            (amountOfScrollsArray.length === i ? innerHeight - imageHeight : 0) + statusAddressBarHeight + addressBarShadowPadding\n\n        // Store all the screenshot data in the screenshot object\n        viewportScreenshots.push({\n            ...calculateDprData(\n                {\n                    canvasWidth: isRotated ? screenshotSizeHeight : screenshotSizeWidth,\n                    canvasYPosition: scrollY,\n                    imageHeight: imageHeight,\n                    imageWidth: isRotated ? screenshotSizeHeight : screenshotSizeWidth,\n                    imageXPosition: sideBarWidth,\n                    imageYPosition: imageYPosition,\n                },\n                devicePixelRatio,\n            ),\n            screenshot,\n        })\n\n        // Show scrollbars again\n        await executor(hideScrollBars, false)\n    }\n\n    // Put back the hidden elements to visible\n    if (hideAfterFirstScroll.length > 0) {\n        try {\n            await executor(hideRemoveElements, { hide: hideAfterFirstScroll, remove: [] }, false)\n        } catch (e) {\n            logHiddenRemovedError(e, logLevel)\n        }\n    }\n\n    if (!scrollHeight || !screenshotSizeHeight || !screenshotSizeWidth) {\n        throw new Error('Couldn\\'t determine scroll height or screenshot size')\n    }\n\n    return {\n        ...calculateDprData(\n            {\n                fullPageHeight: scrollHeight - addressBarShadowPadding - toolBarShadowPadding,\n                fullPageWidth: isRotated ? screenshotSizeHeight : screenshotSizeWidth,\n            },\n            devicePixelRatio,\n        ),\n        data: viewportScreenshots,\n    }\n}\n\n/**\n * Take a full page screenshot for Android with Chromedriver\n */\nexport async function getFullPageScreenshotsDataAndroidChromeDriver(\n    takeScreenshot: TakeScreenShot,\n    executor: Executor,\n    options: FullPageScreenshotOptions,\n): Promise<FullPageScreenshotsData> {\n    const viewportScreenshots = []\n    const { devicePixelRatio, fullPageScrollTimeout, hideAfterFirstScroll, innerHeight, logLevel } = options\n\n    // Start with an empty array, during the scroll it will be filled because a page could also have a lazy loading\n    const amountOfScrollsArray = []\n    let scrollHeight: number | undefined\n    let screenshotSize\n\n    for (let i = 0; i <= amountOfScrollsArray.length; i++) {\n        // Determine and start scrolling\n        const scrollY = innerHeight * i\n        await executor(scrollToPosition, scrollY)\n\n        // Hide scrollbars before taking a screenshot, we don't want them, on the screenshot\n        await executor(hideScrollBars, true)\n\n        // Simply wait the amount of time specified for lazy-loading\n        await waitFor(fullPageScrollTimeout)\n\n        // Elements that need to be hidden after the first scroll for a fullpage scroll\n        if (i === 1 && hideAfterFirstScroll.length > 0) {\n            try {\n                await executor(hideRemoveElements, { hide: hideAfterFirstScroll, remove: [] }, true)\n            } catch (e) {\n                logHiddenRemovedError(e, logLevel)\n            }\n        }\n\n        // Take the screenshot\n        const screenshot = await takeBase64Screenshot(takeScreenshot)\n        screenshotSize = getScreenshotSize(screenshot, devicePixelRatio)\n\n        // Determine scroll height and check if we need to scroll again\n        scrollHeight = await executor(getDocumentScrollHeight)\n        if (scrollHeight && (scrollY + innerHeight < scrollHeight)) {\n            amountOfScrollsArray.push(amountOfScrollsArray.length)\n        }\n        // There is no else\n\n        // The height of the image of the last 1 could be different\n        const imageHeight: number = amountOfScrollsArray.length === i && scrollHeight\n            ? scrollHeight - innerHeight * viewportScreenshots.length\n            : innerHeight\n\n        // The starting position for cropping could be different for the last image (0 means no cropping)\n        const imageYPosition = amountOfScrollsArray.length === i && amountOfScrollsArray.length !== 0 ? innerHeight - imageHeight : 0\n\n        // Store all the screenshot data in the screenshot object\n        viewportScreenshots.push({\n            ...calculateDprData(\n                {\n                    canvasWidth: screenshotSize.width,\n                    canvasYPosition: scrollY,\n                    imageHeight: imageHeight,\n                    imageWidth: screenshotSize.width,\n                    imageXPosition: 0,\n                    imageYPosition: imageYPosition,\n                },\n                devicePixelRatio,\n            ),\n            screenshot,\n        })\n\n        // Show the scrollbars again\n        await executor(hideScrollBars, false)\n    }\n\n    // Put back the hidden elements to visible\n    if (hideAfterFirstScroll.length > 0) {\n        try {\n            await executor(hideRemoveElements, { hide: hideAfterFirstScroll, remove: [] }, false)\n        } catch (e) {\n            logHiddenRemovedError(e, logLevel)\n        }\n    }\n\n    if (!scrollHeight || !screenshotSize) {\n        throw new Error('Couldn\\'t determine scroll height or screenshot size')\n    }\n\n    return {\n        ...calculateDprData(\n            {\n                fullPageHeight: scrollHeight,\n                fullPageWidth: screenshotSize.width,\n            },\n            devicePixelRatio,\n        ),\n        data: viewportScreenshots,\n    }\n}\n\n/**\n * Take a full page screenshots\n */\nexport async function getFullPageScreenshotsDataDesktop(\n    takeScreenshot: TakeScreenShot,\n    executor: Executor,\n    options: FullPageScreenshotOptions,\n): Promise<FullPageScreenshotsData> {\n    const viewportScreenshots = []\n    const { devicePixelRatio, fullPageScrollTimeout, hideAfterFirstScroll, innerHeight, logLevel } = options\n    let actualInnerHeight = innerHeight\n\n    // Start with an empty array, during the scroll it will be filled because a page could also have a lazy loading\n    const amountOfScrollsArray = []\n    let scrollHeight: number | undefined\n    let screenshotSize\n\n    for (let i = 0; i <= amountOfScrollsArray.length; i++) {\n        // Determine and start scrolling\n        const scrollY = actualInnerHeight * i\n        await executor(scrollToPosition, scrollY)\n\n        // Simply wait the amount of time specified for lazy-loading\n        await waitFor(fullPageScrollTimeout)\n\n        // Elements that need to be hidden after the first scroll for a fullpage scroll\n        if (i === 1 && hideAfterFirstScroll.length > 0) {\n            try {\n                await executor(hideRemoveElements, { hide: hideAfterFirstScroll, remove: [] }, true)\n            } catch (e) {\n                logHiddenRemovedError(e, logLevel)\n            }\n        }\n\n        // Take the screenshot\n        const screenshot = await takeBase64Screenshot(takeScreenshot)\n        screenshotSize = getScreenshotSize(screenshot, devicePixelRatio)\n\n        // The actual screenshot size might be slightly different than the inner height\n        // In that case, use the screenshot size instead of the innerHeight\n        if (i === 0 && screenshotSize.height !== actualInnerHeight) {\n            if (Math.round(screenshotSize.height) === actualInnerHeight) {\n                actualInnerHeight = screenshotSize.height\n            }\n            // No else, because some drivers take a full page screenshot, e.g. some versions of FireFox,\n            // and SafariDriver for Safari 11\n        }\n\n        // Determine scroll height and check if we need to scroll again\n        scrollHeight = await executor(getDocumentScrollHeight)\n\n        if (scrollHeight && (scrollY + actualInnerHeight < scrollHeight) && screenshotSize.height === actualInnerHeight) {\n            amountOfScrollsArray.push(amountOfScrollsArray.length)\n        }\n        // There is no else, Lazy load and large screenshots,\n        // like with older drivers such as FF <= 47 and IE11, will not work\n\n        // The height of the image of the last 1 could be different\n        const imageHeight: number = scrollHeight && amountOfScrollsArray.length === i\n            ? scrollHeight - actualInnerHeight * viewportScreenshots.length\n            : screenshotSize.height\n        // The starting position for cropping could be different for the last image (0 means no cropping)\n        const imageYPosition = amountOfScrollsArray.length === i && amountOfScrollsArray.length !== 0\n            ? actualInnerHeight - imageHeight\n            : 0\n\n        // Store all the screenshot data in the screenshot object\n        viewportScreenshots.push({\n            ...calculateDprData(\n                {\n                    canvasWidth: screenshotSize.width,\n                    canvasYPosition: scrollY,\n                    imageHeight: imageHeight,\n                    imageWidth: screenshotSize.width,\n                    imageXPosition: 0,\n                    imageYPosition: imageYPosition,\n                },\n                devicePixelRatio,\n            ),\n            screenshot,\n        })\n    }\n\n    // Put back the hidden elements to visible\n    if (hideAfterFirstScroll.length > 0) {\n        try {\n            await executor(hideRemoveElements, { hide: hideAfterFirstScroll, remove: [] }, false)\n        } catch (e) {\n            logHiddenRemovedError(e, logLevel)\n        }\n    }\n\n    if (!scrollHeight || !screenshotSize) {\n        throw new Error('Couldn\\'t determine scroll height or screenshot size')\n    }\n\n    return {\n        ...calculateDprData(\n            {\n                fullPageHeight: scrollHeight,\n                fullPageWidth: screenshotSize.width,\n            },\n            devicePixelRatio,\n        ),\n        data: viewportScreenshots,\n    }\n}\n\n/**\n * Take a screenshot\n */\nexport async function takeBase64Screenshot(takeScreenshot: TakeScreenShot): Promise<string> {\n    return takeScreenshot()\n}\n\n/**\n * Log an error for not being able to hide remove elements\n *\n * @TODO: remove the any\n */\nfunction logHiddenRemovedError(error: any, logLevel: LogLevel) {\n    if (logLevel === LogLevel.debug || logLevel === LogLevel.warn) {\n        console.log(\n            '\\x1b[33m%s\\x1b[0m',\n            `\n#####################################################################################\n WARNING:\n (One of) the elements that needed to be hidden or removed could not be found on the\n page and caused this error\n Error: ${error}\n We made sure the test didn't break.\n#####################################################################################\n`,\n        )\n    }\n}\n"]}