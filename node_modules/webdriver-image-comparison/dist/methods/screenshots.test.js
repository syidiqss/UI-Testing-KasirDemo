"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var vitest_1 = require("vitest");
var screenshots_js_1 = require("./screenshots.js");
var mocks_js_1 = require("../mocks/mocks.js");
var options_interfaces_1 = require("../helpers/options.interfaces");
(0, vitest_1.describe)('screenshots', function () {
    (0, vitest_1.describe)('getBase64FullPageScreenshotsData', function () {
        var MOCKED_TAKESCREENSHOT = vitest_1.vi.fn().mockResolvedValue(mocks_js_1.IMAGE_STRING);
        (0, vitest_1.it)('should get the Android nativeWebScreenshot fullpage screenshot data', function () { return __awaiter(void 0, void 0, void 0, function () {
            var options, MOCKED_EXECUTOR, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = {
                            addressBarShadowPadding: 6,
                            devicePixelRatio: 2,
                            fullPageScrollTimeout: 1,
                            innerHeight: 800,
                            isAndroid: true,
                            isAndroidNativeWebScreenshot: true,
                            isAndroidChromeDriverScreenshot: false,
                            isHybridApp: false,
                            isIOS: false,
                            isLandscape: false,
                            logLevel: options_interfaces_1.LogLevel.debug,
                            toolBarShadowPadding: 6,
                            hideAfterFirstScroll: [],
                            screenHeight: 0,
                            screenWidth: 0,
                        };
                        MOCKED_EXECUTOR = vitest_1.vi
                            .fn()
                            .mockResolvedValueOnce({
                            isLandscape: false,
                            safeArea: 0,
                            statusAddressBar: { height: 56 },
                            screenHeight: 768,
                            screenWidth: 1366,
                            sideBar: { width: 0 },
                        })
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce(788)
                            .mockResolvedValueOnce({});
                        return [4, (0, screenshots_js_1.getBase64FullPageScreenshotsData)(MOCKED_TAKESCREENSHOT, MOCKED_EXECUTOR, options)];
                    case 1:
                        result = _a.sent();
                        result.data.forEach(function (dataObject) { return (dataObject.screenshot = 'mocked-screenshot-string'); });
                        (0, vitest_1.expect)(result).toMatchSnapshot();
                        return [2];
                }
            });
        }); });
        (0, vitest_1.it)('should get hide elements for the Android nativeWebScreenshot fullpage screenshot', function () { return __awaiter(void 0, void 0, void 0, function () {
            var options, MOCKED_EXECUTOR, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = {
                            addressBarShadowPadding: 6,
                            devicePixelRatio: 2,
                            fullPageScrollTimeout: 1,
                            innerHeight: 600,
                            isAndroid: true,
                            isAndroidNativeWebScreenshot: true,
                            isAndroidChromeDriverScreenshot: false,
                            isHybridApp: false,
                            isIOS: false,
                            isLandscape: false,
                            logLevel: options_interfaces_1.LogLevel.debug,
                            toolBarShadowPadding: 6,
                            hideAfterFirstScroll: ['<div/>'],
                            screenHeight: 0,
                            screenWidth: 0,
                        };
                        MOCKED_EXECUTOR = vitest_1.vi
                            .fn()
                            .mockResolvedValueOnce({
                            isLandscape: false,
                            safeArea: 0,
                            statusAddressBar: { height: 56 },
                            screenHeight: 768,
                            screenWidth: 1366,
                            sideBar: { width: 0 },
                        })
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce(788)
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce(788)
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce({});
                        return [4, (0, screenshots_js_1.getBase64FullPageScreenshotsData)(MOCKED_TAKESCREENSHOT, MOCKED_EXECUTOR, options)];
                    case 1:
                        result = _a.sent();
                        result.data.forEach(function (dataObject) { return (dataObject.screenshot = 'mocked-screenshot-string'); });
                        (0, vitest_1.expect)(result).toMatchSnapshot();
                        return [2];
                }
            });
        }); });
        (0, vitest_1.it)('should get the Android ChromeDriver fullpage screenshot data', function () { return __awaiter(void 0, void 0, void 0, function () {
            var options, MOCKED_EXECUTOR, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = {
                            addressBarShadowPadding: 6,
                            devicePixelRatio: 2,
                            fullPageScrollTimeout: 1,
                            innerHeight: 800,
                            isAndroid: true,
                            isAndroidNativeWebScreenshot: false,
                            isAndroidChromeDriverScreenshot: true,
                            isHybridApp: false,
                            isIOS: false,
                            isLandscape: false,
                            logLevel: options_interfaces_1.LogLevel.debug,
                            toolBarShadowPadding: 6,
                            hideAfterFirstScroll: [],
                            screenHeight: 0,
                            screenWidth: 0,
                        };
                        MOCKED_EXECUTOR = vitest_1.vi
                            .fn()
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce(1200)
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce(1200)
                            .mockResolvedValueOnce({});
                        return [4, (0, screenshots_js_1.getBase64FullPageScreenshotsData)(MOCKED_TAKESCREENSHOT, MOCKED_EXECUTOR, options)];
                    case 1:
                        result = _a.sent();
                        result.data.forEach(function (dataObject) { return (dataObject.screenshot = 'mocked-screenshot-string'); });
                        (0, vitest_1.expect)(result).toMatchSnapshot();
                        return [2];
                }
            });
        }); });
        (0, vitest_1.it)('should hide elements for the Android ChromeDriver fullpage screenshot', function () { return __awaiter(void 0, void 0, void 0, function () {
            var options, MOCKED_EXECUTOR, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = {
                            addressBarShadowPadding: 6,
                            devicePixelRatio: 2,
                            fullPageScrollTimeout: 1,
                            innerHeight: 800,
                            isAndroid: true,
                            isAndroidNativeWebScreenshot: false,
                            isAndroidChromeDriverScreenshot: true,
                            isHybridApp: false,
                            isIOS: false,
                            isLandscape: false,
                            logLevel: options_interfaces_1.LogLevel.debug,
                            toolBarShadowPadding: 6,
                            hideAfterFirstScroll: ['<div/>'],
                            screenHeight: 0,
                            screenWidth: 0,
                        };
                        MOCKED_EXECUTOR = vitest_1.vi
                            .fn()
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce(1200)
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce(1200)
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce({});
                        return [4, (0, screenshots_js_1.getBase64FullPageScreenshotsData)(MOCKED_TAKESCREENSHOT, MOCKED_EXECUTOR, options)];
                    case 1:
                        result = _a.sent();
                        result.data.forEach(function (dataObject) { return (dataObject.screenshot = 'mocked-screenshot-string'); });
                        (0, vitest_1.expect)(result).toMatchSnapshot();
                        return [2];
                }
            });
        }); });
        (0, vitest_1.it)('should get the iOS fullpage screenshot data', function () { return __awaiter(void 0, void 0, void 0, function () {
            var options, MOCKED_EXECUTOR, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = {
                            addressBarShadowPadding: 6,
                            devicePixelRatio: 2,
                            fullPageScrollTimeout: 1,
                            innerHeight: 800,
                            isAndroid: false,
                            isAndroidNativeWebScreenshot: false,
                            isAndroidChromeDriverScreenshot: false,
                            isHybridApp: false,
                            isIOS: true,
                            isLandscape: false,
                            logLevel: options_interfaces_1.LogLevel.debug,
                            toolBarShadowPadding: 6,
                            hideAfterFirstScroll: [],
                            screenHeight: 0,
                            screenWidth: 0,
                        };
                        MOCKED_EXECUTOR = vitest_1.vi
                            .fn()
                            .mockResolvedValueOnce({
                            isLandscape: false,
                            safeArea: 44,
                            screenHeight: 768,
                            screenWidth: 1366,
                            sideBar: { width: 0 },
                            statusAddressBar: { height: 94 },
                            toolBar: { y: 329 },
                        })
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce(1200)
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce(1200)
                            .mockResolvedValueOnce({});
                        return [4, (0, screenshots_js_1.getBase64FullPageScreenshotsData)(MOCKED_TAKESCREENSHOT, MOCKED_EXECUTOR, options)];
                    case 1:
                        result = _a.sent();
                        result.data.forEach(function (dataObject) { return (dataObject.screenshot = 'mocked-screenshot-string'); });
                        (0, vitest_1.expect)(result).toMatchSnapshot();
                        return [2];
                }
            });
        }); });
        (0, vitest_1.it)('should get the iOS fullpage screenshot data for a landscape iPad', function () { return __awaiter(void 0, void 0, void 0, function () {
            var options, MOCKED_EXECUTOR, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = {
                            addressBarShadowPadding: 6,
                            devicePixelRatio: 2,
                            fullPageScrollTimeout: 1,
                            innerHeight: 400,
                            isAndroid: false,
                            isAndroidNativeWebScreenshot: false,
                            isAndroidChromeDriverScreenshot: false,
                            isHybridApp: false,
                            isIOS: true,
                            isLandscape: false,
                            logLevel: options_interfaces_1.LogLevel.debug,
                            toolBarShadowPadding: 6,
                            hideAfterFirstScroll: [],
                            screenHeight: 0,
                            screenWidth: 0,
                        };
                        MOCKED_EXECUTOR = vitest_1.vi
                            .fn()
                            .mockResolvedValueOnce({
                            isLandscape: true,
                            safeArea: 0,
                            screenHeight: 384,
                            screenWidth: 683,
                            sideBar: { width: 160 },
                            statusAddressBar: { height: 47 },
                            toolBar: { y: 75 },
                        })
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce(600)
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce(600)
                            .mockResolvedValueOnce({});
                        return [4, (0, screenshots_js_1.getBase64FullPageScreenshotsData)(MOCKED_TAKESCREENSHOT, MOCKED_EXECUTOR, options)];
                    case 1:
                        result = _a.sent();
                        result.data.forEach(function (dataObject) { return (dataObject.screenshot = 'mocked-screenshot-string'); });
                        (0, vitest_1.expect)(result).toMatchSnapshot();
                        return [2];
                }
            });
        }); });
        (0, vitest_1.it)('should hide elements for the iOS fullpage screenshot', function () { return __awaiter(void 0, void 0, void 0, function () {
            var options, MOCKED_EXECUTOR, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = {
                            addressBarShadowPadding: 6,
                            devicePixelRatio: 2,
                            fullPageScrollTimeout: 1,
                            innerHeight: 800,
                            isAndroid: false,
                            isAndroidNativeWebScreenshot: false,
                            isAndroidChromeDriverScreenshot: false,
                            isHybridApp: false,
                            isIOS: true,
                            isLandscape: false,
                            logLevel: options_interfaces_1.LogLevel.debug,
                            toolBarShadowPadding: 6,
                            hideAfterFirstScroll: ['<div/>'],
                            screenHeight: 0,
                            screenWidth: 0,
                        };
                        MOCKED_EXECUTOR = vitest_1.vi
                            .fn()
                            .mockResolvedValueOnce({
                            isLandscape: false,
                            safeArea: 44,
                            screenHeight: 768,
                            screenWidth: 1366,
                            sideBar: { width: 0 },
                            statusAddressBar: { height: 94 },
                            toolBar: { y: 329 },
                        })
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce(1200)
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce(1200)
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce({});
                        return [4, (0, screenshots_js_1.getBase64FullPageScreenshotsData)(MOCKED_TAKESCREENSHOT, MOCKED_EXECUTOR, options)];
                    case 1:
                        result = _a.sent();
                        result.data.forEach(function (dataObject) { return (dataObject.screenshot = 'mocked-screenshot-string'); });
                        (0, vitest_1.expect)(result).toMatchSnapshot();
                        return [2];
                }
            });
        }); });
        (0, vitest_1.it)('should get the desktop browser fullpage screenshot data', function () { return __awaiter(void 0, void 0, void 0, function () {
            var options, MOCKED_EXECUTOR, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = {
                            addressBarShadowPadding: 6,
                            devicePixelRatio: 2,
                            fullPageScrollTimeout: 1,
                            innerHeight: 768,
                            isAndroid: false,
                            isAndroidNativeWebScreenshot: false,
                            isAndroidChromeDriverScreenshot: false,
                            isHybridApp: false,
                            isIOS: false,
                            isLandscape: false,
                            logLevel: options_interfaces_1.LogLevel.debug,
                            toolBarShadowPadding: 6,
                            hideAfterFirstScroll: [],
                            screenHeight: 0,
                            screenWidth: 0,
                        };
                        MOCKED_EXECUTOR = vitest_1.vi
                            .fn()
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce(3200)
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce(3200)
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce(3200)
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce(3200)
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce(3200);
                        return [4, (0, screenshots_js_1.getBase64FullPageScreenshotsData)(MOCKED_TAKESCREENSHOT, MOCKED_EXECUTOR, options)];
                    case 1:
                        result = _a.sent();
                        result.data.forEach(function (dataObject) { return (dataObject.screenshot = 'mocked-screenshot-string'); });
                        (0, vitest_1.expect)(result).toMatchSnapshot();
                        return [2];
                }
            });
        }); });
        (0, vitest_1.it)('should hide elements for the desktop browser fullpage screenshot', function () { return __awaiter(void 0, void 0, void 0, function () {
            var options, MOCKED_EXECUTOR, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = {
                            addressBarShadowPadding: 6,
                            devicePixelRatio: 2,
                            fullPageScrollTimeout: 1,
                            innerHeight: 768,
                            isAndroid: false,
                            isAndroidNativeWebScreenshot: false,
                            isAndroidChromeDriverScreenshot: false,
                            isHybridApp: false,
                            isIOS: false,
                            isLandscape: false,
                            logLevel: options_interfaces_1.LogLevel.debug,
                            toolBarShadowPadding: 6,
                            hideAfterFirstScroll: ['<div/>'],
                            screenHeight: 0,
                            screenWidth: 0,
                        };
                        MOCKED_EXECUTOR = vitest_1.vi
                            .fn()
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce(3200)
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce(3200)
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce(3200)
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce(3200)
                            .mockResolvedValueOnce({})
                            .mockResolvedValueOnce(3200)
                            .mockResolvedValueOnce({});
                        return [4, (0, screenshots_js_1.getBase64FullPageScreenshotsData)(MOCKED_TAKESCREENSHOT, MOCKED_EXECUTOR, options)];
                    case 1:
                        result = _a.sent();
                        result.data.forEach(function (dataObject) { return (dataObject.screenshot = 'mocked-screenshot-string'); });
                        (0, vitest_1.expect)(result).toMatchSnapshot();
                        return [2];
                }
            });
        }); });
    });
});
//# sourceMappingURL=screenshots.test.js.map