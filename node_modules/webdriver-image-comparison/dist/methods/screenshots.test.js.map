{"version":3,"file":"screenshots.test.js","sourceRoot":"","sources":["../../src/methods/screenshots.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, it, expect, vi } from 'vitest'\nimport { getBase64FullPageScreenshotsData } from './screenshots.js'\nimport type { FullPageScreenshotDataOptions } from './screenshots.interfaces'\nimport { IMAGE_STRING } from '../mocks/mocks.js'\nimport { LogLevel } from '../helpers/options.interfaces'\n\ndescribe('screenshots', () => {\n    describe('getBase64FullPageScreenshotsData', () => {\n        const MOCKED_TAKESCREENSHOT = vi.fn().mockResolvedValue(IMAGE_STRING)\n\n        it('should get the Android nativeWebScreenshot fullpage screenshot data', async () => {\n            const options: FullPageScreenshotDataOptions = {\n                addressBarShadowPadding: 6,\n                devicePixelRatio: 2,\n                fullPageScrollTimeout: 1,\n                innerHeight: 800,\n                isAndroid: true,\n                isAndroidNativeWebScreenshot: true,\n                isAndroidChromeDriverScreenshot: false,\n                isHybridApp: false,\n                isIOS: false,\n                isLandscape: false,\n                logLevel: LogLevel.debug,\n                toolBarShadowPadding: 6,\n                hideAfterFirstScroll: [],\n                screenHeight: 0,\n                screenWidth: 0,\n            }\n            const MOCKED_EXECUTOR = vi\n                .fn()\n                // For await executor(getAndroidStatusAddressToolBarOffsets, OFFSETS.ANDROID))\n                .mockResolvedValueOnce({\n                    isLandscape: false,\n                    safeArea: 0,\n                    statusAddressBar: { height: 56 },\n                    screenHeight: 768,\n                    screenWidth: 1366,\n                    sideBar: { width: 0 },\n                })\n                // THIS NEEDS TO BE FIXED IN THE FUTURE\n                // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, true);\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n                .mockResolvedValueOnce(788)\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, false);\n                .mockResolvedValueOnce({})\n\n            // Replace the screenshot with a `mocked-screenshot-string`;\n            const result = await getBase64FullPageScreenshotsData(MOCKED_TAKESCREENSHOT, MOCKED_EXECUTOR, options)\n            result.data.forEach((dataObject) => (dataObject.screenshot = 'mocked-screenshot-string'))\n\n            expect(result).toMatchSnapshot()\n        })\n\n        it('should get hide elements for the Android nativeWebScreenshot fullpage screenshot', async () => {\n            const options: FullPageScreenshotDataOptions = {\n                addressBarShadowPadding: 6,\n                devicePixelRatio: 2,\n                fullPageScrollTimeout: 1,\n                innerHeight: 600,\n                isAndroid: true,\n                isAndroidNativeWebScreenshot: true,\n                isAndroidChromeDriverScreenshot: false,\n                isHybridApp: false,\n                isIOS: false,\n                isLandscape: false,\n                logLevel: LogLevel.debug,\n                toolBarShadowPadding: 6,\n                hideAfterFirstScroll: [<HTMLElement>(<unknown>'<div/>')],\n                screenHeight: 0,\n                screenWidth: 0,\n            }\n            const MOCKED_EXECUTOR = vi\n                .fn()\n                // For await executor(getAndroidStatusAddressToolBarOffsets, OFFSETS.ANDROID))\n                .mockResolvedValueOnce({\n                    isLandscape: false,\n                    safeArea: 0,\n                    statusAddressBar: { height: 56 },\n                    screenHeight: 768,\n                    screenWidth: 1366,\n                    sideBar: { width: 0 },\n                })\n                // THIS NEEDS TO BE FIXED IN THE FUTURE\n                // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, true);\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n                .mockResolvedValueOnce(788)\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, false);\n                .mockResolvedValueOnce({})\n                // RUN 2\n                // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, true);\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideRemoveElements, {hide: hideAfterFirstScroll, remove: []}, true);\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n                .mockResolvedValueOnce(788)\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, false);\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideRemoveElements, {hide: hideAfterFirstScroll, remove: []}, false);\n                .mockResolvedValueOnce({})\n\n            // Replace the screenshot with a `mocked-screenshot-string`;\n            const result = await getBase64FullPageScreenshotsData(MOCKED_TAKESCREENSHOT, MOCKED_EXECUTOR, options)\n            result.data.forEach((dataObject) => (dataObject.screenshot = 'mocked-screenshot-string'))\n\n            expect(result).toMatchSnapshot()\n        })\n\n        it('should get the Android ChromeDriver fullpage screenshot data', async () => {\n            const options: FullPageScreenshotDataOptions = {\n                addressBarShadowPadding: 6,\n                devicePixelRatio: 2,\n                fullPageScrollTimeout: 1,\n                innerHeight: 800,\n                isAndroid: true,\n                isAndroidNativeWebScreenshot: false,\n                isAndroidChromeDriverScreenshot: true,\n                isHybridApp: false,\n                isIOS: false,\n                isLandscape: false,\n                logLevel: LogLevel.debug,\n                toolBarShadowPadding: 6,\n                hideAfterFirstScroll: [],\n                screenHeight: 0,\n                screenWidth: 0,\n            }\n            const MOCKED_EXECUTOR = vi\n                .fn()\n                // THIS NEEDS TO BE FIXED IN THE FUTURE\n                // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, true);\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n                .mockResolvedValueOnce(1200)\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, false);\n                .mockResolvedValueOnce({})\n                // RUN 2\n                // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, true);\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n                .mockResolvedValueOnce(1200)\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, false);\n                .mockResolvedValueOnce({})\n\n            // Replace the screenshot with a `mocked-screenshot-string`;\n            const result = await getBase64FullPageScreenshotsData(MOCKED_TAKESCREENSHOT, MOCKED_EXECUTOR, options)\n            result.data.forEach((dataObject) => (dataObject.screenshot = 'mocked-screenshot-string'))\n\n            expect(result).toMatchSnapshot()\n        })\n\n        it('should hide elements for the Android ChromeDriver fullpage screenshot', async () => {\n            const options: FullPageScreenshotDataOptions = {\n                addressBarShadowPadding: 6,\n                devicePixelRatio: 2,\n                fullPageScrollTimeout: 1,\n                innerHeight: 800,\n                isAndroid: true,\n                isAndroidNativeWebScreenshot: false,\n                isAndroidChromeDriverScreenshot: true,\n                isHybridApp: false,\n                isIOS: false,\n                isLandscape: false,\n                logLevel: LogLevel.debug,\n                toolBarShadowPadding: 6,\n                hideAfterFirstScroll: [<HTMLElement>(<unknown>'<div/>')],\n                screenHeight: 0,\n                screenWidth: 0,\n            }\n            const MOCKED_EXECUTOR = vi\n                .fn()\n                // THIS NEEDS TO BE FIXED IN THE FUTURE\n                // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, true);\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n                .mockResolvedValueOnce(1200)\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, false);\n                .mockResolvedValueOnce({})\n                // RUN 2\n                // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, true);\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideRemoveElements, {hide: hideAfterFirstScroll, remove: []}, true);\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n                .mockResolvedValueOnce(1200)\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, false);\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideRemoveElements, {hide: hideAfterFirstScroll, remove: []}, false);\n                .mockResolvedValueOnce({})\n\n            // Replace the screenshot with a `mocked-screenshot-string`;\n            const result = await getBase64FullPageScreenshotsData(MOCKED_TAKESCREENSHOT, MOCKED_EXECUTOR, options)\n            result.data.forEach((dataObject) => (dataObject.screenshot = 'mocked-screenshot-string'))\n\n            expect(result).toMatchSnapshot()\n        })\n\n        it('should get the iOS fullpage screenshot data', async () => {\n            const options: FullPageScreenshotDataOptions = {\n                addressBarShadowPadding: 6,\n                devicePixelRatio: 2,\n                fullPageScrollTimeout: 1,\n                innerHeight: 800,\n                isAndroid: false,\n                isAndroidNativeWebScreenshot: false,\n                isAndroidChromeDriverScreenshot: false,\n                isHybridApp: false,\n                isIOS: true,\n                isLandscape: false,\n                logLevel: LogLevel.debug,\n                toolBarShadowPadding: 6,\n                hideAfterFirstScroll: [],\n                screenHeight: 0,\n                screenWidth: 0,\n            }\n            const MOCKED_EXECUTOR = vi\n                .fn()\n                .mockResolvedValueOnce({\n                    isLandscape: false,\n                    safeArea: 44,\n                    screenHeight: 768,\n                    screenWidth: 1366,\n                    sideBar: { width: 0 },\n                    statusAddressBar: { height: 94 },\n                    toolBar: { y: 329 },\n                })\n                // THIS NEEDS TO BE FIXED IN THE FUTURE\n                // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, true);\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n                .mockResolvedValueOnce(1200)\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, false);\n                .mockResolvedValueOnce({})\n                // RUN 2\n                // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, true);\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n                .mockResolvedValueOnce(1200)\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, false);\n                .mockResolvedValueOnce({})\n\n            // Replace the screenshot with a `mocked-screenshot-string`;\n            const result = await getBase64FullPageScreenshotsData(MOCKED_TAKESCREENSHOT, MOCKED_EXECUTOR, options)\n            result.data.forEach((dataObject) => (dataObject.screenshot = 'mocked-screenshot-string'))\n\n            expect(result).toMatchSnapshot()\n        })\n\n        it('should get the iOS fullpage screenshot data for a landscape iPad', async () => {\n            const options: FullPageScreenshotDataOptions = {\n                addressBarShadowPadding: 6,\n                devicePixelRatio: 2,\n                fullPageScrollTimeout: 1,\n                innerHeight: 400,\n                isAndroid: false,\n                isAndroidNativeWebScreenshot: false,\n                isAndroidChromeDriverScreenshot: false,\n                isHybridApp: false,\n                isIOS: true,\n                isLandscape: false,\n                logLevel: LogLevel.debug,\n                toolBarShadowPadding: 6,\n                hideAfterFirstScroll: [],\n                screenHeight: 0,\n                screenWidth: 0,\n            }\n            const MOCKED_EXECUTOR = vi\n                .fn()\n                .mockResolvedValueOnce({\n                    isLandscape: true,\n                    safeArea: 0,\n                    screenHeight: 384,\n                    screenWidth: 683,\n                    sideBar: { width: 160 },\n                    statusAddressBar: { height: 47 },\n                    toolBar: { y: 75 },\n                })\n                // THIS NEEDS TO BE FIXED IN THE FUTURE\n                // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, true);\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n                .mockResolvedValueOnce(600)\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, false);\n                .mockResolvedValueOnce({})\n                // RUN 2\n                // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, true);\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n                .mockResolvedValueOnce(600)\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, false);\n                .mockResolvedValueOnce({})\n\n            // Replace the screenshot with a `mocked-screenshot-string`;\n            const result = await getBase64FullPageScreenshotsData(MOCKED_TAKESCREENSHOT, MOCKED_EXECUTOR, options)\n            result.data.forEach((dataObject) => (dataObject.screenshot = 'mocked-screenshot-string'))\n\n            expect(result).toMatchSnapshot()\n        })\n\n        it('should hide elements for the iOS fullpage screenshot', async () => {\n            const options: FullPageScreenshotDataOptions = {\n                addressBarShadowPadding: 6,\n                devicePixelRatio: 2,\n                fullPageScrollTimeout: 1,\n                innerHeight: 800,\n                isAndroid: false,\n                isAndroidNativeWebScreenshot: false,\n                isAndroidChromeDriverScreenshot: false,\n                isHybridApp: false,\n                isIOS: true,\n                isLandscape: false,\n                logLevel: LogLevel.debug,\n                toolBarShadowPadding: 6,\n                hideAfterFirstScroll: [<HTMLElement>(<unknown>'<div/>')],\n                screenHeight: 0,\n                screenWidth: 0,\n            }\n            const MOCKED_EXECUTOR = vi\n                .fn()\n                // getBase64FullPageScreenshotsData: For await executor(getIosStatusAddressToolBarOffsets)\n                .mockResolvedValueOnce({\n                    isLandscape: false,\n                    safeArea: 44,\n                    screenHeight: 768,\n                    screenWidth: 1366,\n                    sideBar: { width: 0 },\n                    statusAddressBar: { height: 94 },\n                    toolBar: { y: 329 },\n                })\n                // THIS NEEDS TO BE FIXED IN THE FUTURE\n                // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, true);\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n                .mockResolvedValueOnce(1200)\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, false);\n                .mockResolvedValueOnce({})\n                // RUN 2\n                // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, true);\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideRemoveElements, {hide: hideAfterFirstScroll, remove: []}, true);\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n                .mockResolvedValueOnce(1200)\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideScrollBars, false);\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideRemoveElements, {hide: hideAfterFirstScroll, remove: []}, false);\n                .mockResolvedValueOnce({})\n\n            // Replace the screenshot with a `mocked-screenshot-string`;\n            const result = await getBase64FullPageScreenshotsData(MOCKED_TAKESCREENSHOT, MOCKED_EXECUTOR, options)\n            result.data.forEach((dataObject) => (dataObject.screenshot = 'mocked-screenshot-string'))\n\n            expect(result).toMatchSnapshot()\n        })\n\n        it('should get the desktop browser fullpage screenshot data', async () => {\n            const options: FullPageScreenshotDataOptions = {\n                addressBarShadowPadding: 6,\n                devicePixelRatio: 2,\n                fullPageScrollTimeout: 1,\n                innerHeight: 768,\n                isAndroid: false,\n                isAndroidNativeWebScreenshot: false,\n                isAndroidChromeDriverScreenshot: false,\n                isHybridApp: false,\n                isIOS: false,\n                isLandscape: false,\n                logLevel: LogLevel.debug,\n                toolBarShadowPadding: 6,\n                hideAfterFirstScroll: [],\n                screenHeight: 0,\n                screenWidth: 0,\n            }\n            const MOCKED_EXECUTOR = vi\n                .fn()\n                // THIS NEEDS TO BE FIXED IN THE FUTURE\n                // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n                .mockResolvedValueOnce(3200)\n                // RUN 2\n                // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n                .mockResolvedValueOnce(3200)\n                // RUN 3\n                // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n                .mockResolvedValueOnce(3200)\n                // RUN 4\n                // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n                .mockResolvedValueOnce(3200)\n                // RUN 5\n                // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n                .mockResolvedValueOnce(3200)\n\n            // Replace the screenshot with a `mocked-screenshot-string`;\n            const result = await getBase64FullPageScreenshotsData(MOCKED_TAKESCREENSHOT, MOCKED_EXECUTOR, options)\n            result.data.forEach((dataObject) => (dataObject.screenshot = 'mocked-screenshot-string'))\n\n            expect(result).toMatchSnapshot()\n        })\n\n        it('should hide elements for the desktop browser fullpage screenshot', async () => {\n            const options: FullPageScreenshotDataOptions = {\n                addressBarShadowPadding: 6,\n                devicePixelRatio: 2,\n                fullPageScrollTimeout: 1,\n                innerHeight: 768,\n                isAndroid: false,\n                isAndroidNativeWebScreenshot: false,\n                isAndroidChromeDriverScreenshot: false,\n                isHybridApp: false,\n                isIOS: false,\n                isLandscape: false,\n                logLevel: LogLevel.debug,\n                toolBarShadowPadding: 6,\n                hideAfterFirstScroll: [<HTMLElement>(<unknown>'<div/>')],\n                screenHeight: 0,\n                screenWidth: 0,\n            }\n            const MOCKED_EXECUTOR = vi\n                .fn()\n                // THIS NEEDS TO BE FIXED IN THE FUTURE\n                // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n                .mockResolvedValueOnce(3200)\n                // RUN 2\n                // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideRemoveElements, {hide: hideAfterFirstScroll, remove: []}, true);\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n                .mockResolvedValueOnce(3200)\n                // RUN 3\n                // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n                .mockResolvedValueOnce(3200)\n                // RUN 4\n                // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n                .mockResolvedValueOnce(3200)\n                // RUN 5\n                // getFullPageScreenshotsDataNativeMobile: For await executor(scrollToPosition, scrollY)\n                .mockResolvedValueOnce({})\n                // getFullPageScreenshotsDataNativeMobile: For await executor(getDocumentScrollHeight)\n                .mockResolvedValueOnce(3200)\n                // getFullPageScreenshotsDataNativeMobile: For await executor(hideRemoveElements, {hide: hideAfterFirstScroll, remove: []}, false);\n                .mockResolvedValueOnce({})\n\n            // Replace the screenshot with a `mocked-screenshot-string`;\n            const result = await getBase64FullPageScreenshotsData(MOCKED_TAKESCREENSHOT, MOCKED_EXECUTOR, options)\n            result.data.forEach((dataObject) => (dataObject.screenshot = 'mocked-screenshot-string'))\n\n            expect(result).toMatchSnapshot()\n        })\n    })\n})\n"]}